//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToVolumeFlow
{
    /// <summary>
    /// A number to VolumeFlow Extensions
    /// </summary>
    public static class NumberToVolumeFlowExtensions
    {
        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerDay(QuantityValue)" />
        public static VolumeFlow AcreFeetPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromAcreFeetPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerHour(QuantityValue)" />
        public static VolumeFlow AcreFeetPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromAcreFeetPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerMinute(QuantityValue)" />
        public static VolumeFlow AcreFeetPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromAcreFeetPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerSecond(QuantityValue)" />
        public static VolumeFlow AcreFeetPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromAcreFeetPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCentilitersPerDay(QuantityValue)" />
        public static VolumeFlow CentilitersPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromCentilitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCentilitersPerHour(QuantityValue)" />
        public static VolumeFlow CentilitersPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromCentilitersPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCentilitersPerMinute(QuantityValue)" />
        public static VolumeFlow CentilitersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromCentilitersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCentilitersPerSecond(QuantityValue)" />
        public static VolumeFlow CentilitersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromCentilitersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicCentimetersPerMinute(QuantityValue)" />
        public static VolumeFlow CubicCentimetersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromCubicCentimetersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicDecimetersPerMinute(QuantityValue)" />
        public static VolumeFlow CubicDecimetersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromCubicDecimetersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerHour(QuantityValue)" />
        public static VolumeFlow CubicFeetPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromCubicFeetPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerMinute(QuantityValue)" />
        public static VolumeFlow CubicFeetPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromCubicFeetPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerSecond(QuantityValue)" />
        public static VolumeFlow CubicFeetPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromCubicFeetPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerDay(QuantityValue)" />
        public static VolumeFlow CubicMetersPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromCubicMetersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerHour(QuantityValue)" />
        public static VolumeFlow CubicMetersPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromCubicMetersPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerMinute(QuantityValue)" />
        public static VolumeFlow CubicMetersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromCubicMetersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerSecond(QuantityValue)" />
        public static VolumeFlow CubicMetersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromCubicMetersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicMillimetersPerSecond(QuantityValue)" />
        public static VolumeFlow CubicMillimetersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromCubicMillimetersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerDay(QuantityValue)" />
        public static VolumeFlow CubicYardsPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromCubicYardsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerHour(QuantityValue)" />
        public static VolumeFlow CubicYardsPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromCubicYardsPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerMinute(QuantityValue)" />
        public static VolumeFlow CubicYardsPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromCubicYardsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerSecond(QuantityValue)" />
        public static VolumeFlow CubicYardsPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromCubicYardsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromDecalitersPerDay(QuantityValue)" />
        public static VolumeFlow DecalitersPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromDecalitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromDecalitersPerHour(QuantityValue)" />
        public static VolumeFlow DecalitersPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromDecalitersPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromDecalitersPerMinute(QuantityValue)" />
        public static VolumeFlow DecalitersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromDecalitersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromDecalitersPerSecond(QuantityValue)" />
        public static VolumeFlow DecalitersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromDecalitersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromDecilitersPerDay(QuantityValue)" />
        public static VolumeFlow DecilitersPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromDecilitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromDecilitersPerHour(QuantityValue)" />
        public static VolumeFlow DecilitersPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromDecilitersPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromDecilitersPerMinute(QuantityValue)" />
        public static VolumeFlow DecilitersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromDecilitersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromDecilitersPerSecond(QuantityValue)" />
        public static VolumeFlow DecilitersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromDecilitersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromHectolitersPerDay(QuantityValue)" />
        public static VolumeFlow HectolitersPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromHectolitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromHectolitersPerHour(QuantityValue)" />
        public static VolumeFlow HectolitersPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromHectolitersPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromHectolitersPerMinute(QuantityValue)" />
        public static VolumeFlow HectolitersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromHectolitersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromHectolitersPerSecond(QuantityValue)" />
        public static VolumeFlow HectolitersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromHectolitersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromKilolitersPerDay(QuantityValue)" />
        public static VolumeFlow KilolitersPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromKilolitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromKilolitersPerHour(QuantityValue)" />
        public static VolumeFlow KilolitersPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromKilolitersPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromKilolitersPerMinute(QuantityValue)" />
        public static VolumeFlow KilolitersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromKilolitersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromKilolitersPerSecond(QuantityValue)" />
        public static VolumeFlow KilolitersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromKilolitersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromKilousGallonsPerMinute(QuantityValue)" />
        public static VolumeFlow KilousGallonsPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromKilousGallonsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromLitersPerDay(QuantityValue)" />
        public static VolumeFlow LitersPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromLitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromLitersPerHour(QuantityValue)" />
        public static VolumeFlow LitersPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromLitersPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromLitersPerMinute(QuantityValue)" />
        public static VolumeFlow LitersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromLitersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromLitersPerSecond(QuantityValue)" />
        public static VolumeFlow LitersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromLitersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromMegalitersPerDay(QuantityValue)" />
        public static VolumeFlow MegalitersPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromMegalitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromMegalitersPerHour(QuantityValue)" />
        public static VolumeFlow MegalitersPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromMegalitersPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromMegalitersPerMinute(QuantityValue)" />
        public static VolumeFlow MegalitersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromMegalitersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromMegalitersPerSecond(QuantityValue)" />
        public static VolumeFlow MegalitersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromMegalitersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromMegaukGallonsPerDay(QuantityValue)" />
        public static VolumeFlow MegaukGallonsPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromMegaukGallonsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromMegaukGallonsPerSecond(QuantityValue)" />
        public static VolumeFlow MegaukGallonsPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromMegaukGallonsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromMegausGallonsPerDay(QuantityValue)" />
        public static VolumeFlow MegausGallonsPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromMegausGallonsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerDay(QuantityValue)" />
        public static VolumeFlow MicrolitersPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromMicrolitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerHour(QuantityValue)" />
        public static VolumeFlow MicrolitersPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromMicrolitersPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerMinute(QuantityValue)" />
        public static VolumeFlow MicrolitersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromMicrolitersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerSecond(QuantityValue)" />
        public static VolumeFlow MicrolitersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromMicrolitersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromMillilitersPerDay(QuantityValue)" />
        public static VolumeFlow MillilitersPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromMillilitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromMillilitersPerHour(QuantityValue)" />
        public static VolumeFlow MillilitersPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromMillilitersPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromMillilitersPerMinute(QuantityValue)" />
        public static VolumeFlow MillilitersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromMillilitersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromMillilitersPerSecond(QuantityValue)" />
        public static VolumeFlow MillilitersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromMillilitersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromMillionUsGallonsPerDay(QuantityValue)" />
        public static VolumeFlow MillionUsGallonsPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromMillionUsGallonsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromNanolitersPerDay(QuantityValue)" />
        public static VolumeFlow NanolitersPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromNanolitersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromNanolitersPerHour(QuantityValue)" />
        public static VolumeFlow NanolitersPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromNanolitersPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromNanolitersPerMinute(QuantityValue)" />
        public static VolumeFlow NanolitersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromNanolitersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromNanolitersPerSecond(QuantityValue)" />
        public static VolumeFlow NanolitersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromNanolitersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerDay(QuantityValue)" />
        public static VolumeFlow OilBarrelsPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromOilBarrelsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerHour(QuantityValue)" />
        public static VolumeFlow OilBarrelsPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromOilBarrelsPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerMinute(QuantityValue)" />
        public static VolumeFlow OilBarrelsPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromOilBarrelsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerSecond(QuantityValue)" />
        public static VolumeFlow OilBarrelsPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromOilBarrelsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerDay(QuantityValue)" />
        public static VolumeFlow UkGallonsPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromUkGallonsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerHour(QuantityValue)" />
        public static VolumeFlow UkGallonsPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromUkGallonsPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerMinute(QuantityValue)" />
        public static VolumeFlow UkGallonsPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromUkGallonsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerSecond(QuantityValue)" />
        public static VolumeFlow UkGallonsPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromUkGallonsPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerDay(QuantityValue)" />
        public static VolumeFlow UsGallonsPerDay<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromUsGallonsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerHour(QuantityValue)" />
        public static VolumeFlow UsGallonsPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromUsGallonsPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerMinute(QuantityValue)" />
        public static VolumeFlow UsGallonsPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromUsGallonsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerSecond(QuantityValue)" />
        public static VolumeFlow UsGallonsPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => VolumeFlow.FromUsGallonsPerSecond(Convert.ToDouble(value));

    }
}
