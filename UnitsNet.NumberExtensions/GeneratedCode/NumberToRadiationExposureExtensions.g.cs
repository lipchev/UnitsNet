//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToRadiationExposure
{
    /// <summary>
    /// A number to RadiationExposure Extensions
    /// </summary>
    public static class NumberToRadiationExposureExtensions
    {
        /// <inheritdoc cref="RadiationExposure.FromCoulombsPerKilogram(QuantityValue)" />
        public static RadiationExposure CoulombsPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => RadiationExposure.FromCoulombsPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="RadiationExposure.FromMicrocoulombsPerKilogram(QuantityValue)" />
        public static RadiationExposure MicrocoulombsPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => RadiationExposure.FromMicrocoulombsPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="RadiationExposure.FromMicroroentgens(QuantityValue)" />
        public static RadiationExposure Microroentgens<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => RadiationExposure.FromMicroroentgens(Convert.ToDouble(value));

        /// <inheritdoc cref="RadiationExposure.FromMillicoulombsPerKilogram(QuantityValue)" />
        public static RadiationExposure MillicoulombsPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => RadiationExposure.FromMillicoulombsPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="RadiationExposure.FromMilliroentgens(QuantityValue)" />
        public static RadiationExposure Milliroentgens<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => RadiationExposure.FromMilliroentgens(Convert.ToDouble(value));

        /// <inheritdoc cref="RadiationExposure.FromNanocoulombsPerKilogram(QuantityValue)" />
        public static RadiationExposure NanocoulombsPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => RadiationExposure.FromNanocoulombsPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="RadiationExposure.FromPicocoulombsPerKilogram(QuantityValue)" />
        public static RadiationExposure PicocoulombsPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => RadiationExposure.FromPicocoulombsPerKilogram(Convert.ToDouble(value));

        /// <inheritdoc cref="RadiationExposure.FromRoentgens(QuantityValue)" />
        public static RadiationExposure Roentgens<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => RadiationExposure.FromRoentgens(Convert.ToDouble(value));

    }
}
