//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToLength
{
    /// <summary>
    /// A number to Length Extensions
    /// </summary>
    public static class NumberToLengthExtensions
    {
        /// <inheritdoc cref="Length.FromAngstroms(QuantityValue)" />
        public static Length Angstroms<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromAngstroms(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromAstronomicalUnits(QuantityValue)" />
        public static Length AstronomicalUnits<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromAstronomicalUnits(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromCentimeters(QuantityValue)" />
        public static Length Centimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromCentimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromChains(QuantityValue)" />
        public static Length Chains<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromChains(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromDataMiles(QuantityValue)" />
        public static Length DataMiles<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromDataMiles(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromDecameters(QuantityValue)" />
        public static Length Decameters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromDecameters(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromDecimeters(QuantityValue)" />
        public static Length Decimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromDecimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromDtpPicas(QuantityValue)" />
        public static Length DtpPicas<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromDtpPicas(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromDtpPoints(QuantityValue)" />
        public static Length DtpPoints<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromDtpPoints(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromFathoms(QuantityValue)" />
        public static Length Fathoms<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromFathoms(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromFemtometers(QuantityValue)" />
        public static Length Femtometers<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromFemtometers(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromFeet(QuantityValue)" />
        public static Length Feet<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromFeet(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromGigameters(QuantityValue)" />
        public static Length Gigameters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromGigameters(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromHands(QuantityValue)" />
        public static Length Hands<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromHands(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromHectometers(QuantityValue)" />
        public static Length Hectometers<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromHectometers(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromInches(QuantityValue)" />
        public static Length Inches<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromInches(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromKilofeet(QuantityValue)" />
        public static Length Kilofeet<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromKilofeet(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromKilolightYears(QuantityValue)" />
        public static Length KilolightYears<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromKilolightYears(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromKilometers(QuantityValue)" />
        public static Length Kilometers<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromKilometers(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromKiloparsecs(QuantityValue)" />
        public static Length Kiloparsecs<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromKiloparsecs(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromKiloyards(QuantityValue)" />
        public static Length Kiloyards<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromKiloyards(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromLightYears(QuantityValue)" />
        public static Length LightYears<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromLightYears(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromMegalightYears(QuantityValue)" />
        public static Length MegalightYears<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromMegalightYears(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromMegameters(QuantityValue)" />
        public static Length Megameters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromMegameters(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromMegaparsecs(QuantityValue)" />
        public static Length Megaparsecs<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromMegaparsecs(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromMeters(QuantityValue)" />
        public static Length Meters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromMeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromMicroinches(QuantityValue)" />
        public static Length Microinches<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromMicroinches(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromMicrometers(QuantityValue)" />
        public static Length Micrometers<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromMicrometers(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromMils(QuantityValue)" />
        public static Length Mils<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromMils(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromMiles(QuantityValue)" />
        public static Length Miles<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromMiles(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromMillimeters(QuantityValue)" />
        public static Length Millimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromMillimeters(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromNanometers(QuantityValue)" />
        public static Length Nanometers<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromNanometers(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromNauticalMiles(QuantityValue)" />
        public static Length NauticalMiles<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromNauticalMiles(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromParsecs(QuantityValue)" />
        public static Length Parsecs<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromParsecs(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromPicometers(QuantityValue)" />
        public static Length Picometers<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromPicometers(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromPrinterPicas(QuantityValue)" />
        public static Length PrinterPicas<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromPrinterPicas(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromPrinterPoints(QuantityValue)" />
        public static Length PrinterPoints<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromPrinterPoints(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromShackles(QuantityValue)" />
        public static Length Shackles<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromShackles(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromSolarRadiuses(QuantityValue)" />
        public static Length SolarRadiuses<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromSolarRadiuses(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromTwips(QuantityValue)" />
        public static Length Twips<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromTwips(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromUsSurveyFeet(QuantityValue)" />
        public static Length UsSurveyFeet<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromUsSurveyFeet(Convert.ToDouble(value));

        /// <inheritdoc cref="Length.FromYards(QuantityValue)" />
        public static Length Yards<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#endif
            => Length.FromYards(Convert.ToDouble(value));

    }
}
