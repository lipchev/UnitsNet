//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using UnitsNet.Units;
using System.Numerics;

#nullable enable

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Many different units of length have been used around the world. The main units in modern use are U.S. customary units in the United States and the Metric system elsewhere. British Imperial units are still used for some purposes in the United Kingdom and some other countries. The metric system is sub-divided into SI and non-SI units.
    /// </summary>
    [DataContract]
    [DebuggerTypeProxy(typeof(QuantityDisplay))]
    public readonly partial struct Length :
        IArithmeticQuantity<Length, LengthUnit>,
#if NET7_0_OR_GREATER
        IMultiplyOperators<Length, Length, Area>,
        IDivisionOperators<Length, ReciprocalLength, Area>,
        IMultiplyOperators<Length, Volume, AreaMomentOfInertia>,
        IDivisionOperators<Length, Speed, Duration>,
        IMultiplyOperators<Length, ForcePerLength, Force>,
        IMultiplyOperators<Length, Pressure, ForcePerLength>,
        IMultiplyOperators<Length, Speed, KinematicViscosity>,
        IMultiplyOperators<Length, LinearDensity, Mass>,
        IMultiplyOperators<Length, SpecificWeight, Pressure>,
        IDivisionOperators<Length, Volume, ReciprocalArea>,
        IMultiplyOperators<Length, ReciprocalArea, ReciprocalLength>,
        IDivisionOperators<Length, Area, ReciprocalLength>,
        IMultiplyOperators<Length, RotationalStiffnessPerLength, RotationalStiffness>,
        IDivisionOperators<Length, Duration, Speed>,
        IMultiplyOperators<Length, TemperatureGradient, TemperatureDelta>,
        IMultiplyOperators<Length, Force, Torque>,
        IMultiplyOperators<Length, Area, Volume>,
        IDivisionOperators<Length, ReciprocalArea, Volume>,
#endif
        IComparable,
        IComparable<Length>,
        IConvertible,
        IEquatable<Length>,
        IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Value", Order = 1, EmitDefaultValue = false)]
        private readonly QuantityValue _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Unit", Order = 2, EmitDefaultValue = false)]
        private readonly LengthUnit? _unit;

        static Length()
        {
            BaseDimensions = new BaseDimensions(1, 0, 0, 0, 0, 0, 0);
            BaseUnit = LengthUnit.Meter;
            Units = Enum.GetValues(typeof(LengthUnit)).Cast<LengthUnit>().ToArray();
            Zero = new Length(0, BaseUnit);
            Info = new QuantityInfo<LengthUnit>("Length",
                new UnitInfo<LengthUnit>[]
                {
                    new UnitInfo<LengthUnit>(LengthUnit.Angstrom, "Angstroms", BaseUnits.Undefined, "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.AstronomicalUnit, "AstronomicalUnits", BaseUnits.Undefined, "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Centimeter, "Centimeters", BaseUnits.Undefined, "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Chain, "Chains", new BaseUnits(length: LengthUnit.Chain), "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.DataMile, "DataMiles", BaseUnits.Undefined, "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Decameter, "Decameters", BaseUnits.Undefined, "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Decimeter, "Decimeters", BaseUnits.Undefined, "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.DtpPica, "DtpPicas", new BaseUnits(length: LengthUnit.DtpPica), "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.DtpPoint, "DtpPoints", new BaseUnits(length: LengthUnit.DtpPoint), "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Fathom, "Fathoms", new BaseUnits(length: LengthUnit.Fathom), "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Femtometer, "Femtometers", BaseUnits.Undefined, "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Foot, "Feet", new BaseUnits(length: LengthUnit.Foot), "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Gigameter, "Gigameters", BaseUnits.Undefined, "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Hand, "Hands", new BaseUnits(length: LengthUnit.Hand), "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Hectometer, "Hectometers", BaseUnits.Undefined, "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Inch, "Inches", new BaseUnits(length: LengthUnit.Inch), "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Kilofoot, "Kilofeet", BaseUnits.Undefined, "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.KilolightYear, "KilolightYears", BaseUnits.Undefined, "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Kilometer, "Kilometers", BaseUnits.Undefined, "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Kiloparsec, "Kiloparsecs", BaseUnits.Undefined, "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Kiloyard, "Kiloyards", BaseUnits.Undefined, "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.LightYear, "LightYears", BaseUnits.Undefined, "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.MegalightYear, "MegalightYears", BaseUnits.Undefined, "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Megameter, "Megameters", BaseUnits.Undefined, "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Megaparsec, "Megaparsecs", BaseUnits.Undefined, "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Meter, "Meters", new BaseUnits(length: LengthUnit.Meter), "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Microinch, "Microinches", new BaseUnits(length: LengthUnit.Microinch), "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Micrometer, "Micrometers", BaseUnits.Undefined, "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Mil, "Mils", new BaseUnits(length: LengthUnit.Mil), "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Mile, "Miles", new BaseUnits(length: LengthUnit.Mile), "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Millimeter, "Millimeters", BaseUnits.Undefined, "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Nanometer, "Nanometers", BaseUnits.Undefined, "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.NauticalMile, "NauticalMiles", new BaseUnits(length: LengthUnit.NauticalMile), "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Parsec, "Parsecs", BaseUnits.Undefined, "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Picometer, "Picometers", BaseUnits.Undefined, "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.PrinterPica, "PrinterPicas", new BaseUnits(length: LengthUnit.PrinterPica), "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.PrinterPoint, "PrinterPoints", new BaseUnits(length: LengthUnit.PrinterPoint), "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Shackle, "Shackles", new BaseUnits(length: LengthUnit.Shackle), "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.SolarRadius, "SolarRadiuses", BaseUnits.Undefined, "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Twip, "Twips", new BaseUnits(length: LengthUnit.Twip), "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.UsSurveyFoot, "UsSurveyFeet", new BaseUnits(length: LengthUnit.UsSurveyFoot), "Length"),
                    new UnitInfo<LengthUnit>(LengthUnit.Yard, "Yards", new BaseUnits(length: LengthUnit.Yard), "Length"),
                },
                BaseUnit, Zero, BaseDimensions);

            DefaultConversionFunctions = new UnitConverter();
            RegisterDefaultConversions(DefaultConversionFunctions);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public Length(QuantityValue value, LengthUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public Length(QuantityValue value, UnitSystem unitSystem)
        {
            if (unitSystem is null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault();

            _value = value;
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <summary>
        ///     The <see cref="UnitConverter" /> containing the default generated conversion functions for <see cref="Length" /> instances.
        /// </summary>
        public static UnitConverter DefaultConversionFunctions { get; }

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<LengthUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Length, which is Meter. All conversions go via this value.
        /// </summary>
        public static LengthUnit BaseUnit { get; }

        /// <summary>
        ///     All units of measurement for the Length quantity.
        /// </summary>
        public static LengthUnit[] Units { get; }

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Meter.
        /// </summary>
        public static Length Zero { get; }

        /// <inheritdoc cref="Zero"/>
        public static Length AdditiveIdentity => Zero;

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public QuantityValue Value => _value;

        /// <inheritdoc />
        QuantityValue IQuantity.Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public LengthUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<LengthUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Length.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Angstrom"/>
        /// </summary>
        public QuantityValue Angstroms => As(LengthUnit.Angstrom);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.AstronomicalUnit"/>
        /// </summary>
        public QuantityValue AstronomicalUnits => As(LengthUnit.AstronomicalUnit);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Centimeter"/>
        /// </summary>
        public QuantityValue Centimeters => As(LengthUnit.Centimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Chain"/>
        /// </summary>
        public QuantityValue Chains => As(LengthUnit.Chain);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.DataMile"/>
        /// </summary>
        public QuantityValue DataMiles => As(LengthUnit.DataMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Decameter"/>
        /// </summary>
        public QuantityValue Decameters => As(LengthUnit.Decameter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Decimeter"/>
        /// </summary>
        public QuantityValue Decimeters => As(LengthUnit.Decimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.DtpPica"/>
        /// </summary>
        public QuantityValue DtpPicas => As(LengthUnit.DtpPica);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.DtpPoint"/>
        /// </summary>
        public QuantityValue DtpPoints => As(LengthUnit.DtpPoint);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Fathom"/>
        /// </summary>
        public QuantityValue Fathoms => As(LengthUnit.Fathom);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Femtometer"/>
        /// </summary>
        public QuantityValue Femtometers => As(LengthUnit.Femtometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Foot"/>
        /// </summary>
        public QuantityValue Feet => As(LengthUnit.Foot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Gigameter"/>
        /// </summary>
        public QuantityValue Gigameters => As(LengthUnit.Gigameter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Hand"/>
        /// </summary>
        public QuantityValue Hands => As(LengthUnit.Hand);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Hectometer"/>
        /// </summary>
        public QuantityValue Hectometers => As(LengthUnit.Hectometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Inch"/>
        /// </summary>
        public QuantityValue Inches => As(LengthUnit.Inch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Kilofoot"/>
        /// </summary>
        public QuantityValue Kilofeet => As(LengthUnit.Kilofoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.KilolightYear"/>
        /// </summary>
        public QuantityValue KilolightYears => As(LengthUnit.KilolightYear);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Kilometer"/>
        /// </summary>
        public QuantityValue Kilometers => As(LengthUnit.Kilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Kiloparsec"/>
        /// </summary>
        public QuantityValue Kiloparsecs => As(LengthUnit.Kiloparsec);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Kiloyard"/>
        /// </summary>
        public QuantityValue Kiloyards => As(LengthUnit.Kiloyard);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.LightYear"/>
        /// </summary>
        public QuantityValue LightYears => As(LengthUnit.LightYear);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.MegalightYear"/>
        /// </summary>
        public QuantityValue MegalightYears => As(LengthUnit.MegalightYear);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Megameter"/>
        /// </summary>
        public QuantityValue Megameters => As(LengthUnit.Megameter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Megaparsec"/>
        /// </summary>
        public QuantityValue Megaparsecs => As(LengthUnit.Megaparsec);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Meter"/>
        /// </summary>
        public QuantityValue Meters => As(LengthUnit.Meter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Microinch"/>
        /// </summary>
        public QuantityValue Microinches => As(LengthUnit.Microinch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Micrometer"/>
        /// </summary>
        public QuantityValue Micrometers => As(LengthUnit.Micrometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Mil"/>
        /// </summary>
        public QuantityValue Mils => As(LengthUnit.Mil);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Mile"/>
        /// </summary>
        public QuantityValue Miles => As(LengthUnit.Mile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Millimeter"/>
        /// </summary>
        public QuantityValue Millimeters => As(LengthUnit.Millimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Nanometer"/>
        /// </summary>
        public QuantityValue Nanometers => As(LengthUnit.Nanometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.NauticalMile"/>
        /// </summary>
        public QuantityValue NauticalMiles => As(LengthUnit.NauticalMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Parsec"/>
        /// </summary>
        public QuantityValue Parsecs => As(LengthUnit.Parsec);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Picometer"/>
        /// </summary>
        public QuantityValue Picometers => As(LengthUnit.Picometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.PrinterPica"/>
        /// </summary>
        public QuantityValue PrinterPicas => As(LengthUnit.PrinterPica);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.PrinterPoint"/>
        /// </summary>
        public QuantityValue PrinterPoints => As(LengthUnit.PrinterPoint);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Shackle"/>
        /// </summary>
        public QuantityValue Shackles => As(LengthUnit.Shackle);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.SolarRadius"/>
        /// </summary>
        public QuantityValue SolarRadiuses => As(LengthUnit.SolarRadius);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Twip"/>
        /// </summary>
        public QuantityValue Twips => As(LengthUnit.Twip);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.UsSurveyFoot"/>
        /// </summary>
        public QuantityValue UsSurveyFeet => As(LengthUnit.UsSurveyFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LengthUnit.Yard"/>
        /// </summary>
        public QuantityValue Yards => As(LengthUnit.Yard);

        #endregion

        #region Static Methods

        /// <summary>
        /// Registers the default conversion functions in the given <see cref="UnitConverter"/> instance.
        /// </summary>
        /// <param name="unitConverter">The <see cref="UnitConverter"/> to register the default conversion functions in.</param>
        internal static void RegisterDefaultConversions(UnitConverter unitConverter)
        {
            // Register in unit converter: LengthUnit -> BaseUnit
            unitConverter.SetConversionFunction<Length>(LengthUnit.Angstrom, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.AstronomicalUnit, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Centimeter, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Chain, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.DataMile, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Decameter, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Decimeter, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.DtpPica, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.DtpPoint, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Fathom, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Femtometer, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Foot, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Gigameter, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Hand, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Hectometer, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Inch, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Kilofoot, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.KilolightYear, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Kilometer, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Kiloparsec, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Kiloyard, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.LightYear, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.MegalightYear, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Megameter, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Megaparsec, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Microinch, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Micrometer, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Mil, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Mile, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Millimeter, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Nanometer, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.NauticalMile, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Parsec, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Picometer, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.PrinterPica, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.PrinterPoint, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Shackle, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.SolarRadius, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Twip, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.UsSurveyFoot, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Yard, LengthUnit.Meter, quantity => quantity.ToUnit(LengthUnit.Meter));

            // Register in unit converter: BaseUnit <-> BaseUnit
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Meter, quantity => quantity);

            // Register in unit converter: BaseUnit -> LengthUnit
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Angstrom, quantity => quantity.ToUnit(LengthUnit.Angstrom));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.AstronomicalUnit, quantity => quantity.ToUnit(LengthUnit.AstronomicalUnit));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Centimeter, quantity => quantity.ToUnit(LengthUnit.Centimeter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Chain, quantity => quantity.ToUnit(LengthUnit.Chain));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.DataMile, quantity => quantity.ToUnit(LengthUnit.DataMile));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Decameter, quantity => quantity.ToUnit(LengthUnit.Decameter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Decimeter, quantity => quantity.ToUnit(LengthUnit.Decimeter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.DtpPica, quantity => quantity.ToUnit(LengthUnit.DtpPica));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.DtpPoint, quantity => quantity.ToUnit(LengthUnit.DtpPoint));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Fathom, quantity => quantity.ToUnit(LengthUnit.Fathom));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Femtometer, quantity => quantity.ToUnit(LengthUnit.Femtometer));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Foot, quantity => quantity.ToUnit(LengthUnit.Foot));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Gigameter, quantity => quantity.ToUnit(LengthUnit.Gigameter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Hand, quantity => quantity.ToUnit(LengthUnit.Hand));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Hectometer, quantity => quantity.ToUnit(LengthUnit.Hectometer));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Inch, quantity => quantity.ToUnit(LengthUnit.Inch));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Kilofoot, quantity => quantity.ToUnit(LengthUnit.Kilofoot));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.KilolightYear, quantity => quantity.ToUnit(LengthUnit.KilolightYear));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Kilometer, quantity => quantity.ToUnit(LengthUnit.Kilometer));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Kiloparsec, quantity => quantity.ToUnit(LengthUnit.Kiloparsec));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Kiloyard, quantity => quantity.ToUnit(LengthUnit.Kiloyard));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.LightYear, quantity => quantity.ToUnit(LengthUnit.LightYear));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.MegalightYear, quantity => quantity.ToUnit(LengthUnit.MegalightYear));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Megameter, quantity => quantity.ToUnit(LengthUnit.Megameter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Megaparsec, quantity => quantity.ToUnit(LengthUnit.Megaparsec));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Microinch, quantity => quantity.ToUnit(LengthUnit.Microinch));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Micrometer, quantity => quantity.ToUnit(LengthUnit.Micrometer));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Mil, quantity => quantity.ToUnit(LengthUnit.Mil));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Mile, quantity => quantity.ToUnit(LengthUnit.Mile));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Millimeter, quantity => quantity.ToUnit(LengthUnit.Millimeter));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Nanometer, quantity => quantity.ToUnit(LengthUnit.Nanometer));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.NauticalMile, quantity => quantity.ToUnit(LengthUnit.NauticalMile));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Parsec, quantity => quantity.ToUnit(LengthUnit.Parsec));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Picometer, quantity => quantity.ToUnit(LengthUnit.Picometer));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.PrinterPica, quantity => quantity.ToUnit(LengthUnit.PrinterPica));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.PrinterPoint, quantity => quantity.ToUnit(LengthUnit.PrinterPoint));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Shackle, quantity => quantity.ToUnit(LengthUnit.Shackle));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.SolarRadius, quantity => quantity.ToUnit(LengthUnit.SolarRadius));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Twip, quantity => quantity.ToUnit(LengthUnit.Twip));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.UsSurveyFoot, quantity => quantity.ToUnit(LengthUnit.UsSurveyFoot));
            unitConverter.SetConversionFunction<Length>(LengthUnit.Meter, LengthUnit.Yard, quantity => quantity.ToUnit(LengthUnit.Yard));
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(LengthUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static string GetAbbreviation(LengthUnit unit, IFormatProvider? provider)
        {
            return UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Angstrom"/>.
        /// </summary>
        public static Length FromAngstroms(QuantityValue value)
        {
            return new Length(value, LengthUnit.Angstrom);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.AstronomicalUnit"/>.
        /// </summary>
        public static Length FromAstronomicalUnits(QuantityValue value)
        {
            return new Length(value, LengthUnit.AstronomicalUnit);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Centimeter"/>.
        /// </summary>
        public static Length FromCentimeters(QuantityValue value)
        {
            return new Length(value, LengthUnit.Centimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Chain"/>.
        /// </summary>
        public static Length FromChains(QuantityValue value)
        {
            return new Length(value, LengthUnit.Chain);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.DataMile"/>.
        /// </summary>
        public static Length FromDataMiles(QuantityValue value)
        {
            return new Length(value, LengthUnit.DataMile);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Decameter"/>.
        /// </summary>
        public static Length FromDecameters(QuantityValue value)
        {
            return new Length(value, LengthUnit.Decameter);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Decimeter"/>.
        /// </summary>
        public static Length FromDecimeters(QuantityValue value)
        {
            return new Length(value, LengthUnit.Decimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.DtpPica"/>.
        /// </summary>
        public static Length FromDtpPicas(QuantityValue value)
        {
            return new Length(value, LengthUnit.DtpPica);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.DtpPoint"/>.
        /// </summary>
        public static Length FromDtpPoints(QuantityValue value)
        {
            return new Length(value, LengthUnit.DtpPoint);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Fathom"/>.
        /// </summary>
        public static Length FromFathoms(QuantityValue value)
        {
            return new Length(value, LengthUnit.Fathom);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Femtometer"/>.
        /// </summary>
        public static Length FromFemtometers(QuantityValue value)
        {
            return new Length(value, LengthUnit.Femtometer);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Foot"/>.
        /// </summary>
        public static Length FromFeet(QuantityValue value)
        {
            return new Length(value, LengthUnit.Foot);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Gigameter"/>.
        /// </summary>
        public static Length FromGigameters(QuantityValue value)
        {
            return new Length(value, LengthUnit.Gigameter);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Hand"/>.
        /// </summary>
        public static Length FromHands(QuantityValue value)
        {
            return new Length(value, LengthUnit.Hand);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Hectometer"/>.
        /// </summary>
        public static Length FromHectometers(QuantityValue value)
        {
            return new Length(value, LengthUnit.Hectometer);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Inch"/>.
        /// </summary>
        public static Length FromInches(QuantityValue value)
        {
            return new Length(value, LengthUnit.Inch);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Kilofoot"/>.
        /// </summary>
        public static Length FromKilofeet(QuantityValue value)
        {
            return new Length(value, LengthUnit.Kilofoot);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.KilolightYear"/>.
        /// </summary>
        public static Length FromKilolightYears(QuantityValue value)
        {
            return new Length(value, LengthUnit.KilolightYear);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Kilometer"/>.
        /// </summary>
        public static Length FromKilometers(QuantityValue value)
        {
            return new Length(value, LengthUnit.Kilometer);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Kiloparsec"/>.
        /// </summary>
        public static Length FromKiloparsecs(QuantityValue value)
        {
            return new Length(value, LengthUnit.Kiloparsec);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Kiloyard"/>.
        /// </summary>
        public static Length FromKiloyards(QuantityValue value)
        {
            return new Length(value, LengthUnit.Kiloyard);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.LightYear"/>.
        /// </summary>
        public static Length FromLightYears(QuantityValue value)
        {
            return new Length(value, LengthUnit.LightYear);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.MegalightYear"/>.
        /// </summary>
        public static Length FromMegalightYears(QuantityValue value)
        {
            return new Length(value, LengthUnit.MegalightYear);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Megameter"/>.
        /// </summary>
        public static Length FromMegameters(QuantityValue value)
        {
            return new Length(value, LengthUnit.Megameter);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Megaparsec"/>.
        /// </summary>
        public static Length FromMegaparsecs(QuantityValue value)
        {
            return new Length(value, LengthUnit.Megaparsec);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Meter"/>.
        /// </summary>
        public static Length FromMeters(QuantityValue value)
        {
            return new Length(value, LengthUnit.Meter);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Microinch"/>.
        /// </summary>
        public static Length FromMicroinches(QuantityValue value)
        {
            return new Length(value, LengthUnit.Microinch);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Micrometer"/>.
        /// </summary>
        public static Length FromMicrometers(QuantityValue value)
        {
            return new Length(value, LengthUnit.Micrometer);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Mil"/>.
        /// </summary>
        public static Length FromMils(QuantityValue value)
        {
            return new Length(value, LengthUnit.Mil);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Mile"/>.
        /// </summary>
        public static Length FromMiles(QuantityValue value)
        {
            return new Length(value, LengthUnit.Mile);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Millimeter"/>.
        /// </summary>
        public static Length FromMillimeters(QuantityValue value)
        {
            return new Length(value, LengthUnit.Millimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Nanometer"/>.
        /// </summary>
        public static Length FromNanometers(QuantityValue value)
        {
            return new Length(value, LengthUnit.Nanometer);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.NauticalMile"/>.
        /// </summary>
        public static Length FromNauticalMiles(QuantityValue value)
        {
            return new Length(value, LengthUnit.NauticalMile);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Parsec"/>.
        /// </summary>
        public static Length FromParsecs(QuantityValue value)
        {
            return new Length(value, LengthUnit.Parsec);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Picometer"/>.
        /// </summary>
        public static Length FromPicometers(QuantityValue value)
        {
            return new Length(value, LengthUnit.Picometer);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.PrinterPica"/>.
        /// </summary>
        public static Length FromPrinterPicas(QuantityValue value)
        {
            return new Length(value, LengthUnit.PrinterPica);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.PrinterPoint"/>.
        /// </summary>
        public static Length FromPrinterPoints(QuantityValue value)
        {
            return new Length(value, LengthUnit.PrinterPoint);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Shackle"/>.
        /// </summary>
        public static Length FromShackles(QuantityValue value)
        {
            return new Length(value, LengthUnit.Shackle);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.SolarRadius"/>.
        /// </summary>
        public static Length FromSolarRadiuses(QuantityValue value)
        {
            return new Length(value, LengthUnit.SolarRadius);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Twip"/>.
        /// </summary>
        public static Length FromTwips(QuantityValue value)
        {
            return new Length(value, LengthUnit.Twip);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.UsSurveyFoot"/>.
        /// </summary>
        public static Length FromUsSurveyFeet(QuantityValue value)
        {
            return new Length(value, LengthUnit.UsSurveyFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Yard"/>.
        /// </summary>
        public static Length FromYards(QuantityValue value)
        {
            return new Length(value, LengthUnit.Yard);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="LengthUnit" /> to <see cref="Length" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Length unit value.</returns>
        public static Length From(QuantityValue value, LengthUnit fromUnit)
        {
            return new Length(value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Length Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static Length Parse(string str, IFormatProvider? provider)
        {
            return UnitsNetSetup.Default.QuantityParser.Parse<Length, LengthUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        public static bool TryParse(string? str, out Length result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParse(string? str, IFormatProvider? provider, out Length result)
        {
            return UnitsNetSetup.Default.QuantityParser.TryParse<Length, LengthUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static LengthUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static LengthUnit ParseUnit(string str, IFormatProvider? provider)
        {
            return UnitsNetSetup.Default.UnitParser.Parse<LengthUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.LengthUnit)"/>
        public static bool TryParseUnit(string str, out LengthUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider? provider, out LengthUnit unit)
        {
            return UnitsNetSetup.Default.UnitParser.TryParse<LengthUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static Length operator -(Length right)
        {
            return new Length(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Length"/> from adding two <see cref="Length"/>.</summary>
        public static Length operator +(Length left, Length right)
        {
            return new Length(left.Value + right.ToUnit(left.Unit).Value, left.Unit);
        }

        /// <summary>Get <see cref="Length"/> from subtracting two <see cref="Length"/>.</summary>
        public static Length operator -(Length left, Length right)
        {
            return new Length(left.Value - right.ToUnit(left.Unit).Value, left.Unit);
        }

        /// <summary>Get <see cref="Length"/> from multiplying value and <see cref="Length"/>.</summary>
        public static Length operator *(QuantityValue left, Length right)
        {
            return new Length(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Length"/> from multiplying value and <see cref="Length"/>.</summary>
        public static Length operator *(Length left, QuantityValue right)
        {
            return new Length(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="Length"/> from dividing <see cref="Length"/> by value.</summary>
        public static Length operator /(Length left, QuantityValue right)
        {
            return new Length(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="Length"/> by <see cref="Length"/>.</summary>
        public static QuantityValue operator /(Length left, Length right)
        {
            return left.Meters / right.Meters;
        }

        #endregion

        #region Relational Operators

        /// <summary>Calculates the inverse of this quantity.</summary>
        /// <returns>The corresponding inverse quantity, <see cref="ReciprocalLength"/>.</returns>
        public ReciprocalLength Inverse()
        {
            return ReciprocalLength.FromInverseMeters(QuantityValue.Inverse(Meters));
        }

        /// <summary>Get <see cref="Area"/> from <see cref="Length"/> * <see cref="Length"/>.</summary>
        public static Area operator *(Length left, Length right)
        {
            return Area.FromSquareMeters(left.Meters * right.Meters);
        }

        /// <summary>Get <see cref="Area"/> from <see cref="Length"/> / <see cref="ReciprocalLength"/>.</summary>
        public static Area operator /(Length length, ReciprocalLength reciprocalLength)
        {
            return Area.FromSquareMeters(length.Meters / reciprocalLength.InverseMeters);
        }

        /// <summary>Get <see cref="AreaMomentOfInertia"/> from <see cref="Length"/> * <see cref="Volume"/>.</summary>
        public static AreaMomentOfInertia operator *(Length length, Volume volume)
        {
            return AreaMomentOfInertia.FromMetersToTheFourth(length.Meters * volume.CubicMeters);
        }

        /// <summary>Get <see cref="Duration"/> from <see cref="Length"/> / <see cref="Speed"/>.</summary>
        public static Duration operator /(Length length, Speed speed)
        {
            return Duration.FromSeconds(length.Meters / speed.MetersPerSecond);
        }

        /// <summary>Get <see cref="Force"/> from <see cref="Length"/> * <see cref="ForcePerLength"/>.</summary>
        public static Force operator *(Length length, ForcePerLength forcePerLength)
        {
            return Force.FromNewtons(length.Meters * forcePerLength.NewtonsPerMeter);
        }

        /// <summary>Get <see cref="ForcePerLength"/> from <see cref="Length"/> * <see cref="Pressure"/>.</summary>
        public static ForcePerLength operator *(Length length, Pressure pressure)
        {
            return ForcePerLength.FromNewtonsPerMeter(length.Meters * pressure.NewtonsPerSquareMeter);
        }

        /// <summary>Get <see cref="KinematicViscosity"/> from <see cref="Length"/> * <see cref="Speed"/>.</summary>
        public static KinematicViscosity operator *(Length length, Speed speed)
        {
            return KinematicViscosity.FromSquareMetersPerSecond(length.Meters * speed.MetersPerSecond);
        }

        /// <summary>Get <see cref="Mass"/> from <see cref="Length"/> * <see cref="LinearDensity"/>.</summary>
        public static Mass operator *(Length length, LinearDensity linearDensity)
        {
            return Mass.FromKilograms(length.Meters * linearDensity.KilogramsPerMeter);
        }

        /// <summary>Get <see cref="Pressure"/> from <see cref="Length"/> * <see cref="SpecificWeight"/>.</summary>
        public static Pressure operator *(Length length, SpecificWeight specificWeight)
        {
            return Pressure.FromPascals(length.Meters * specificWeight.NewtonsPerCubicMeter);
        }

        /// <summary>Get <see cref="ReciprocalArea"/> from <see cref="Length"/> / <see cref="Volume"/>.</summary>
        public static ReciprocalArea operator /(Length length, Volume volume)
        {
            return ReciprocalArea.FromInverseSquareMeters(length.Meters / volume.CubicMeters);
        }

        /// <summary>Get <see cref="ReciprocalLength"/> from <see cref="Length"/> * <see cref="ReciprocalArea"/>.</summary>
        public static ReciprocalLength operator *(Length length, ReciprocalArea reciprocalArea)
        {
            return ReciprocalLength.FromInverseMeters(length.Meters * reciprocalArea.InverseSquareMeters);
        }

        /// <summary>Get <see cref="ReciprocalLength"/> from <see cref="Length"/> / <see cref="Area"/>.</summary>
        public static ReciprocalLength operator /(Length length, Area area)
        {
            return ReciprocalLength.FromInverseMeters(length.Meters / area.SquareMeters);
        }

        /// <summary>Get <see cref="RotationalStiffness"/> from <see cref="Length"/> * <see cref="RotationalStiffnessPerLength"/>.</summary>
        public static RotationalStiffness operator *(Length length, RotationalStiffnessPerLength rotationalStiffnessPerLength)
        {
            return RotationalStiffness.FromNewtonMetersPerRadian(length.Meters * rotationalStiffnessPerLength.NewtonMetersPerRadianPerMeter);
        }

        /// <summary>Get <see cref="Speed"/> from <see cref="Length"/> / <see cref="Duration"/>.</summary>
        public static Speed operator /(Length length, Duration duration)
        {
            return Speed.FromMetersPerSecond(length.Meters / duration.Seconds);
        }

        /// <summary>Get <see cref="TemperatureDelta"/> from <see cref="Length"/> * <see cref="TemperatureGradient"/>.</summary>
        public static TemperatureDelta operator *(Length length, TemperatureGradient temperatureGradient)
        {
            return TemperatureDelta.FromDegreesCelsius(length.Kilometers * temperatureGradient.DegreesCelsiusPerKilometer);
        }

        /// <summary>Get <see cref="Torque"/> from <see cref="Length"/> * <see cref="Force"/>.</summary>
        public static Torque operator *(Length length, Force force)
        {
            return Torque.FromNewtonMeters(length.Meters * force.Newtons);
        }

        /// <summary>Get <see cref="Volume"/> from <see cref="Length"/> * <see cref="Area"/>.</summary>
        public static Volume operator *(Length length, Area area)
        {
            return Volume.FromCubicMeters(length.Meters * area.SquareMeters);
        }

        /// <summary>Get <see cref="Volume"/> from <see cref="Length"/> / <see cref="ReciprocalArea"/>.</summary>
        public static Volume operator /(Length length, ReciprocalArea reciprocalArea)
        {
            return Volume.FromCubicMeters(length.Meters / reciprocalArea.InverseSquareMeters);
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(Length left, Length right)
        {
            return left.Value <= right.ToUnit(left.Unit).Value;
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(Length left, Length right)
        {
            return left.Value >= right.ToUnit(left.Unit).Value;
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(Length left, Length right)
        {
            return left.Value < right.ToUnit(left.Unit).Value;
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(Length left, Length right)
        {
            return left.Value > right.ToUnit(left.Unit).Value;
        }

        /// <summary>Indicates strict equality of two <see cref="Length"/> quantities.</summary>
        public static bool operator ==(Length left, Length right)
        {
            return left.Equals(right);
        }

        /// <summary>Indicates strict inequality of two <see cref="Length"/> quantities.</summary>
        public static bool operator !=(Length left, Length right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="Length"/> quantities.</summary>
        public override bool Equals(object? obj)
        {
            if (obj is null || !(obj is Length otherQuantity))
                return false;

            return Equals(otherQuantity);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="Length"/> quantities.</summary>
        public bool Equals(Length other)
        {
            return _value.Equals(other.As(this.Unit));
        }

        /// <summary>Compares the current <see cref="Length"/> with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other when converted to the same unit.</summary>
        /// <param name="obj">An object to compare with this instance.</param>
        /// <exception cref="T:System.ArgumentException">
        ///    <paramref name="obj" /> is not the same type as this instance.
        /// </exception>
        /// <returns>A value that indicates the relative order of the quantities being compared. The return value has these meanings:
        ///     <list type="table">
        ///         <listheader><term> Value</term><description> Meaning</description></listheader>
        ///         <item><term> Less than zero</term><description> This instance precedes <paramref name="obj" /> in the sort order.</description></item>
        ///         <item><term> Zero</term><description> This instance occurs in the same position in the sort order as <paramref name="obj" />.</description></item>
        ///         <item><term> Greater than zero</term><description> This instance follows <paramref name="obj" /> in the sort order.</description></item>
        ///     </list>
        /// </returns>
        public int CompareTo(object? obj)
        {
            if (obj is null) throw new ArgumentNullException(nameof(obj));
            if (!(obj is Length otherQuantity)) throw new ArgumentException("Expected type Length.", nameof(obj));

            return CompareTo(otherQuantity);
        }

        /// <summary>Compares the current <see cref="Length"/> with another <see cref="Length"/> and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other when converted to the same unit.</summary>
        /// <param name="other">A quantity to compare with this instance.</param>
        /// <returns>A value that indicates the relative order of the quantities being compared. The return value has these meanings:
        ///     <list type="table">
        ///         <listheader><term> Value</term><description> Meaning</description></listheader>
        ///         <item><term> Less than zero</term><description> This instance precedes <paramref name="other" /> in the sort order.</description></item>
        ///         <item><term> Zero</term><description> This instance occurs in the same position in the sort order as <paramref name="other" />.</description></item>
        ///         <item><term> Greater than zero</term><description> This instance follows <paramref name="other" /> in the sort order.</description></item>
        ///     </list>
        /// </returns>
        public int CompareTo(Length other)
        {
            return _value.CompareTo(other.ToUnit(this.Unit).Value);
        }

        /// <inheritdoc />
        public bool Equals(IQuantity? other, IQuantity tolerance)
        {
            return other is Length otherTyped
                   && (tolerance is Length toleranceTyped
                       ? true
                       : throw new ArgumentException($"Tolerance quantity ({tolerance.QuantityInfo.Name}) did not match the other quantities of type 'Length'.", nameof(tolerance)))
                   && Equals(otherTyped, toleranceTyped);
        }

        /// <inheritdoc />
        public bool Equals(Length other, Length tolerance)
        {
            return UnitsNet.Comparison.EqualsAbsolute(
                this.Value,
                other.As(this.Unit),
                tolerance: tolerance.As(this.Unit));
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Length.</returns>
        public override int GetHashCode()
        {
            var valueInBaseUnit = As(BaseUnit);
            #if NET7_0_OR_GREATER
            return HashCode.Combine(Info.Name, valueInBaseUnit);
            #else
            return new { Info.Name, valueInBaseUnit }.GetHashCode();
            #endif
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public QuantityValue As(LengthUnit unit)
        {
            if (Unit == unit)
                return Value;

            return ToUnit(unit).Value;
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public QuantityValue As(UnitSystem unitSystem)
        {
            if (unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if (firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        QuantityValue IQuantity.As(Enum unit)
        {
            if (!(unit is LengthUnit typedUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(LengthUnit)} is supported.", nameof(unit));

            return As(typedUnit);
        }

        /// <summary>
        ///     Converts this Length to another Length with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <param name="unit">The unit to convert to.</param>
        /// <returns>A Length with the specified unit.</returns>
        public Length ToUnit(LengthUnit unit)
        {
            return ToUnit(unit, DefaultConversionFunctions);
        }

        /// <summary>
        ///     Converts this <see cref="Length"/> to another <see cref="Length"/> using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <param name="unit">The unit to convert to.</param>
        /// <param name="unitConverter">The <see cref="UnitConverter"/> to use for the conversion.</param>
        /// <returns>A Length with the specified unit.</returns>
        public Length ToUnit(LengthUnit unit, UnitConverter unitConverter)
        {
            if (TryToUnit(unit, out var converted))
            {
                // Try to convert using the auto-generated conversion methods.
                return converted!.Value;
            }
            else if (unitConverter.TryGetConversionFunction((typeof(Length), Unit, typeof(Length), unit), out var conversionFunction))
            {
                // See if the unit converter has an extensibility conversion registered.
                return (Length)conversionFunction(this);
            }
            else if (Unit != BaseUnit)
            {
                // Conversion to requested unit NOT found. Try to convert to BaseUnit, and then from BaseUnit to requested unit.
                var inBaseUnits = ToUnit(BaseUnit);
                return inBaseUnits.ToUnit(unit);
            }
            else
            {
                // No possible conversion
                throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        /// <summary>
        ///     Attempts to convert this <see cref="Length"/> to another <see cref="Length"/> with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <param name="unit">The unit to convert to.</param>
        /// <param name="converted">The converted <see cref="Length"/> in <paramref name="unit"/>, if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        private bool TryToUnit(LengthUnit unit, [NotNullWhen(true)] out Length? converted)
        {
            if (Unit == unit)
            {
                converted = this;
                return true;
            }

            Length? convertedOrNull = (Unit, unit) switch
            {
                // LengthUnit -> BaseUnit
                (LengthUnit.Angstrom, LengthUnit.Meter) => new Length(_value / 10000000000, LengthUnit.Meter),
                (LengthUnit.AstronomicalUnit, LengthUnit.Meter) => new Length(_value * 149597870700, LengthUnit.Meter),
                (LengthUnit.Centimeter, LengthUnit.Meter) => new Length(_value / 100, LengthUnit.Meter),
                (LengthUnit.Chain, LengthUnit.Meter) => new Length(_value * new QuantityValue(12573, 625), LengthUnit.Meter),
                (LengthUnit.DataMile, LengthUnit.Meter) => new Length(_value * new QuantityValue(9144, 5), LengthUnit.Meter),
                (LengthUnit.Decameter, LengthUnit.Meter) => new Length(_value * 10, LengthUnit.Meter),
                (LengthUnit.Decimeter, LengthUnit.Meter) => new Length(_value / 10, LengthUnit.Meter),
                (LengthUnit.DtpPica, LengthUnit.Meter) => new Length(_value * new QuantityValue(127, 30000), LengthUnit.Meter),
                (LengthUnit.DtpPoint, LengthUnit.Meter) => new Length(_value * new QuantityValue(127, 360000), LengthUnit.Meter),
                (LengthUnit.Fathom, LengthUnit.Meter) => new Length(_value * new QuantityValue(1143, 625), LengthUnit.Meter),
                (LengthUnit.Femtometer, LengthUnit.Meter) => new Length(_value / 1000000000000000, LengthUnit.Meter),
                (LengthUnit.Foot, LengthUnit.Meter) => new Length(_value * new QuantityValue(381, 1250), LengthUnit.Meter),
                (LengthUnit.Gigameter, LengthUnit.Meter) => new Length(_value * 1000000000, LengthUnit.Meter),
                (LengthUnit.Hand, LengthUnit.Meter) => new Length(_value * new QuantityValue(127, 1250), LengthUnit.Meter),
                (LengthUnit.Hectometer, LengthUnit.Meter) => new Length(_value * 100, LengthUnit.Meter),
                (LengthUnit.Inch, LengthUnit.Meter) => new Length(_value * new QuantityValue(127, 5000), LengthUnit.Meter),
                (LengthUnit.Kilofoot, LengthUnit.Meter) => new Length(_value * new QuantityValue(1524, 5), LengthUnit.Meter),
                (LengthUnit.KilolightYear, LengthUnit.Meter) => new Length(_value * 946073047258 * BigInteger.Pow(10, 7), LengthUnit.Meter),
                (LengthUnit.Kilometer, LengthUnit.Meter) => new Length(_value * 1000, LengthUnit.Meter),
                (LengthUnit.Kiloparsec, LengthUnit.Meter) => new Length(_value * 308567758128 * BigInteger.Pow(10, 8), LengthUnit.Meter),
                (LengthUnit.Kiloyard, LengthUnit.Meter) => new Length(_value * new QuantityValue(4572, 5), LengthUnit.Meter),
                (LengthUnit.LightYear, LengthUnit.Meter) => new Length(_value * 9460730472580000, LengthUnit.Meter),
                (LengthUnit.MegalightYear, LengthUnit.Meter) => new Length(_value * 946073047258 * BigInteger.Pow(10, 10), LengthUnit.Meter),
                (LengthUnit.Megameter, LengthUnit.Meter) => new Length(_value * 1000000, LengthUnit.Meter),
                (LengthUnit.Megaparsec, LengthUnit.Meter) => new Length(_value * 308567758128 * BigInteger.Pow(10, 11), LengthUnit.Meter),
                (LengthUnit.Microinch, LengthUnit.Meter) => new Length(_value * new QuantityValue(127, 5000000000), LengthUnit.Meter),
                (LengthUnit.Micrometer, LengthUnit.Meter) => new Length(_value / 1000000, LengthUnit.Meter),
                (LengthUnit.Mil, LengthUnit.Meter) => new Length(_value * new QuantityValue(127, 5000000), LengthUnit.Meter),
                (LengthUnit.Mile, LengthUnit.Meter) => new Length(_value * new QuantityValue(201168, 125), LengthUnit.Meter),
                (LengthUnit.Millimeter, LengthUnit.Meter) => new Length(_value / 1000, LengthUnit.Meter),
                (LengthUnit.Nanometer, LengthUnit.Meter) => new Length(_value / 1000000000, LengthUnit.Meter),
                (LengthUnit.NauticalMile, LengthUnit.Meter) => new Length(_value * 1852, LengthUnit.Meter),
                (LengthUnit.Parsec, LengthUnit.Meter) => new Length(_value * 30856775812800000, LengthUnit.Meter),
                (LengthUnit.Picometer, LengthUnit.Meter) => new Length(_value / 1000000000000, LengthUnit.Meter),
                (LengthUnit.PrinterPica, LengthUnit.Meter) => new Length(_value * new QuantityValue(254, 60225), LengthUnit.Meter),
                (LengthUnit.PrinterPoint, LengthUnit.Meter) => new Length(_value * new QuantityValue(127, 361350), LengthUnit.Meter),
                (LengthUnit.Shackle, LengthUnit.Meter) => new Length(_value * new QuantityValue(3429, 125), LengthUnit.Meter),
                (LengthUnit.SolarRadius, LengthUnit.Meter) => new Length(_value * 695510000, LengthUnit.Meter),
                (LengthUnit.Twip, LengthUnit.Meter) => new Length(_value * new QuantityValue(127, 7200000), LengthUnit.Meter),
                (LengthUnit.UsSurveyFoot, LengthUnit.Meter) => new Length(_value * new QuantityValue(1200, 3937), LengthUnit.Meter),
                (LengthUnit.Yard, LengthUnit.Meter) => new Length(_value * new QuantityValue(1143, 1250), LengthUnit.Meter),

                // BaseUnit -> LengthUnit
                (LengthUnit.Meter, LengthUnit.Angstrom) => new Length(_value * 10000000000, LengthUnit.Angstrom),
                (LengthUnit.Meter, LengthUnit.AstronomicalUnit) => new Length(_value / 149597870700, LengthUnit.AstronomicalUnit),
                (LengthUnit.Meter, LengthUnit.Centimeter) => new Length(_value * 100, LengthUnit.Centimeter),
                (LengthUnit.Meter, LengthUnit.Chain) => new Length(_value * new QuantityValue(625, 12573), LengthUnit.Chain),
                (LengthUnit.Meter, LengthUnit.DataMile) => new Length(_value * new QuantityValue(5, 9144), LengthUnit.DataMile),
                (LengthUnit.Meter, LengthUnit.Decameter) => new Length(_value / 10, LengthUnit.Decameter),
                (LengthUnit.Meter, LengthUnit.Decimeter) => new Length(_value * 10, LengthUnit.Decimeter),
                (LengthUnit.Meter, LengthUnit.DtpPica) => new Length(_value * new QuantityValue(30000, 127), LengthUnit.DtpPica),
                (LengthUnit.Meter, LengthUnit.DtpPoint) => new Length(_value * new QuantityValue(360000, 127), LengthUnit.DtpPoint),
                (LengthUnit.Meter, LengthUnit.Fathom) => new Length(_value * new QuantityValue(625, 1143), LengthUnit.Fathom),
                (LengthUnit.Meter, LengthUnit.Femtometer) => new Length(_value * 1000000000000000, LengthUnit.Femtometer),
                (LengthUnit.Meter, LengthUnit.Foot) => new Length(_value * new QuantityValue(1250, 381), LengthUnit.Foot),
                (LengthUnit.Meter, LengthUnit.Gigameter) => new Length(_value / 1000000000, LengthUnit.Gigameter),
                (LengthUnit.Meter, LengthUnit.Hand) => new Length(_value * new QuantityValue(1250, 127), LengthUnit.Hand),
                (LengthUnit.Meter, LengthUnit.Hectometer) => new Length(_value / 100, LengthUnit.Hectometer),
                (LengthUnit.Meter, LengthUnit.Inch) => new Length(_value * new QuantityValue(5000, 127), LengthUnit.Inch),
                (LengthUnit.Meter, LengthUnit.Kilofoot) => new Length(_value * new QuantityValue(5, 1524), LengthUnit.Kilofoot),
                (LengthUnit.Meter, LengthUnit.KilolightYear) => new Length(_value / 946073047258 / BigInteger.Pow(10, 7), LengthUnit.KilolightYear),
                (LengthUnit.Meter, LengthUnit.Kilometer) => new Length(_value / 1000, LengthUnit.Kilometer),
                (LengthUnit.Meter, LengthUnit.Kiloparsec) => new Length(_value / 308567758128 / BigInteger.Pow(10, 8), LengthUnit.Kiloparsec),
                (LengthUnit.Meter, LengthUnit.Kiloyard) => new Length(_value * new QuantityValue(5, 4572), LengthUnit.Kiloyard),
                (LengthUnit.Meter, LengthUnit.LightYear) => new Length(_value / 9460730472580000, LengthUnit.LightYear),
                (LengthUnit.Meter, LengthUnit.MegalightYear) => new Length(_value / 946073047258 / BigInteger.Pow(10, 10), LengthUnit.MegalightYear),
                (LengthUnit.Meter, LengthUnit.Megameter) => new Length(_value / 1000000, LengthUnit.Megameter),
                (LengthUnit.Meter, LengthUnit.Megaparsec) => new Length(_value / 308567758128 / BigInteger.Pow(10, 11), LengthUnit.Megaparsec),
                (LengthUnit.Meter, LengthUnit.Microinch) => new Length(_value * new QuantityValue(5000000000, 127), LengthUnit.Microinch),
                (LengthUnit.Meter, LengthUnit.Micrometer) => new Length(_value * 1000000, LengthUnit.Micrometer),
                (LengthUnit.Meter, LengthUnit.Mil) => new Length(_value * new QuantityValue(5000000, 127), LengthUnit.Mil),
                (LengthUnit.Meter, LengthUnit.Mile) => new Length(_value * new QuantityValue(125, 201168), LengthUnit.Mile),
                (LengthUnit.Meter, LengthUnit.Millimeter) => new Length(_value * 1000, LengthUnit.Millimeter),
                (LengthUnit.Meter, LengthUnit.Nanometer) => new Length(_value * 1000000000, LengthUnit.Nanometer),
                (LengthUnit.Meter, LengthUnit.NauticalMile) => new Length(_value / 1852, LengthUnit.NauticalMile),
                (LengthUnit.Meter, LengthUnit.Parsec) => new Length(_value / 30856775812800000, LengthUnit.Parsec),
                (LengthUnit.Meter, LengthUnit.Picometer) => new Length(_value * 1000000000000, LengthUnit.Picometer),
                (LengthUnit.Meter, LengthUnit.PrinterPica) => new Length(_value * new QuantityValue(60225, 254), LengthUnit.PrinterPica),
                (LengthUnit.Meter, LengthUnit.PrinterPoint) => new Length(_value * new QuantityValue(361350, 127), LengthUnit.PrinterPoint),
                (LengthUnit.Meter, LengthUnit.Shackle) => new Length(_value * new QuantityValue(125, 3429), LengthUnit.Shackle),
                (LengthUnit.Meter, LengthUnit.SolarRadius) => new Length(_value / 695510000, LengthUnit.SolarRadius),
                (LengthUnit.Meter, LengthUnit.Twip) => new Length(_value * new QuantityValue(7200000, 127), LengthUnit.Twip),
                (LengthUnit.Meter, LengthUnit.UsSurveyFoot) => new Length(_value * new QuantityValue(3937, 1200), LengthUnit.UsSurveyFoot),
                (LengthUnit.Meter, LengthUnit.Yard) => new Length(_value * new QuantityValue(1250, 1143), LengthUnit.Yard),

                _ => null
            };

            if (convertedOrNull is null)
            {
                converted = default;
                return false;
            }

            converted = convertedOrNull.Value;
            return true;
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if (!(unit is LengthUnit typedUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(LengthUnit)} is supported.", nameof(unit));

            return ToUnit(typedUnit, DefaultConversionFunctions);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public Length ToUnit(UnitSystem unitSystem)
        {
            if (unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if (firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<LengthUnit> IQuantity<LengthUnit>.ToUnit(LengthUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<LengthUnit> IQuantity<LengthUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public string ToString(IFormatProvider? provider)
        {
            return ToString("g", provider);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentCulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string? format)
        {
            return ToString(format, CultureInfo.CurrentCulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentCulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string? format, IFormatProvider? provider)
        {
            return QuantityFormatter.Format<LengthUnit>(this, format, provider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider? provider)
        {
            throw new InvalidCastException($"Converting {typeof(Length)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider? provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider? provider)
        {
            throw new InvalidCastException($"Converting {typeof(Length)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider? provider)
        {
            throw new InvalidCastException($"Converting {typeof(Length)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider? provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider? provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider? provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider? provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider? provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider? provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider? provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider? provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider? provider)
        {
            if (conversionType == typeof(Length))
                return this;
            else if (conversionType == typeof(LengthUnit))
                return Unit;
            else if (conversionType == typeof(QuantityInfo))
                return Length.Info;
            else if (conversionType == typeof(BaseDimensions))
                return Length.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(Length)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider? provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider? provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider? provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
