//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using UnitsNet.Units;
using System.Numerics;

#nullable enable

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Volume is the quantity of three-dimensional space enclosed by some closed boundary, for example, the space that a substance (solid, liquid, gas, or plasma) or shape occupies or contains.[1] Volume is often quantified numerically using the SI derived unit, the cubic metre. The volume of a container is generally understood to be the capacity of the container, i. e. the amount of fluid (gas or liquid) that the container could hold, rather than the amount of space the container itself displaces.
    /// </summary>
    [DataContract]
    [DebuggerTypeProxy(typeof(QuantityDisplay))]
    public readonly partial struct Volume :
        IArithmeticQuantity<Volume, VolumeUnit>,
#if NET7_0_OR_GREATER
        IMultiplyOperators<Volume, Molarity, AmountOfSubstance>,
        IMultiplyOperators<Volume, ReciprocalLength, Area>,
        IDivisionOperators<Volume, Length, Area>,
        IMultiplyOperators<Volume, Length, AreaMomentOfInertia>,
        IDivisionOperators<Volume, VolumeFlow, Duration>,
        IMultiplyOperators<Volume, EnergyDensity, Energy>,
        IMultiplyOperators<Volume, ReciprocalArea, Length>,
        IDivisionOperators<Volume, Area, Length>,
        IMultiplyOperators<Volume, Density, Mass>,
        IMultiplyOperators<Volume, MassConcentration, Mass>,
        IDivisionOperators<Volume, SpecificVolume, Mass>,
        IDivisionOperators<Volume, Mass, SpecificVolume>,
        IDivisionOperators<Volume, Duration, VolumeFlow>,
#endif
        IComparable,
        IComparable<Volume>,
        IConvertible,
        IEquatable<Volume>,
        IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Value", Order = 1, EmitDefaultValue = false)]
        private readonly QuantityValue _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Unit", Order = 2, EmitDefaultValue = false)]
        private readonly VolumeUnit? _unit;

        static Volume()
        {
            BaseDimensions = new BaseDimensions(3, 0, 0, 0, 0, 0, 0);
            BaseUnit = VolumeUnit.CubicMeter;
            Units = Enum.GetValues(typeof(VolumeUnit)).Cast<VolumeUnit>().ToArray();
            Zero = new Volume(0, BaseUnit);
            Info = new QuantityInfo<VolumeUnit>("Volume",
                new UnitInfo<VolumeUnit>[]
                {
                    new UnitInfo<VolumeUnit>(VolumeUnit.AcreFoot, "AcreFeet", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.AuTablespoon, "AuTablespoons", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.BoardFoot, "BoardFeet", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Centiliter, "Centiliters", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.CubicCentimeter, "CubicCentimeters", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.CubicDecimeter, "CubicDecimeters", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.CubicFoot, "CubicFeet", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.CubicHectometer, "CubicHectometers", new BaseUnits(length: LengthUnit.Hectometer), "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.CubicInch, "CubicInches", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.CubicKilometer, "CubicKilometers", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.CubicMeter, "CubicMeters", new BaseUnits(length: LengthUnit.Meter), "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.CubicMicrometer, "CubicMicrometers", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.CubicMile, "CubicMiles", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.CubicMillimeter, "CubicMillimeters", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.CubicYard, "CubicYards", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Decaliter, "Decaliters", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.DecausGallon, "DecausGallons", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Deciliter, "Deciliters", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.DeciusGallon, "DeciusGallons", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.HectocubicFoot, "HectocubicFeet", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.HectocubicMeter, "HectocubicMeters", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Hectoliter, "Hectoliters", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.HectousGallon, "HectousGallons", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.ImperialBeerBarrel, "ImperialBeerBarrels", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.ImperialGallon, "ImperialGallons", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.ImperialOunce, "ImperialOunces", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.ImperialPint, "ImperialPints", new BaseUnits(length: LengthUnit.Decimeter), "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.ImperialQuart, "ImperialQuarts", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.KilocubicFoot, "KilocubicFeet", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.KilocubicMeter, "KilocubicMeters", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.KiloimperialGallon, "KiloimperialGallons", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Kiloliter, "Kiloliters", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.KilousGallon, "KilousGallons", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Liter, "Liters", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.MegacubicFoot, "MegacubicFeet", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.MegaimperialGallon, "MegaimperialGallons", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Megaliter, "Megaliters", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.MegausGallon, "MegausGallons", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.MetricCup, "MetricCups", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.MetricTeaspoon, "MetricTeaspoons", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Microliter, "Microliters", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Milliliter, "Milliliters", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.Nanoliter, "Nanoliters", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.OilBarrel, "OilBarrels", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.UkTablespoon, "UkTablespoons", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.UsBeerBarrel, "UsBeerBarrels", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.UsCustomaryCup, "UsCustomaryCups", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.UsGallon, "UsGallons", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.UsLegalCup, "UsLegalCups", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.UsOunce, "UsOunces", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.UsPint, "UsPints", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.UsQuart, "UsQuarts", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.UsTablespoon, "UsTablespoons", BaseUnits.Undefined, "Volume"),
                    new UnitInfo<VolumeUnit>(VolumeUnit.UsTeaspoon, "UsTeaspoons", BaseUnits.Undefined, "Volume"),
                },
                BaseUnit, Zero, BaseDimensions);

            DefaultConversionFunctions = new UnitConverter();
            RegisterDefaultConversions(DefaultConversionFunctions);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public Volume(QuantityValue value, VolumeUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public Volume(QuantityValue value, UnitSystem unitSystem)
        {
            if (unitSystem is null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault();

            _value = value;
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <summary>
        ///     The <see cref="UnitConverter" /> containing the default generated conversion functions for <see cref="Volume" /> instances.
        /// </summary>
        public static UnitConverter DefaultConversionFunctions { get; }

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<VolumeUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Volume, which is CubicMeter. All conversions go via this value.
        /// </summary>
        public static VolumeUnit BaseUnit { get; }

        /// <summary>
        ///     All units of measurement for the Volume quantity.
        /// </summary>
        public static VolumeUnit[] Units { get; }

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit CubicMeter.
        /// </summary>
        public static Volume Zero { get; }

        /// <inheritdoc cref="Zero"/>
        public static Volume AdditiveIdentity => Zero;

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public QuantityValue Value => _value;

        /// <inheritdoc />
        QuantityValue IQuantity.Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public VolumeUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<VolumeUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Volume.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.AcreFoot"/>
        /// </summary>
        public QuantityValue AcreFeet => As(VolumeUnit.AcreFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.AuTablespoon"/>
        /// </summary>
        public QuantityValue AuTablespoons => As(VolumeUnit.AuTablespoon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.BoardFoot"/>
        /// </summary>
        public QuantityValue BoardFeet => As(VolumeUnit.BoardFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Centiliter"/>
        /// </summary>
        public QuantityValue Centiliters => As(VolumeUnit.Centiliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicCentimeter"/>
        /// </summary>
        public QuantityValue CubicCentimeters => As(VolumeUnit.CubicCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicDecimeter"/>
        /// </summary>
        public QuantityValue CubicDecimeters => As(VolumeUnit.CubicDecimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicFoot"/>
        /// </summary>
        public QuantityValue CubicFeet => As(VolumeUnit.CubicFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicHectometer"/>
        /// </summary>
        public QuantityValue CubicHectometers => As(VolumeUnit.CubicHectometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicInch"/>
        /// </summary>
        public QuantityValue CubicInches => As(VolumeUnit.CubicInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicKilometer"/>
        /// </summary>
        public QuantityValue CubicKilometers => As(VolumeUnit.CubicKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicMeter"/>
        /// </summary>
        public QuantityValue CubicMeters => As(VolumeUnit.CubicMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicMicrometer"/>
        /// </summary>
        public QuantityValue CubicMicrometers => As(VolumeUnit.CubicMicrometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicMile"/>
        /// </summary>
        public QuantityValue CubicMiles => As(VolumeUnit.CubicMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicMillimeter"/>
        /// </summary>
        public QuantityValue CubicMillimeters => As(VolumeUnit.CubicMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicYard"/>
        /// </summary>
        public QuantityValue CubicYards => As(VolumeUnit.CubicYard);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Decaliter"/>
        /// </summary>
        public QuantityValue Decaliters => As(VolumeUnit.Decaliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.DecausGallon"/>
        /// </summary>
        public QuantityValue DecausGallons => As(VolumeUnit.DecausGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Deciliter"/>
        /// </summary>
        public QuantityValue Deciliters => As(VolumeUnit.Deciliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.DeciusGallon"/>
        /// </summary>
        public QuantityValue DeciusGallons => As(VolumeUnit.DeciusGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.HectocubicFoot"/>
        /// </summary>
        public QuantityValue HectocubicFeet => As(VolumeUnit.HectocubicFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.HectocubicMeter"/>
        /// </summary>
        public QuantityValue HectocubicMeters => As(VolumeUnit.HectocubicMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Hectoliter"/>
        /// </summary>
        public QuantityValue Hectoliters => As(VolumeUnit.Hectoliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.HectousGallon"/>
        /// </summary>
        public QuantityValue HectousGallons => As(VolumeUnit.HectousGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.ImperialBeerBarrel"/>
        /// </summary>
        public QuantityValue ImperialBeerBarrels => As(VolumeUnit.ImperialBeerBarrel);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.ImperialGallon"/>
        /// </summary>
        public QuantityValue ImperialGallons => As(VolumeUnit.ImperialGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.ImperialOunce"/>
        /// </summary>
        public QuantityValue ImperialOunces => As(VolumeUnit.ImperialOunce);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.ImperialPint"/>
        /// </summary>
        public QuantityValue ImperialPints => As(VolumeUnit.ImperialPint);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.ImperialQuart"/>
        /// </summary>
        public QuantityValue ImperialQuarts => As(VolumeUnit.ImperialQuart);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.KilocubicFoot"/>
        /// </summary>
        public QuantityValue KilocubicFeet => As(VolumeUnit.KilocubicFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.KilocubicMeter"/>
        /// </summary>
        public QuantityValue KilocubicMeters => As(VolumeUnit.KilocubicMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.KiloimperialGallon"/>
        /// </summary>
        public QuantityValue KiloimperialGallons => As(VolumeUnit.KiloimperialGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Kiloliter"/>
        /// </summary>
        public QuantityValue Kiloliters => As(VolumeUnit.Kiloliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.KilousGallon"/>
        /// </summary>
        public QuantityValue KilousGallons => As(VolumeUnit.KilousGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Liter"/>
        /// </summary>
        public QuantityValue Liters => As(VolumeUnit.Liter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.MegacubicFoot"/>
        /// </summary>
        public QuantityValue MegacubicFeet => As(VolumeUnit.MegacubicFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.MegaimperialGallon"/>
        /// </summary>
        public QuantityValue MegaimperialGallons => As(VolumeUnit.MegaimperialGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Megaliter"/>
        /// </summary>
        public QuantityValue Megaliters => As(VolumeUnit.Megaliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.MegausGallon"/>
        /// </summary>
        public QuantityValue MegausGallons => As(VolumeUnit.MegausGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.MetricCup"/>
        /// </summary>
        public QuantityValue MetricCups => As(VolumeUnit.MetricCup);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.MetricTeaspoon"/>
        /// </summary>
        public QuantityValue MetricTeaspoons => As(VolumeUnit.MetricTeaspoon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Microliter"/>
        /// </summary>
        public QuantityValue Microliters => As(VolumeUnit.Microliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Milliliter"/>
        /// </summary>
        public QuantityValue Milliliters => As(VolumeUnit.Milliliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Nanoliter"/>
        /// </summary>
        public QuantityValue Nanoliters => As(VolumeUnit.Nanoliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.OilBarrel"/>
        /// </summary>
        public QuantityValue OilBarrels => As(VolumeUnit.OilBarrel);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UkTablespoon"/>
        /// </summary>
        public QuantityValue UkTablespoons => As(VolumeUnit.UkTablespoon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsBeerBarrel"/>
        /// </summary>
        public QuantityValue UsBeerBarrels => As(VolumeUnit.UsBeerBarrel);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsCustomaryCup"/>
        /// </summary>
        public QuantityValue UsCustomaryCups => As(VolumeUnit.UsCustomaryCup);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsGallon"/>
        /// </summary>
        public QuantityValue UsGallons => As(VolumeUnit.UsGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsLegalCup"/>
        /// </summary>
        public QuantityValue UsLegalCups => As(VolumeUnit.UsLegalCup);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsOunce"/>
        /// </summary>
        public QuantityValue UsOunces => As(VolumeUnit.UsOunce);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsPint"/>
        /// </summary>
        public QuantityValue UsPints => As(VolumeUnit.UsPint);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsQuart"/>
        /// </summary>
        public QuantityValue UsQuarts => As(VolumeUnit.UsQuart);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsTablespoon"/>
        /// </summary>
        public QuantityValue UsTablespoons => As(VolumeUnit.UsTablespoon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsTeaspoon"/>
        /// </summary>
        public QuantityValue UsTeaspoons => As(VolumeUnit.UsTeaspoon);

        #endregion

        #region Static Methods

        /// <summary>
        /// Registers the default conversion functions in the given <see cref="UnitConverter"/> instance.
        /// </summary>
        /// <param name="unitConverter">The <see cref="UnitConverter"/> to register the default conversion functions in.</param>
        internal static void RegisterDefaultConversions(UnitConverter unitConverter)
        {
            // Register in unit converter: VolumeUnit -> BaseUnit
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.AcreFoot, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.AuTablespoon, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.BoardFoot, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.Centiliter, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicCentimeter, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicDecimeter, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicFoot, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicHectometer, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicInch, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicKilometer, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMicrometer, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMile, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMillimeter, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicYard, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.Decaliter, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.DecausGallon, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.Deciliter, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.DeciusGallon, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.HectocubicFoot, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.HectocubicMeter, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.Hectoliter, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.HectousGallon, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.ImperialBeerBarrel, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.ImperialGallon, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.ImperialOunce, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.ImperialPint, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.ImperialQuart, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.KilocubicFoot, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.KilocubicMeter, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.KiloimperialGallon, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.Kiloliter, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.KilousGallon, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.Liter, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.MegacubicFoot, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.MegaimperialGallon, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.Megaliter, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.MegausGallon, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.MetricCup, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.MetricTeaspoon, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.Microliter, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.Milliliter, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.Nanoliter, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.OilBarrel, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.UkTablespoon, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.UsBeerBarrel, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.UsCustomaryCup, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.UsGallon, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.UsLegalCup, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.UsOunce, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.UsPint, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.UsQuart, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.UsTablespoon, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.UsTeaspoon, VolumeUnit.CubicMeter, quantity => quantity.ToUnit(VolumeUnit.CubicMeter));

            // Register in unit converter: BaseUnit <-> BaseUnit
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.CubicMeter, quantity => quantity);

            // Register in unit converter: BaseUnit -> VolumeUnit
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.AcreFoot, quantity => quantity.ToUnit(VolumeUnit.AcreFoot));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.AuTablespoon, quantity => quantity.ToUnit(VolumeUnit.AuTablespoon));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.BoardFoot, quantity => quantity.ToUnit(VolumeUnit.BoardFoot));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.Centiliter, quantity => quantity.ToUnit(VolumeUnit.Centiliter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.CubicCentimeter, quantity => quantity.ToUnit(VolumeUnit.CubicCentimeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.CubicDecimeter, quantity => quantity.ToUnit(VolumeUnit.CubicDecimeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.CubicFoot, quantity => quantity.ToUnit(VolumeUnit.CubicFoot));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.CubicHectometer, quantity => quantity.ToUnit(VolumeUnit.CubicHectometer));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.CubicInch, quantity => quantity.ToUnit(VolumeUnit.CubicInch));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.CubicKilometer, quantity => quantity.ToUnit(VolumeUnit.CubicKilometer));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.CubicMicrometer, quantity => quantity.ToUnit(VolumeUnit.CubicMicrometer));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.CubicMile, quantity => quantity.ToUnit(VolumeUnit.CubicMile));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.CubicMillimeter, quantity => quantity.ToUnit(VolumeUnit.CubicMillimeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.CubicYard, quantity => quantity.ToUnit(VolumeUnit.CubicYard));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.Decaliter, quantity => quantity.ToUnit(VolumeUnit.Decaliter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.DecausGallon, quantity => quantity.ToUnit(VolumeUnit.DecausGallon));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.Deciliter, quantity => quantity.ToUnit(VolumeUnit.Deciliter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.DeciusGallon, quantity => quantity.ToUnit(VolumeUnit.DeciusGallon));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.HectocubicFoot, quantity => quantity.ToUnit(VolumeUnit.HectocubicFoot));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.HectocubicMeter, quantity => quantity.ToUnit(VolumeUnit.HectocubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.Hectoliter, quantity => quantity.ToUnit(VolumeUnit.Hectoliter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.HectousGallon, quantity => quantity.ToUnit(VolumeUnit.HectousGallon));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.ImperialBeerBarrel, quantity => quantity.ToUnit(VolumeUnit.ImperialBeerBarrel));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.ImperialGallon, quantity => quantity.ToUnit(VolumeUnit.ImperialGallon));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.ImperialOunce, quantity => quantity.ToUnit(VolumeUnit.ImperialOunce));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.ImperialPint, quantity => quantity.ToUnit(VolumeUnit.ImperialPint));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.ImperialQuart, quantity => quantity.ToUnit(VolumeUnit.ImperialQuart));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.KilocubicFoot, quantity => quantity.ToUnit(VolumeUnit.KilocubicFoot));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.KilocubicMeter, quantity => quantity.ToUnit(VolumeUnit.KilocubicMeter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.KiloimperialGallon, quantity => quantity.ToUnit(VolumeUnit.KiloimperialGallon));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.Kiloliter, quantity => quantity.ToUnit(VolumeUnit.Kiloliter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.KilousGallon, quantity => quantity.ToUnit(VolumeUnit.KilousGallon));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.Liter, quantity => quantity.ToUnit(VolumeUnit.Liter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.MegacubicFoot, quantity => quantity.ToUnit(VolumeUnit.MegacubicFoot));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.MegaimperialGallon, quantity => quantity.ToUnit(VolumeUnit.MegaimperialGallon));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.Megaliter, quantity => quantity.ToUnit(VolumeUnit.Megaliter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.MegausGallon, quantity => quantity.ToUnit(VolumeUnit.MegausGallon));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.MetricCup, quantity => quantity.ToUnit(VolumeUnit.MetricCup));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.MetricTeaspoon, quantity => quantity.ToUnit(VolumeUnit.MetricTeaspoon));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.Microliter, quantity => quantity.ToUnit(VolumeUnit.Microliter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.Milliliter, quantity => quantity.ToUnit(VolumeUnit.Milliliter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.Nanoliter, quantity => quantity.ToUnit(VolumeUnit.Nanoliter));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.OilBarrel, quantity => quantity.ToUnit(VolumeUnit.OilBarrel));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.UkTablespoon, quantity => quantity.ToUnit(VolumeUnit.UkTablespoon));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.UsBeerBarrel, quantity => quantity.ToUnit(VolumeUnit.UsBeerBarrel));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.UsCustomaryCup, quantity => quantity.ToUnit(VolumeUnit.UsCustomaryCup));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.UsGallon, quantity => quantity.ToUnit(VolumeUnit.UsGallon));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.UsLegalCup, quantity => quantity.ToUnit(VolumeUnit.UsLegalCup));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.UsOunce, quantity => quantity.ToUnit(VolumeUnit.UsOunce));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.UsPint, quantity => quantity.ToUnit(VolumeUnit.UsPint));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.UsQuart, quantity => quantity.ToUnit(VolumeUnit.UsQuart));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.UsTablespoon, quantity => quantity.ToUnit(VolumeUnit.UsTablespoon));
            unitConverter.SetConversionFunction<Volume>(VolumeUnit.CubicMeter, VolumeUnit.UsTeaspoon, quantity => quantity.ToUnit(VolumeUnit.UsTeaspoon));
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(VolumeUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static string GetAbbreviation(VolumeUnit unit, IFormatProvider? provider)
        {
            return UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.AcreFoot"/>.
        /// </summary>
        public static Volume FromAcreFeet(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.AcreFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.AuTablespoon"/>.
        /// </summary>
        public static Volume FromAuTablespoons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.AuTablespoon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.BoardFoot"/>.
        /// </summary>
        public static Volume FromBoardFeet(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.BoardFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Centiliter"/>.
        /// </summary>
        public static Volume FromCentiliters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.Centiliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicCentimeter"/>.
        /// </summary>
        public static Volume FromCubicCentimeters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.CubicCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicDecimeter"/>.
        /// </summary>
        public static Volume FromCubicDecimeters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.CubicDecimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicFoot"/>.
        /// </summary>
        public static Volume FromCubicFeet(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.CubicFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicHectometer"/>.
        /// </summary>
        public static Volume FromCubicHectometers(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.CubicHectometer);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicInch"/>.
        /// </summary>
        public static Volume FromCubicInches(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.CubicInch);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicKilometer"/>.
        /// </summary>
        public static Volume FromCubicKilometers(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.CubicKilometer);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicMeter"/>.
        /// </summary>
        public static Volume FromCubicMeters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.CubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicMicrometer"/>.
        /// </summary>
        public static Volume FromCubicMicrometers(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.CubicMicrometer);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicMile"/>.
        /// </summary>
        public static Volume FromCubicMiles(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.CubicMile);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicMillimeter"/>.
        /// </summary>
        public static Volume FromCubicMillimeters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.CubicMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicYard"/>.
        /// </summary>
        public static Volume FromCubicYards(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.CubicYard);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Decaliter"/>.
        /// </summary>
        public static Volume FromDecaliters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.Decaliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.DecausGallon"/>.
        /// </summary>
        public static Volume FromDecausGallons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.DecausGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Deciliter"/>.
        /// </summary>
        public static Volume FromDeciliters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.Deciliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.DeciusGallon"/>.
        /// </summary>
        public static Volume FromDeciusGallons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.DeciusGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.HectocubicFoot"/>.
        /// </summary>
        public static Volume FromHectocubicFeet(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.HectocubicFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.HectocubicMeter"/>.
        /// </summary>
        public static Volume FromHectocubicMeters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.HectocubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Hectoliter"/>.
        /// </summary>
        public static Volume FromHectoliters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.Hectoliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.HectousGallon"/>.
        /// </summary>
        public static Volume FromHectousGallons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.HectousGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.ImperialBeerBarrel"/>.
        /// </summary>
        public static Volume FromImperialBeerBarrels(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.ImperialBeerBarrel);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.ImperialGallon"/>.
        /// </summary>
        public static Volume FromImperialGallons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.ImperialGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.ImperialOunce"/>.
        /// </summary>
        public static Volume FromImperialOunces(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.ImperialOunce);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.ImperialPint"/>.
        /// </summary>
        public static Volume FromImperialPints(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.ImperialPint);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.ImperialQuart"/>.
        /// </summary>
        public static Volume FromImperialQuarts(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.ImperialQuart);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.KilocubicFoot"/>.
        /// </summary>
        public static Volume FromKilocubicFeet(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.KilocubicFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.KilocubicMeter"/>.
        /// </summary>
        public static Volume FromKilocubicMeters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.KilocubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.KiloimperialGallon"/>.
        /// </summary>
        public static Volume FromKiloimperialGallons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.KiloimperialGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Kiloliter"/>.
        /// </summary>
        public static Volume FromKiloliters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.Kiloliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.KilousGallon"/>.
        /// </summary>
        public static Volume FromKilousGallons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.KilousGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Liter"/>.
        /// </summary>
        public static Volume FromLiters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.Liter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MegacubicFoot"/>.
        /// </summary>
        public static Volume FromMegacubicFeet(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.MegacubicFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MegaimperialGallon"/>.
        /// </summary>
        public static Volume FromMegaimperialGallons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.MegaimperialGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Megaliter"/>.
        /// </summary>
        public static Volume FromMegaliters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.Megaliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MegausGallon"/>.
        /// </summary>
        public static Volume FromMegausGallons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.MegausGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MetricCup"/>.
        /// </summary>
        public static Volume FromMetricCups(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.MetricCup);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MetricTeaspoon"/>.
        /// </summary>
        public static Volume FromMetricTeaspoons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.MetricTeaspoon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Microliter"/>.
        /// </summary>
        public static Volume FromMicroliters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.Microliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Milliliter"/>.
        /// </summary>
        public static Volume FromMilliliters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.Milliliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Nanoliter"/>.
        /// </summary>
        public static Volume FromNanoliters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.Nanoliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.OilBarrel"/>.
        /// </summary>
        public static Volume FromOilBarrels(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.OilBarrel);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UkTablespoon"/>.
        /// </summary>
        public static Volume FromUkTablespoons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.UkTablespoon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsBeerBarrel"/>.
        /// </summary>
        public static Volume FromUsBeerBarrels(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.UsBeerBarrel);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsCustomaryCup"/>.
        /// </summary>
        public static Volume FromUsCustomaryCups(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.UsCustomaryCup);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsGallon"/>.
        /// </summary>
        public static Volume FromUsGallons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.UsGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsLegalCup"/>.
        /// </summary>
        public static Volume FromUsLegalCups(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.UsLegalCup);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsOunce"/>.
        /// </summary>
        public static Volume FromUsOunces(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.UsOunce);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsPint"/>.
        /// </summary>
        public static Volume FromUsPints(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.UsPint);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsQuart"/>.
        /// </summary>
        public static Volume FromUsQuarts(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.UsQuart);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsTablespoon"/>.
        /// </summary>
        public static Volume FromUsTablespoons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.UsTablespoon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsTeaspoon"/>.
        /// </summary>
        public static Volume FromUsTeaspoons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.UsTeaspoon);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="VolumeUnit" /> to <see cref="Volume" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Volume unit value.</returns>
        public static Volume From(QuantityValue value, VolumeUnit fromUnit)
        {
            return new Volume(value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Volume Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static Volume Parse(string str, IFormatProvider? provider)
        {
            return UnitsNetSetup.Default.QuantityParser.Parse<Volume, VolumeUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        public static bool TryParse(string? str, out Volume result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParse(string? str, IFormatProvider? provider, out Volume result)
        {
            return UnitsNetSetup.Default.QuantityParser.TryParse<Volume, VolumeUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static VolumeUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static VolumeUnit ParseUnit(string str, IFormatProvider? provider)
        {
            return UnitsNetSetup.Default.UnitParser.Parse<VolumeUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.VolumeUnit)"/>
        public static bool TryParseUnit(string str, out VolumeUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider? provider, out VolumeUnit unit)
        {
            return UnitsNetSetup.Default.UnitParser.TryParse<VolumeUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static Volume operator -(Volume right)
        {
            return new Volume(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Volume"/> from adding two <see cref="Volume"/>.</summary>
        public static Volume operator +(Volume left, Volume right)
        {
            return new Volume(left.Value + right.ToUnit(left.Unit).Value, left.Unit);
        }

        /// <summary>Get <see cref="Volume"/> from subtracting two <see cref="Volume"/>.</summary>
        public static Volume operator -(Volume left, Volume right)
        {
            return new Volume(left.Value - right.ToUnit(left.Unit).Value, left.Unit);
        }

        /// <summary>Get <see cref="Volume"/> from multiplying value and <see cref="Volume"/>.</summary>
        public static Volume operator *(QuantityValue left, Volume right)
        {
            return new Volume(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Volume"/> from multiplying value and <see cref="Volume"/>.</summary>
        public static Volume operator *(Volume left, QuantityValue right)
        {
            return new Volume(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="Volume"/> from dividing <see cref="Volume"/> by value.</summary>
        public static Volume operator /(Volume left, QuantityValue right)
        {
            return new Volume(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="Volume"/> by <see cref="Volume"/>.</summary>
        public static QuantityValue operator /(Volume left, Volume right)
        {
            return left.CubicMeters / right.CubicMeters;
        }

        #endregion

        #region Relational Operators

        /// <summary>Get <see cref="AmountOfSubstance"/> from <see cref="Volume"/> * <see cref="Molarity"/>.</summary>
        public static AmountOfSubstance operator *(Volume volume, Molarity molarity)
        {
            return AmountOfSubstance.FromMoles(volume.CubicMeters * molarity.MolesPerCubicMeter);
        }

        /// <summary>Get <see cref="Area"/> from <see cref="Volume"/> * <see cref="ReciprocalLength"/>.</summary>
        public static Area operator *(Volume volume, ReciprocalLength reciprocalLength)
        {
            return Area.FromSquareMeters(volume.CubicMeters * reciprocalLength.InverseMeters);
        }

        /// <summary>Get <see cref="Area"/> from <see cref="Volume"/> / <see cref="Length"/>.</summary>
        public static Area operator /(Volume volume, Length length)
        {
            return Area.FromSquareMeters(volume.CubicMeters / length.Meters);
        }

        /// <summary>Get <see cref="AreaMomentOfInertia"/> from <see cref="Volume"/> * <see cref="Length"/>.</summary>
        public static AreaMomentOfInertia operator *(Volume volume, Length length)
        {
            return AreaMomentOfInertia.FromMetersToTheFourth(volume.CubicMeters * length.Meters);
        }

        /// <summary>Get <see cref="Duration"/> from <see cref="Volume"/> / <see cref="VolumeFlow"/>.</summary>
        public static Duration operator /(Volume volume, VolumeFlow volumeFlow)
        {
            return Duration.FromSeconds(volume.CubicMeters / volumeFlow.CubicMetersPerSecond);
        }

        /// <summary>Get <see cref="Energy"/> from <see cref="Volume"/> * <see cref="EnergyDensity"/>.</summary>
        public static Energy operator *(Volume volume, EnergyDensity energyDensity)
        {
            return Energy.FromJoules(volume.CubicMeters * energyDensity.JoulesPerCubicMeter);
        }

        /// <summary>Get <see cref="Length"/> from <see cref="Volume"/> * <see cref="ReciprocalArea"/>.</summary>
        public static Length operator *(Volume volume, ReciprocalArea reciprocalArea)
        {
            return Length.FromMeters(volume.CubicMeters * reciprocalArea.InverseSquareMeters);
        }

        /// <summary>Get <see cref="Length"/> from <see cref="Volume"/> / <see cref="Area"/>.</summary>
        public static Length operator /(Volume volume, Area area)
        {
            return Length.FromMeters(volume.CubicMeters / area.SquareMeters);
        }

        /// <summary>Get <see cref="Mass"/> from <see cref="Volume"/> * <see cref="Density"/>.</summary>
        public static Mass operator *(Volume volume, Density density)
        {
            return Mass.FromKilograms(volume.CubicMeters * density.KilogramsPerCubicMeter);
        }

        /// <summary>Get <see cref="Mass"/> from <see cref="Volume"/> * <see cref="MassConcentration"/>.</summary>
        public static Mass operator *(Volume volume, MassConcentration massConcentration)
        {
            return Mass.FromKilograms(volume.CubicMeters * massConcentration.KilogramsPerCubicMeter);
        }

        /// <summary>Get <see cref="Mass"/> from <see cref="Volume"/> / <see cref="SpecificVolume"/>.</summary>
        public static Mass operator /(Volume volume, SpecificVolume specificVolume)
        {
            return Mass.FromKilograms(volume.CubicMeters / specificVolume.CubicMetersPerKilogram);
        }

        /// <summary>Get <see cref="SpecificVolume"/> from <see cref="Volume"/> / <see cref="Mass"/>.</summary>
        public static SpecificVolume operator /(Volume volume, Mass mass)
        {
            return SpecificVolume.FromCubicMetersPerKilogram(volume.CubicMeters / mass.Kilograms);
        }

        /// <summary>Get <see cref="VolumeFlow"/> from <see cref="Volume"/> / <see cref="Duration"/>.</summary>
        public static VolumeFlow operator /(Volume volume, Duration duration)
        {
            return VolumeFlow.FromCubicMetersPerSecond(volume.CubicMeters / duration.Seconds);
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(Volume left, Volume right)
        {
            return left.Value <= right.ToUnit(left.Unit).Value;
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(Volume left, Volume right)
        {
            return left.Value >= right.ToUnit(left.Unit).Value;
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(Volume left, Volume right)
        {
            return left.Value < right.ToUnit(left.Unit).Value;
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(Volume left, Volume right)
        {
            return left.Value > right.ToUnit(left.Unit).Value;
        }

        /// <summary>Indicates strict equality of two <see cref="Volume"/> quantities.</summary>
        public static bool operator ==(Volume left, Volume right)
        {
            return left.Equals(right);
        }

        /// <summary>Indicates strict inequality of two <see cref="Volume"/> quantities.</summary>
        public static bool operator !=(Volume left, Volume right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="Volume"/> quantities.</summary>
        public override bool Equals(object? obj)
        {
            if (obj is null || !(obj is Volume otherQuantity))
                return false;

            return Equals(otherQuantity);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="Volume"/> quantities.</summary>
        public bool Equals(Volume other)
        {
            return _value.Equals(other.As(this.Unit));
        }

        /// <summary>Compares the current <see cref="Volume"/> with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other when converted to the same unit.</summary>
        /// <param name="obj">An object to compare with this instance.</param>
        /// <exception cref="T:System.ArgumentException">
        ///    <paramref name="obj" /> is not the same type as this instance.
        /// </exception>
        /// <returns>A value that indicates the relative order of the quantities being compared. The return value has these meanings:
        ///     <list type="table">
        ///         <listheader><term> Value</term><description> Meaning</description></listheader>
        ///         <item><term> Less than zero</term><description> This instance precedes <paramref name="obj" /> in the sort order.</description></item>
        ///         <item><term> Zero</term><description> This instance occurs in the same position in the sort order as <paramref name="obj" />.</description></item>
        ///         <item><term> Greater than zero</term><description> This instance follows <paramref name="obj" /> in the sort order.</description></item>
        ///     </list>
        /// </returns>
        public int CompareTo(object? obj)
        {
            if (obj is null) throw new ArgumentNullException(nameof(obj));
            if (!(obj is Volume otherQuantity)) throw new ArgumentException("Expected type Volume.", nameof(obj));

            return CompareTo(otherQuantity);
        }

        /// <summary>Compares the current <see cref="Volume"/> with another <see cref="Volume"/> and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other when converted to the same unit.</summary>
        /// <param name="other">A quantity to compare with this instance.</param>
        /// <returns>A value that indicates the relative order of the quantities being compared. The return value has these meanings:
        ///     <list type="table">
        ///         <listheader><term> Value</term><description> Meaning</description></listheader>
        ///         <item><term> Less than zero</term><description> This instance precedes <paramref name="other" /> in the sort order.</description></item>
        ///         <item><term> Zero</term><description> This instance occurs in the same position in the sort order as <paramref name="other" />.</description></item>
        ///         <item><term> Greater than zero</term><description> This instance follows <paramref name="other" /> in the sort order.</description></item>
        ///     </list>
        /// </returns>
        public int CompareTo(Volume other)
        {
            return _value.CompareTo(other.ToUnit(this.Unit).Value);
        }

        /// <inheritdoc />
        public bool Equals(IQuantity? other, IQuantity tolerance)
        {
            return other is Volume otherTyped
                   && (tolerance is Volume toleranceTyped
                       ? true
                       : throw new ArgumentException($"Tolerance quantity ({tolerance.QuantityInfo.Name}) did not match the other quantities of type 'Volume'.", nameof(tolerance)))
                   && Equals(otherTyped, toleranceTyped);
        }

        /// <inheritdoc />
        public bool Equals(Volume other, Volume tolerance)
        {
            return UnitsNet.Comparison.EqualsAbsolute(
                this.Value,
                other.As(this.Unit),
                tolerance: tolerance.As(this.Unit));
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Volume.</returns>
        public override int GetHashCode()
        {
            var valueInBaseUnit = As(BaseUnit);
            #if NET7_0_OR_GREATER
            return HashCode.Combine(Info.Name, valueInBaseUnit);
            #else
            return new { Info.Name, valueInBaseUnit }.GetHashCode();
            #endif
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public QuantityValue As(VolumeUnit unit)
        {
            if (Unit == unit)
                return Value;

            return ToUnit(unit).Value;
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public QuantityValue As(UnitSystem unitSystem)
        {
            if (unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if (firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        QuantityValue IQuantity.As(Enum unit)
        {
            if (!(unit is VolumeUnit typedUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(VolumeUnit)} is supported.", nameof(unit));

            return As(typedUnit);
        }

        /// <summary>
        ///     Converts this Volume to another Volume with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <param name="unit">The unit to convert to.</param>
        /// <returns>A Volume with the specified unit.</returns>
        public Volume ToUnit(VolumeUnit unit)
        {
            return ToUnit(unit, DefaultConversionFunctions);
        }

        /// <summary>
        ///     Converts this <see cref="Volume"/> to another <see cref="Volume"/> using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <param name="unit">The unit to convert to.</param>
        /// <param name="unitConverter">The <see cref="UnitConverter"/> to use for the conversion.</param>
        /// <returns>A Volume with the specified unit.</returns>
        public Volume ToUnit(VolumeUnit unit, UnitConverter unitConverter)
        {
            if (TryToUnit(unit, out var converted))
            {
                // Try to convert using the auto-generated conversion methods.
                return converted!.Value;
            }
            else if (unitConverter.TryGetConversionFunction((typeof(Volume), Unit, typeof(Volume), unit), out var conversionFunction))
            {
                // See if the unit converter has an extensibility conversion registered.
                return (Volume)conversionFunction(this);
            }
            else if (Unit != BaseUnit)
            {
                // Conversion to requested unit NOT found. Try to convert to BaseUnit, and then from BaseUnit to requested unit.
                var inBaseUnits = ToUnit(BaseUnit);
                return inBaseUnits.ToUnit(unit);
            }
            else
            {
                // No possible conversion
                throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        /// <summary>
        ///     Attempts to convert this <see cref="Volume"/> to another <see cref="Volume"/> with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <param name="unit">The unit to convert to.</param>
        /// <param name="converted">The converted <see cref="Volume"/> in <paramref name="unit"/>, if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        private bool TryToUnit(VolumeUnit unit, [NotNullWhen(true)] out Volume? converted)
        {
            if (Unit == unit)
            {
                converted = this;
                return true;
            }

            Volume? convertedOrNull = (Unit, unit) switch
            {
                // VolumeUnit -> BaseUnit
                (VolumeUnit.AcreFoot, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(60228605349, 48828125), VolumeUnit.CubicMeter),
                (VolumeUnit.AuTablespoon, VolumeUnit.CubicMeter) => new Volume(_value / 50000, VolumeUnit.CubicMeter),
                (VolumeUnit.BoardFoot, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(18435447, 7812500000), VolumeUnit.CubicMeter),
                (VolumeUnit.Centiliter, VolumeUnit.CubicMeter) => new Volume(_value / 100000, VolumeUnit.CubicMeter),
                (VolumeUnit.CubicCentimeter, VolumeUnit.CubicMeter) => new Volume(_value / 1000000, VolumeUnit.CubicMeter),
                (VolumeUnit.CubicDecimeter, VolumeUnit.CubicMeter) => new Volume(_value / 1000, VolumeUnit.CubicMeter),
                (VolumeUnit.CubicFoot, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(55306341, 1953125000), VolumeUnit.CubicMeter),
                (VolumeUnit.CubicHectometer, VolumeUnit.CubicMeter) => new Volume(_value * 1000000, VolumeUnit.CubicMeter),
                (VolumeUnit.CubicInch, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(2048383, 125000000000), VolumeUnit.CubicMeter),
                (VolumeUnit.CubicKilometer, VolumeUnit.CubicMeter) => new Volume(_value * 1000000000, VolumeUnit.CubicMeter),
                (VolumeUnit.CubicMicrometer, VolumeUnit.CubicMeter) => new Volume(_value / 1000000000000000000, VolumeUnit.CubicMeter),
                (VolumeUnit.CubicMile, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(8140980127813632, 1953125), VolumeUnit.CubicMeter),
                (VolumeUnit.CubicMillimeter, VolumeUnit.CubicMeter) => new Volume(_value / 1000000000, VolumeUnit.CubicMeter),
                (VolumeUnit.CubicYard, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(1493271207, 1953125000), VolumeUnit.CubicMeter),
                (VolumeUnit.Decaliter, VolumeUnit.CubicMeter) => new Volume(_value / 100, VolumeUnit.CubicMeter),
                (VolumeUnit.DecausGallon, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(473176473, 12500000000), VolumeUnit.CubicMeter),
                (VolumeUnit.Deciliter, VolumeUnit.CubicMeter) => new Volume(_value / 10000, VolumeUnit.CubicMeter),
                (VolumeUnit.DeciusGallon, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(473176473, 1250000000000), VolumeUnit.CubicMeter),
                (VolumeUnit.HectocubicFoot, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(55306341, 19531250), VolumeUnit.CubicMeter),
                (VolumeUnit.HectocubicMeter, VolumeUnit.CubicMeter) => new Volume(_value * 100, VolumeUnit.CubicMeter),
                (VolumeUnit.Hectoliter, VolumeUnit.CubicMeter) => new Volume(_value / 10, VolumeUnit.CubicMeter),
                (VolumeUnit.HectousGallon, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(473176473, 1250000000), VolumeUnit.CubicMeter),
                (VolumeUnit.ImperialBeerBarrel, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(4091481, 25000000), VolumeUnit.CubicMeter),
                (VolumeUnit.ImperialGallon, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(454609, 100000000), VolumeUnit.CubicMeter),
                (VolumeUnit.ImperialOunce, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(454609, 16000000000), VolumeUnit.CubicMeter),
                (VolumeUnit.ImperialPint, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(454609, 800000000), VolumeUnit.CubicMeter),
                (VolumeUnit.ImperialQuart, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(454609, 400000000), VolumeUnit.CubicMeter),
                (VolumeUnit.KilocubicFoot, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(55306341, 1953125), VolumeUnit.CubicMeter),
                (VolumeUnit.KilocubicMeter, VolumeUnit.CubicMeter) => new Volume(_value * 1000, VolumeUnit.CubicMeter),
                (VolumeUnit.KiloimperialGallon, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(454609, 100000), VolumeUnit.CubicMeter),
                (VolumeUnit.Kiloliter, VolumeUnit.CubicMeter) => new Volume(_value, VolumeUnit.CubicMeter),
                (VolumeUnit.KilousGallon, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(473176473, 125000000), VolumeUnit.CubicMeter),
                (VolumeUnit.Liter, VolumeUnit.CubicMeter) => new Volume(_value / 1000, VolumeUnit.CubicMeter),
                (VolumeUnit.MegacubicFoot, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(442450728, 15625), VolumeUnit.CubicMeter),
                (VolumeUnit.MegaimperialGallon, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(454609, 100), VolumeUnit.CubicMeter),
                (VolumeUnit.Megaliter, VolumeUnit.CubicMeter) => new Volume(_value * 1000, VolumeUnit.CubicMeter),
                (VolumeUnit.MegausGallon, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(473176473, 125000), VolumeUnit.CubicMeter),
                (VolumeUnit.MetricCup, VolumeUnit.CubicMeter) => new Volume(_value / 4000, VolumeUnit.CubicMeter),
                (VolumeUnit.MetricTeaspoon, VolumeUnit.CubicMeter) => new Volume(_value / 200000, VolumeUnit.CubicMeter),
                (VolumeUnit.Microliter, VolumeUnit.CubicMeter) => new Volume(_value / 1000000000, VolumeUnit.CubicMeter),
                (VolumeUnit.Milliliter, VolumeUnit.CubicMeter) => new Volume(_value / 1000000, VolumeUnit.CubicMeter),
                (VolumeUnit.Nanoliter, VolumeUnit.CubicMeter) => new Volume(_value / 1000000000000, VolumeUnit.CubicMeter),
                (VolumeUnit.OilBarrel, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(9936705933, 62500000000), VolumeUnit.CubicMeter),
                (VolumeUnit.UkTablespoon, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(3, 200000), VolumeUnit.CubicMeter),
                (VolumeUnit.UsBeerBarrel, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(14668470663, 125000000000), VolumeUnit.CubicMeter),
                (VolumeUnit.UsCustomaryCup, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(473176473, 2000000000000), VolumeUnit.CubicMeter),
                (VolumeUnit.UsGallon, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(473176473, 125000000000), VolumeUnit.CubicMeter),
                (VolumeUnit.UsLegalCup, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(3, 12500), VolumeUnit.CubicMeter),
                (VolumeUnit.UsOunce, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(473176473, 16000000000000), VolumeUnit.CubicMeter),
                (VolumeUnit.UsPint, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(473176473, 1000000000000), VolumeUnit.CubicMeter),
                (VolumeUnit.UsQuart, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(473176473, 500000000000), VolumeUnit.CubicMeter),
                (VolumeUnit.UsTablespoon, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(473176473, 32000000000000), VolumeUnit.CubicMeter),
                (VolumeUnit.UsTeaspoon, VolumeUnit.CubicMeter) => new Volume(_value * new QuantityValue(157725491, 32000000000000), VolumeUnit.CubicMeter),

                // BaseUnit -> VolumeUnit
                (VolumeUnit.CubicMeter, VolumeUnit.AcreFoot) => new Volume(_value * new QuantityValue(48828125, 60228605349), VolumeUnit.AcreFoot),
                (VolumeUnit.CubicMeter, VolumeUnit.AuTablespoon) => new Volume(_value * 50000, VolumeUnit.AuTablespoon),
                (VolumeUnit.CubicMeter, VolumeUnit.BoardFoot) => new Volume(_value * new QuantityValue(7812500000, 18435447), VolumeUnit.BoardFoot),
                (VolumeUnit.CubicMeter, VolumeUnit.Centiliter) => new Volume(_value * 100000, VolumeUnit.Centiliter),
                (VolumeUnit.CubicMeter, VolumeUnit.CubicCentimeter) => new Volume(_value * 1000000, VolumeUnit.CubicCentimeter),
                (VolumeUnit.CubicMeter, VolumeUnit.CubicDecimeter) => new Volume(_value * 1000, VolumeUnit.CubicDecimeter),
                (VolumeUnit.CubicMeter, VolumeUnit.CubicFoot) => new Volume(_value * new QuantityValue(1953125000, 55306341), VolumeUnit.CubicFoot),
                (VolumeUnit.CubicMeter, VolumeUnit.CubicHectometer) => new Volume(_value / 1000000, VolumeUnit.CubicHectometer),
                (VolumeUnit.CubicMeter, VolumeUnit.CubicInch) => new Volume(_value * new QuantityValue(125000000000, 2048383), VolumeUnit.CubicInch),
                (VolumeUnit.CubicMeter, VolumeUnit.CubicKilometer) => new Volume(_value / 1000000000, VolumeUnit.CubicKilometer),
                (VolumeUnit.CubicMeter, VolumeUnit.CubicMicrometer) => new Volume(_value * 1000000000000000000, VolumeUnit.CubicMicrometer),
                (VolumeUnit.CubicMeter, VolumeUnit.CubicMile) => new Volume(_value * new QuantityValue(1953125, 8140980127813632), VolumeUnit.CubicMile),
                (VolumeUnit.CubicMeter, VolumeUnit.CubicMillimeter) => new Volume(_value * 1000000000, VolumeUnit.CubicMillimeter),
                (VolumeUnit.CubicMeter, VolumeUnit.CubicYard) => new Volume(_value * new QuantityValue(1953125000, 1493271207), VolumeUnit.CubicYard),
                (VolumeUnit.CubicMeter, VolumeUnit.Decaliter) => new Volume(_value * 100, VolumeUnit.Decaliter),
                (VolumeUnit.CubicMeter, VolumeUnit.DecausGallon) => new Volume(_value * new QuantityValue(12500000000, 473176473), VolumeUnit.DecausGallon),
                (VolumeUnit.CubicMeter, VolumeUnit.Deciliter) => new Volume(_value * 10000, VolumeUnit.Deciliter),
                (VolumeUnit.CubicMeter, VolumeUnit.DeciusGallon) => new Volume(_value * new QuantityValue(1250000000000, 473176473), VolumeUnit.DeciusGallon),
                (VolumeUnit.CubicMeter, VolumeUnit.HectocubicFoot) => new Volume(_value * new QuantityValue(19531250, 55306341), VolumeUnit.HectocubicFoot),
                (VolumeUnit.CubicMeter, VolumeUnit.HectocubicMeter) => new Volume(_value / 100, VolumeUnit.HectocubicMeter),
                (VolumeUnit.CubicMeter, VolumeUnit.Hectoliter) => new Volume(_value * 10, VolumeUnit.Hectoliter),
                (VolumeUnit.CubicMeter, VolumeUnit.HectousGallon) => new Volume(_value * new QuantityValue(1250000000, 473176473), VolumeUnit.HectousGallon),
                (VolumeUnit.CubicMeter, VolumeUnit.ImperialBeerBarrel) => new Volume(_value * new QuantityValue(25000000, 4091481), VolumeUnit.ImperialBeerBarrel),
                (VolumeUnit.CubicMeter, VolumeUnit.ImperialGallon) => new Volume(_value * new QuantityValue(100000000, 454609), VolumeUnit.ImperialGallon),
                (VolumeUnit.CubicMeter, VolumeUnit.ImperialOunce) => new Volume(_value * new QuantityValue(16000000000, 454609), VolumeUnit.ImperialOunce),
                (VolumeUnit.CubicMeter, VolumeUnit.ImperialPint) => new Volume(_value * new QuantityValue(800000000, 454609), VolumeUnit.ImperialPint),
                (VolumeUnit.CubicMeter, VolumeUnit.ImperialQuart) => new Volume(_value * new QuantityValue(400000000, 454609), VolumeUnit.ImperialQuart),
                (VolumeUnit.CubicMeter, VolumeUnit.KilocubicFoot) => new Volume(_value * new QuantityValue(1953125, 55306341), VolumeUnit.KilocubicFoot),
                (VolumeUnit.CubicMeter, VolumeUnit.KilocubicMeter) => new Volume(_value / 1000, VolumeUnit.KilocubicMeter),
                (VolumeUnit.CubicMeter, VolumeUnit.KiloimperialGallon) => new Volume(_value * new QuantityValue(100000, 454609), VolumeUnit.KiloimperialGallon),
                (VolumeUnit.CubicMeter, VolumeUnit.Kiloliter) => new Volume(_value, VolumeUnit.Kiloliter),
                (VolumeUnit.CubicMeter, VolumeUnit.KilousGallon) => new Volume(_value * new QuantityValue(125000000, 473176473), VolumeUnit.KilousGallon),
                (VolumeUnit.CubicMeter, VolumeUnit.Liter) => new Volume(_value * 1000, VolumeUnit.Liter),
                (VolumeUnit.CubicMeter, VolumeUnit.MegacubicFoot) => new Volume(_value * new QuantityValue(15625, 442450728), VolumeUnit.MegacubicFoot),
                (VolumeUnit.CubicMeter, VolumeUnit.MegaimperialGallon) => new Volume(_value * new QuantityValue(100, 454609), VolumeUnit.MegaimperialGallon),
                (VolumeUnit.CubicMeter, VolumeUnit.Megaliter) => new Volume(_value / 1000, VolumeUnit.Megaliter),
                (VolumeUnit.CubicMeter, VolumeUnit.MegausGallon) => new Volume(_value * new QuantityValue(125000, 473176473), VolumeUnit.MegausGallon),
                (VolumeUnit.CubicMeter, VolumeUnit.MetricCup) => new Volume(_value * 4000, VolumeUnit.MetricCup),
                (VolumeUnit.CubicMeter, VolumeUnit.MetricTeaspoon) => new Volume(_value * 200000, VolumeUnit.MetricTeaspoon),
                (VolumeUnit.CubicMeter, VolumeUnit.Microliter) => new Volume(_value * 1000000000, VolumeUnit.Microliter),
                (VolumeUnit.CubicMeter, VolumeUnit.Milliliter) => new Volume(_value * 1000000, VolumeUnit.Milliliter),
                (VolumeUnit.CubicMeter, VolumeUnit.Nanoliter) => new Volume(_value * 1000000000000, VolumeUnit.Nanoliter),
                (VolumeUnit.CubicMeter, VolumeUnit.OilBarrel) => new Volume(_value * new QuantityValue(62500000000, 9936705933), VolumeUnit.OilBarrel),
                (VolumeUnit.CubicMeter, VolumeUnit.UkTablespoon) => new Volume(_value * new QuantityValue(200000, 3), VolumeUnit.UkTablespoon),
                (VolumeUnit.CubicMeter, VolumeUnit.UsBeerBarrel) => new Volume(_value * new QuantityValue(125000000000, 14668470663), VolumeUnit.UsBeerBarrel),
                (VolumeUnit.CubicMeter, VolumeUnit.UsCustomaryCup) => new Volume(_value * new QuantityValue(2000000000000, 473176473), VolumeUnit.UsCustomaryCup),
                (VolumeUnit.CubicMeter, VolumeUnit.UsGallon) => new Volume(_value * new QuantityValue(125000000000, 473176473), VolumeUnit.UsGallon),
                (VolumeUnit.CubicMeter, VolumeUnit.UsLegalCup) => new Volume(_value * new QuantityValue(12500, 3), VolumeUnit.UsLegalCup),
                (VolumeUnit.CubicMeter, VolumeUnit.UsOunce) => new Volume(_value * new QuantityValue(16000000000000, 473176473), VolumeUnit.UsOunce),
                (VolumeUnit.CubicMeter, VolumeUnit.UsPint) => new Volume(_value * new QuantityValue(1000000000000, 473176473), VolumeUnit.UsPint),
                (VolumeUnit.CubicMeter, VolumeUnit.UsQuart) => new Volume(_value * new QuantityValue(500000000000, 473176473), VolumeUnit.UsQuart),
                (VolumeUnit.CubicMeter, VolumeUnit.UsTablespoon) => new Volume(_value * new QuantityValue(32000000000000, 473176473), VolumeUnit.UsTablespoon),
                (VolumeUnit.CubicMeter, VolumeUnit.UsTeaspoon) => new Volume(_value * new QuantityValue(32000000000000, 157725491), VolumeUnit.UsTeaspoon),

                _ => null
            };

            if (convertedOrNull is null)
            {
                converted = default;
                return false;
            }

            converted = convertedOrNull.Value;
            return true;
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if (!(unit is VolumeUnit typedUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(VolumeUnit)} is supported.", nameof(unit));

            return ToUnit(typedUnit, DefaultConversionFunctions);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public Volume ToUnit(UnitSystem unitSystem)
        {
            if (unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if (firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<VolumeUnit> IQuantity<VolumeUnit>.ToUnit(VolumeUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<VolumeUnit> IQuantity<VolumeUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public string ToString(IFormatProvider? provider)
        {
            return ToString("g", provider);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentCulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string? format)
        {
            return ToString(format, CultureInfo.CurrentCulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentCulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string? format, IFormatProvider? provider)
        {
            return QuantityFormatter.Format<VolumeUnit>(this, format, provider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider? provider)
        {
            throw new InvalidCastException($"Converting {typeof(Volume)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider? provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider? provider)
        {
            throw new InvalidCastException($"Converting {typeof(Volume)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider? provider)
        {
            throw new InvalidCastException($"Converting {typeof(Volume)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider? provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider? provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider? provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider? provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider? provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider? provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider? provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider? provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider? provider)
        {
            if (conversionType == typeof(Volume))
                return this;
            else if (conversionType == typeof(VolumeUnit))
                return Unit;
            else if (conversionType == typeof(QuantityInfo))
                return Volume.Info;
            else if (conversionType == typeof(BaseDimensions))
                return Volume.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(Volume)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider? provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider? provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider? provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
