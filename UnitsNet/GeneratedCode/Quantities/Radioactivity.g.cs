//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using UnitsNet.Units;
using System.Numerics;

#nullable enable

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Amount of ionizing radiation released when an element spontaneously emits energy as a result of the radioactive decay of an unstable atom per unit time.
    /// </summary>
    [DataContract]
    [DebuggerTypeProxy(typeof(QuantityDisplay))]
    public readonly partial struct Radioactivity :
        IArithmeticQuantity<Radioactivity, RadioactivityUnit>,
        IComparable,
        IComparable<Radioactivity>,
        IConvertible,
        IEquatable<Radioactivity>,
        IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Value", Order = 1, EmitDefaultValue = false)]
        private readonly QuantityValue _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Unit", Order = 2, EmitDefaultValue = false)]
        private readonly RadioactivityUnit? _unit;

        static Radioactivity()
        {
            BaseDimensions = new BaseDimensions(0, 0, -1, 0, 0, 0, 0);
            BaseUnit = RadioactivityUnit.Becquerel;
            Units = Enum.GetValues(typeof(RadioactivityUnit)).Cast<RadioactivityUnit>().ToArray();
            Zero = new Radioactivity(0, BaseUnit);
            Info = new QuantityInfo<RadioactivityUnit>("Radioactivity",
                new UnitInfo<RadioactivityUnit>[]
                {
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Becquerel, "Becquerels", new BaseUnits(time: DurationUnit.Second), "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Curie, "Curies", new BaseUnits(time: DurationUnit.Second), "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Exabecquerel, "Exabecquerels", BaseUnits.Undefined, "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Gigabecquerel, "Gigabecquerels", BaseUnits.Undefined, "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Gigacurie, "Gigacuries", BaseUnits.Undefined, "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Gigarutherford, "Gigarutherfords", BaseUnits.Undefined, "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Kilobecquerel, "Kilobecquerels", BaseUnits.Undefined, "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Kilocurie, "Kilocuries", BaseUnits.Undefined, "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Kilorutherford, "Kilorutherfords", BaseUnits.Undefined, "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Megabecquerel, "Megabecquerels", BaseUnits.Undefined, "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Megacurie, "Megacuries", BaseUnits.Undefined, "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Megarutherford, "Megarutherfords", BaseUnits.Undefined, "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Microbecquerel, "Microbecquerels", BaseUnits.Undefined, "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Microcurie, "Microcuries", BaseUnits.Undefined, "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Microrutherford, "Microrutherfords", BaseUnits.Undefined, "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Millibecquerel, "Millibecquerels", BaseUnits.Undefined, "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Millicurie, "Millicuries", BaseUnits.Undefined, "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Millirutherford, "Millirutherfords", BaseUnits.Undefined, "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Nanobecquerel, "Nanobecquerels", BaseUnits.Undefined, "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Nanocurie, "Nanocuries", BaseUnits.Undefined, "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Nanorutherford, "Nanorutherfords", BaseUnits.Undefined, "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Petabecquerel, "Petabecquerels", BaseUnits.Undefined, "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Picobecquerel, "Picobecquerels", BaseUnits.Undefined, "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Picocurie, "Picocuries", BaseUnits.Undefined, "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Picorutherford, "Picorutherfords", BaseUnits.Undefined, "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Rutherford, "Rutherfords", new BaseUnits(time: DurationUnit.Second), "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Terabecquerel, "Terabecquerels", BaseUnits.Undefined, "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Teracurie, "Teracuries", BaseUnits.Undefined, "Radioactivity"),
                    new UnitInfo<RadioactivityUnit>(RadioactivityUnit.Terarutherford, "Terarutherfords", BaseUnits.Undefined, "Radioactivity"),
                },
                BaseUnit, Zero, BaseDimensions);

            DefaultConversionFunctions = new UnitConverter();
            RegisterDefaultConversions(DefaultConversionFunctions);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public Radioactivity(QuantityValue value, RadioactivityUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public Radioactivity(QuantityValue value, UnitSystem unitSystem)
        {
            if (unitSystem is null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault();

            _value = value;
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <summary>
        ///     The <see cref="UnitConverter" /> containing the default generated conversion functions for <see cref="Radioactivity" /> instances.
        /// </summary>
        public static UnitConverter DefaultConversionFunctions { get; }

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<RadioactivityUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Radioactivity, which is Becquerel. All conversions go via this value.
        /// </summary>
        public static RadioactivityUnit BaseUnit { get; }

        /// <summary>
        ///     All units of measurement for the Radioactivity quantity.
        /// </summary>
        public static RadioactivityUnit[] Units { get; }

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Becquerel.
        /// </summary>
        public static Radioactivity Zero { get; }

        /// <inheritdoc cref="Zero"/>
        public static Radioactivity AdditiveIdentity => Zero;

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public QuantityValue Value => _value;

        /// <inheritdoc />
        QuantityValue IQuantity.Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public RadioactivityUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<RadioactivityUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Radioactivity.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Becquerel"/>
        /// </summary>
        public QuantityValue Becquerels => As(RadioactivityUnit.Becquerel);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Curie"/>
        /// </summary>
        public QuantityValue Curies => As(RadioactivityUnit.Curie);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Exabecquerel"/>
        /// </summary>
        public QuantityValue Exabecquerels => As(RadioactivityUnit.Exabecquerel);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Gigabecquerel"/>
        /// </summary>
        public QuantityValue Gigabecquerels => As(RadioactivityUnit.Gigabecquerel);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Gigacurie"/>
        /// </summary>
        public QuantityValue Gigacuries => As(RadioactivityUnit.Gigacurie);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Gigarutherford"/>
        /// </summary>
        public QuantityValue Gigarutherfords => As(RadioactivityUnit.Gigarutherford);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Kilobecquerel"/>
        /// </summary>
        public QuantityValue Kilobecquerels => As(RadioactivityUnit.Kilobecquerel);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Kilocurie"/>
        /// </summary>
        public QuantityValue Kilocuries => As(RadioactivityUnit.Kilocurie);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Kilorutherford"/>
        /// </summary>
        public QuantityValue Kilorutherfords => As(RadioactivityUnit.Kilorutherford);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Megabecquerel"/>
        /// </summary>
        public QuantityValue Megabecquerels => As(RadioactivityUnit.Megabecquerel);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Megacurie"/>
        /// </summary>
        public QuantityValue Megacuries => As(RadioactivityUnit.Megacurie);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Megarutherford"/>
        /// </summary>
        public QuantityValue Megarutherfords => As(RadioactivityUnit.Megarutherford);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Microbecquerel"/>
        /// </summary>
        public QuantityValue Microbecquerels => As(RadioactivityUnit.Microbecquerel);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Microcurie"/>
        /// </summary>
        public QuantityValue Microcuries => As(RadioactivityUnit.Microcurie);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Microrutherford"/>
        /// </summary>
        public QuantityValue Microrutherfords => As(RadioactivityUnit.Microrutherford);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Millibecquerel"/>
        /// </summary>
        public QuantityValue Millibecquerels => As(RadioactivityUnit.Millibecquerel);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Millicurie"/>
        /// </summary>
        public QuantityValue Millicuries => As(RadioactivityUnit.Millicurie);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Millirutherford"/>
        /// </summary>
        public QuantityValue Millirutherfords => As(RadioactivityUnit.Millirutherford);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Nanobecquerel"/>
        /// </summary>
        public QuantityValue Nanobecquerels => As(RadioactivityUnit.Nanobecquerel);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Nanocurie"/>
        /// </summary>
        public QuantityValue Nanocuries => As(RadioactivityUnit.Nanocurie);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Nanorutherford"/>
        /// </summary>
        public QuantityValue Nanorutherfords => As(RadioactivityUnit.Nanorutherford);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Petabecquerel"/>
        /// </summary>
        public QuantityValue Petabecquerels => As(RadioactivityUnit.Petabecquerel);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Picobecquerel"/>
        /// </summary>
        public QuantityValue Picobecquerels => As(RadioactivityUnit.Picobecquerel);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Picocurie"/>
        /// </summary>
        public QuantityValue Picocuries => As(RadioactivityUnit.Picocurie);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Picorutherford"/>
        /// </summary>
        public QuantityValue Picorutherfords => As(RadioactivityUnit.Picorutherford);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Rutherford"/>
        /// </summary>
        public QuantityValue Rutherfords => As(RadioactivityUnit.Rutherford);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Terabecquerel"/>
        /// </summary>
        public QuantityValue Terabecquerels => As(RadioactivityUnit.Terabecquerel);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Teracurie"/>
        /// </summary>
        public QuantityValue Teracuries => As(RadioactivityUnit.Teracurie);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadioactivityUnit.Terarutherford"/>
        /// </summary>
        public QuantityValue Terarutherfords => As(RadioactivityUnit.Terarutherford);

        #endregion

        #region Static Methods

        /// <summary>
        /// Registers the default conversion functions in the given <see cref="UnitConverter"/> instance.
        /// </summary>
        /// <param name="unitConverter">The <see cref="UnitConverter"/> to register the default conversion functions in.</param>
        internal static void RegisterDefaultConversions(UnitConverter unitConverter)
        {
            // Register in unit converter: RadioactivityUnit -> BaseUnit
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Curie, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Exabecquerel, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Gigabecquerel, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Gigacurie, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Gigarutherford, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Kilobecquerel, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Kilocurie, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Kilorutherford, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Megabecquerel, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Megacurie, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Megarutherford, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Microbecquerel, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Microcurie, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Microrutherford, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Millibecquerel, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Millicurie, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Millirutherford, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Nanobecquerel, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Nanocurie, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Nanorutherford, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Petabecquerel, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Picobecquerel, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Picocurie, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Picorutherford, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Rutherford, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Terabecquerel, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Teracurie, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Terarutherford, RadioactivityUnit.Becquerel, quantity => quantity.ToUnit(RadioactivityUnit.Becquerel));

            // Register in unit converter: BaseUnit <-> BaseUnit
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Becquerel, quantity => quantity);

            // Register in unit converter: BaseUnit -> RadioactivityUnit
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Curie, quantity => quantity.ToUnit(RadioactivityUnit.Curie));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Exabecquerel, quantity => quantity.ToUnit(RadioactivityUnit.Exabecquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Gigabecquerel, quantity => quantity.ToUnit(RadioactivityUnit.Gigabecquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Gigacurie, quantity => quantity.ToUnit(RadioactivityUnit.Gigacurie));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Gigarutherford, quantity => quantity.ToUnit(RadioactivityUnit.Gigarutherford));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Kilobecquerel, quantity => quantity.ToUnit(RadioactivityUnit.Kilobecquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Kilocurie, quantity => quantity.ToUnit(RadioactivityUnit.Kilocurie));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Kilorutherford, quantity => quantity.ToUnit(RadioactivityUnit.Kilorutherford));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Megabecquerel, quantity => quantity.ToUnit(RadioactivityUnit.Megabecquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Megacurie, quantity => quantity.ToUnit(RadioactivityUnit.Megacurie));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Megarutherford, quantity => quantity.ToUnit(RadioactivityUnit.Megarutherford));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Microbecquerel, quantity => quantity.ToUnit(RadioactivityUnit.Microbecquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Microcurie, quantity => quantity.ToUnit(RadioactivityUnit.Microcurie));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Microrutherford, quantity => quantity.ToUnit(RadioactivityUnit.Microrutherford));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Millibecquerel, quantity => quantity.ToUnit(RadioactivityUnit.Millibecquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Millicurie, quantity => quantity.ToUnit(RadioactivityUnit.Millicurie));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Millirutherford, quantity => quantity.ToUnit(RadioactivityUnit.Millirutherford));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Nanobecquerel, quantity => quantity.ToUnit(RadioactivityUnit.Nanobecquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Nanocurie, quantity => quantity.ToUnit(RadioactivityUnit.Nanocurie));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Nanorutherford, quantity => quantity.ToUnit(RadioactivityUnit.Nanorutherford));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Petabecquerel, quantity => quantity.ToUnit(RadioactivityUnit.Petabecquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Picobecquerel, quantity => quantity.ToUnit(RadioactivityUnit.Picobecquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Picocurie, quantity => quantity.ToUnit(RadioactivityUnit.Picocurie));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Picorutherford, quantity => quantity.ToUnit(RadioactivityUnit.Picorutherford));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Rutherford, quantity => quantity.ToUnit(RadioactivityUnit.Rutherford));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Terabecquerel, quantity => quantity.ToUnit(RadioactivityUnit.Terabecquerel));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Teracurie, quantity => quantity.ToUnit(RadioactivityUnit.Teracurie));
            unitConverter.SetConversionFunction<Radioactivity>(RadioactivityUnit.Becquerel, RadioactivityUnit.Terarutherford, quantity => quantity.ToUnit(RadioactivityUnit.Terarutherford));
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(RadioactivityUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static string GetAbbreviation(RadioactivityUnit unit, IFormatProvider? provider)
        {
            return UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Becquerel"/>.
        /// </summary>
        public static Radioactivity FromBecquerels(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Becquerel);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Curie"/>.
        /// </summary>
        public static Radioactivity FromCuries(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Curie);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Exabecquerel"/>.
        /// </summary>
        public static Radioactivity FromExabecquerels(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Exabecquerel);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Gigabecquerel"/>.
        /// </summary>
        public static Radioactivity FromGigabecquerels(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Gigabecquerel);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Gigacurie"/>.
        /// </summary>
        public static Radioactivity FromGigacuries(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Gigacurie);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Gigarutherford"/>.
        /// </summary>
        public static Radioactivity FromGigarutherfords(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Gigarutherford);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Kilobecquerel"/>.
        /// </summary>
        public static Radioactivity FromKilobecquerels(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Kilobecquerel);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Kilocurie"/>.
        /// </summary>
        public static Radioactivity FromKilocuries(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Kilocurie);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Kilorutherford"/>.
        /// </summary>
        public static Radioactivity FromKilorutherfords(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Kilorutherford);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Megabecquerel"/>.
        /// </summary>
        public static Radioactivity FromMegabecquerels(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Megabecquerel);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Megacurie"/>.
        /// </summary>
        public static Radioactivity FromMegacuries(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Megacurie);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Megarutherford"/>.
        /// </summary>
        public static Radioactivity FromMegarutherfords(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Megarutherford);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Microbecquerel"/>.
        /// </summary>
        public static Radioactivity FromMicrobecquerels(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Microbecquerel);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Microcurie"/>.
        /// </summary>
        public static Radioactivity FromMicrocuries(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Microcurie);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Microrutherford"/>.
        /// </summary>
        public static Radioactivity FromMicrorutherfords(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Microrutherford);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Millibecquerel"/>.
        /// </summary>
        public static Radioactivity FromMillibecquerels(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Millibecquerel);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Millicurie"/>.
        /// </summary>
        public static Radioactivity FromMillicuries(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Millicurie);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Millirutherford"/>.
        /// </summary>
        public static Radioactivity FromMillirutherfords(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Millirutherford);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Nanobecquerel"/>.
        /// </summary>
        public static Radioactivity FromNanobecquerels(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Nanobecquerel);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Nanocurie"/>.
        /// </summary>
        public static Radioactivity FromNanocuries(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Nanocurie);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Nanorutherford"/>.
        /// </summary>
        public static Radioactivity FromNanorutherfords(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Nanorutherford);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Petabecquerel"/>.
        /// </summary>
        public static Radioactivity FromPetabecquerels(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Petabecquerel);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Picobecquerel"/>.
        /// </summary>
        public static Radioactivity FromPicobecquerels(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Picobecquerel);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Picocurie"/>.
        /// </summary>
        public static Radioactivity FromPicocuries(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Picocurie);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Picorutherford"/>.
        /// </summary>
        public static Radioactivity FromPicorutherfords(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Picorutherford);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Rutherford"/>.
        /// </summary>
        public static Radioactivity FromRutherfords(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Rutherford);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Terabecquerel"/>.
        /// </summary>
        public static Radioactivity FromTerabecquerels(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Terabecquerel);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Teracurie"/>.
        /// </summary>
        public static Radioactivity FromTeracuries(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Teracurie);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Terarutherford"/>.
        /// </summary>
        public static Radioactivity FromTerarutherfords(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Terarutherford);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="RadioactivityUnit" /> to <see cref="Radioactivity" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Radioactivity unit value.</returns>
        public static Radioactivity From(QuantityValue value, RadioactivityUnit fromUnit)
        {
            return new Radioactivity(value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Radioactivity Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static Radioactivity Parse(string str, IFormatProvider? provider)
        {
            return UnitsNetSetup.Default.QuantityParser.Parse<Radioactivity, RadioactivityUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        public static bool TryParse(string? str, out Radioactivity result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParse(string? str, IFormatProvider? provider, out Radioactivity result)
        {
            return UnitsNetSetup.Default.QuantityParser.TryParse<Radioactivity, RadioactivityUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static RadioactivityUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static RadioactivityUnit ParseUnit(string str, IFormatProvider? provider)
        {
            return UnitsNetSetup.Default.UnitParser.Parse<RadioactivityUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.RadioactivityUnit)"/>
        public static bool TryParseUnit(string str, out RadioactivityUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider? provider, out RadioactivityUnit unit)
        {
            return UnitsNetSetup.Default.UnitParser.TryParse<RadioactivityUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static Radioactivity operator -(Radioactivity right)
        {
            return new Radioactivity(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Radioactivity"/> from adding two <see cref="Radioactivity"/>.</summary>
        public static Radioactivity operator +(Radioactivity left, Radioactivity right)
        {
            return new Radioactivity(left.Value + right.ToUnit(left.Unit).Value, left.Unit);
        }

        /// <summary>Get <see cref="Radioactivity"/> from subtracting two <see cref="Radioactivity"/>.</summary>
        public static Radioactivity operator -(Radioactivity left, Radioactivity right)
        {
            return new Radioactivity(left.Value - right.ToUnit(left.Unit).Value, left.Unit);
        }

        /// <summary>Get <see cref="Radioactivity"/> from multiplying value and <see cref="Radioactivity"/>.</summary>
        public static Radioactivity operator *(QuantityValue left, Radioactivity right)
        {
            return new Radioactivity(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Radioactivity"/> from multiplying value and <see cref="Radioactivity"/>.</summary>
        public static Radioactivity operator *(Radioactivity left, QuantityValue right)
        {
            return new Radioactivity(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="Radioactivity"/> from dividing <see cref="Radioactivity"/> by value.</summary>
        public static Radioactivity operator /(Radioactivity left, QuantityValue right)
        {
            return new Radioactivity(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="Radioactivity"/> by <see cref="Radioactivity"/>.</summary>
        public static QuantityValue operator /(Radioactivity left, Radioactivity right)
        {
            return left.Becquerels / right.Becquerels;
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(Radioactivity left, Radioactivity right)
        {
            return left.Value <= right.ToUnit(left.Unit).Value;
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(Radioactivity left, Radioactivity right)
        {
            return left.Value >= right.ToUnit(left.Unit).Value;
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(Radioactivity left, Radioactivity right)
        {
            return left.Value < right.ToUnit(left.Unit).Value;
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(Radioactivity left, Radioactivity right)
        {
            return left.Value > right.ToUnit(left.Unit).Value;
        }

        /// <summary>Indicates strict equality of two <see cref="Radioactivity"/> quantities.</summary>
        public static bool operator ==(Radioactivity left, Radioactivity right)
        {
            return left.Equals(right);
        }

        /// <summary>Indicates strict inequality of two <see cref="Radioactivity"/> quantities.</summary>
        public static bool operator !=(Radioactivity left, Radioactivity right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="Radioactivity"/> quantities.</summary>
        public override bool Equals(object? obj)
        {
            if (obj is null || !(obj is Radioactivity otherQuantity))
                return false;

            return Equals(otherQuantity);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="Radioactivity"/> quantities.</summary>
        public bool Equals(Radioactivity other)
        {
            return _value.Equals(other.As(this.Unit));
        }

        /// <summary>Compares the current <see cref="Radioactivity"/> with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other when converted to the same unit.</summary>
        /// <param name="obj">An object to compare with this instance.</param>
        /// <exception cref="T:System.ArgumentException">
        ///    <paramref name="obj" /> is not the same type as this instance.
        /// </exception>
        /// <returns>A value that indicates the relative order of the quantities being compared. The return value has these meanings:
        ///     <list type="table">
        ///         <listheader><term> Value</term><description> Meaning</description></listheader>
        ///         <item><term> Less than zero</term><description> This instance precedes <paramref name="obj" /> in the sort order.</description></item>
        ///         <item><term> Zero</term><description> This instance occurs in the same position in the sort order as <paramref name="obj" />.</description></item>
        ///         <item><term> Greater than zero</term><description> This instance follows <paramref name="obj" /> in the sort order.</description></item>
        ///     </list>
        /// </returns>
        public int CompareTo(object? obj)
        {
            if (obj is null) throw new ArgumentNullException(nameof(obj));
            if (!(obj is Radioactivity otherQuantity)) throw new ArgumentException("Expected type Radioactivity.", nameof(obj));

            return CompareTo(otherQuantity);
        }

        /// <summary>Compares the current <see cref="Radioactivity"/> with another <see cref="Radioactivity"/> and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other when converted to the same unit.</summary>
        /// <param name="other">A quantity to compare with this instance.</param>
        /// <returns>A value that indicates the relative order of the quantities being compared. The return value has these meanings:
        ///     <list type="table">
        ///         <listheader><term> Value</term><description> Meaning</description></listheader>
        ///         <item><term> Less than zero</term><description> This instance precedes <paramref name="other" /> in the sort order.</description></item>
        ///         <item><term> Zero</term><description> This instance occurs in the same position in the sort order as <paramref name="other" />.</description></item>
        ///         <item><term> Greater than zero</term><description> This instance follows <paramref name="other" /> in the sort order.</description></item>
        ///     </list>
        /// </returns>
        public int CompareTo(Radioactivity other)
        {
            return _value.CompareTo(other.ToUnit(this.Unit).Value);
        }

        /// <inheritdoc />
        public bool Equals(IQuantity? other, IQuantity tolerance)
        {
            return other is Radioactivity otherTyped
                   && (tolerance is Radioactivity toleranceTyped
                       ? true
                       : throw new ArgumentException($"Tolerance quantity ({tolerance.QuantityInfo.Name}) did not match the other quantities of type 'Radioactivity'.", nameof(tolerance)))
                   && Equals(otherTyped, toleranceTyped);
        }

        /// <inheritdoc />
        public bool Equals(Radioactivity other, Radioactivity tolerance)
        {
            return UnitsNet.Comparison.EqualsAbsolute(
                this.Value,
                other.As(this.Unit),
                tolerance: tolerance.As(this.Unit));
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Radioactivity.</returns>
        public override int GetHashCode()
        {
            var valueInBaseUnit = As(BaseUnit);
            #if NET7_0_OR_GREATER
            return HashCode.Combine(Info.Name, valueInBaseUnit);
            #else
            return new { Info.Name, valueInBaseUnit }.GetHashCode();
            #endif
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public QuantityValue As(RadioactivityUnit unit)
        {
            if (Unit == unit)
                return Value;

            return ToUnit(unit).Value;
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public QuantityValue As(UnitSystem unitSystem)
        {
            if (unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if (firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        QuantityValue IQuantity.As(Enum unit)
        {
            if (!(unit is RadioactivityUnit typedUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(RadioactivityUnit)} is supported.", nameof(unit));

            return As(typedUnit);
        }

        /// <summary>
        ///     Converts this Radioactivity to another Radioactivity with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <param name="unit">The unit to convert to.</param>
        /// <returns>A Radioactivity with the specified unit.</returns>
        public Radioactivity ToUnit(RadioactivityUnit unit)
        {
            return ToUnit(unit, DefaultConversionFunctions);
        }

        /// <summary>
        ///     Converts this <see cref="Radioactivity"/> to another <see cref="Radioactivity"/> using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <param name="unit">The unit to convert to.</param>
        /// <param name="unitConverter">The <see cref="UnitConverter"/> to use for the conversion.</param>
        /// <returns>A Radioactivity with the specified unit.</returns>
        public Radioactivity ToUnit(RadioactivityUnit unit, UnitConverter unitConverter)
        {
            if (TryToUnit(unit, out var converted))
            {
                // Try to convert using the auto-generated conversion methods.
                return converted!.Value;
            }
            else if (unitConverter.TryGetConversionFunction((typeof(Radioactivity), Unit, typeof(Radioactivity), unit), out var conversionFunction))
            {
                // See if the unit converter has an extensibility conversion registered.
                return (Radioactivity)conversionFunction(this);
            }
            else if (Unit != BaseUnit)
            {
                // Conversion to requested unit NOT found. Try to convert to BaseUnit, and then from BaseUnit to requested unit.
                var inBaseUnits = ToUnit(BaseUnit);
                return inBaseUnits.ToUnit(unit);
            }
            else
            {
                // No possible conversion
                throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        /// <summary>
        ///     Attempts to convert this <see cref="Radioactivity"/> to another <see cref="Radioactivity"/> with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <param name="unit">The unit to convert to.</param>
        /// <param name="converted">The converted <see cref="Radioactivity"/> in <paramref name="unit"/>, if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        private bool TryToUnit(RadioactivityUnit unit, [NotNullWhen(true)] out Radioactivity? converted)
        {
            if (Unit == unit)
            {
                converted = this;
                return true;
            }

            Radioactivity? convertedOrNull = (Unit, unit) switch
            {
                // RadioactivityUnit -> BaseUnit
                (RadioactivityUnit.Curie, RadioactivityUnit.Becquerel) => new Radioactivity(_value * 37000000000, RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Exabecquerel, RadioactivityUnit.Becquerel) => new Radioactivity(_value * 1000000000000000000, RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Gigabecquerel, RadioactivityUnit.Becquerel) => new Radioactivity(_value * 1000000000, RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Gigacurie, RadioactivityUnit.Becquerel) => new Radioactivity(_value * 37 * BigInteger.Pow(10, 18), RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Gigarutherford, RadioactivityUnit.Becquerel) => new Radioactivity(_value * 1000000000000000, RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Kilobecquerel, RadioactivityUnit.Becquerel) => new Radioactivity(_value * 1000, RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Kilocurie, RadioactivityUnit.Becquerel) => new Radioactivity(_value * 37000000000000, RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Kilorutherford, RadioactivityUnit.Becquerel) => new Radioactivity(_value * 1000000000, RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Megabecquerel, RadioactivityUnit.Becquerel) => new Radioactivity(_value * 1000000, RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Megacurie, RadioactivityUnit.Becquerel) => new Radioactivity(_value * 37000000000000000, RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Megarutherford, RadioactivityUnit.Becquerel) => new Radioactivity(_value * 1000000000000, RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Microbecquerel, RadioactivityUnit.Becquerel) => new Radioactivity(_value / 1000000, RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Microcurie, RadioactivityUnit.Becquerel) => new Radioactivity(_value * 37000, RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Microrutherford, RadioactivityUnit.Becquerel) => new Radioactivity(_value, RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Millibecquerel, RadioactivityUnit.Becquerel) => new Radioactivity(_value / 1000, RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Millicurie, RadioactivityUnit.Becquerel) => new Radioactivity(_value * 37000000, RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Millirutherford, RadioactivityUnit.Becquerel) => new Radioactivity(_value * 1000, RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Nanobecquerel, RadioactivityUnit.Becquerel) => new Radioactivity(_value / 1000000000, RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Nanocurie, RadioactivityUnit.Becquerel) => new Radioactivity(_value * 37, RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Nanorutherford, RadioactivityUnit.Becquerel) => new Radioactivity(_value / 1000, RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Petabecquerel, RadioactivityUnit.Becquerel) => new Radioactivity(_value * 1000000000000000, RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Picobecquerel, RadioactivityUnit.Becquerel) => new Radioactivity(_value / 1000000000000, RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Picocurie, RadioactivityUnit.Becquerel) => new Radioactivity(_value * new QuantityValue(37, 1000), RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Picorutherford, RadioactivityUnit.Becquerel) => new Radioactivity(_value / 1000000, RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Rutherford, RadioactivityUnit.Becquerel) => new Radioactivity(_value * 1000000, RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Terabecquerel, RadioactivityUnit.Becquerel) => new Radioactivity(_value * 1000000000000, RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Teracurie, RadioactivityUnit.Becquerel) => new Radioactivity(_value * 37 * BigInteger.Pow(10, 21), RadioactivityUnit.Becquerel),
                (RadioactivityUnit.Terarutherford, RadioactivityUnit.Becquerel) => new Radioactivity(_value * 1000000000000000000, RadioactivityUnit.Becquerel),

                // BaseUnit -> RadioactivityUnit
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Curie) => new Radioactivity(_value / 37000000000, RadioactivityUnit.Curie),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Exabecquerel) => new Radioactivity(_value / 1000000000000000000, RadioactivityUnit.Exabecquerel),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Gigabecquerel) => new Radioactivity(_value / 1000000000, RadioactivityUnit.Gigabecquerel),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Gigacurie) => new Radioactivity(_value / 37 / BigInteger.Pow(10, 18), RadioactivityUnit.Gigacurie),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Gigarutherford) => new Radioactivity(_value / 1000000000000000, RadioactivityUnit.Gigarutherford),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Kilobecquerel) => new Radioactivity(_value / 1000, RadioactivityUnit.Kilobecquerel),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Kilocurie) => new Radioactivity(_value / 37000000000000, RadioactivityUnit.Kilocurie),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Kilorutherford) => new Radioactivity(_value / 1000000000, RadioactivityUnit.Kilorutherford),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Megabecquerel) => new Radioactivity(_value / 1000000, RadioactivityUnit.Megabecquerel),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Megacurie) => new Radioactivity(_value / 37000000000000000, RadioactivityUnit.Megacurie),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Megarutherford) => new Radioactivity(_value / 1000000000000, RadioactivityUnit.Megarutherford),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Microbecquerel) => new Radioactivity(_value * 1000000, RadioactivityUnit.Microbecquerel),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Microcurie) => new Radioactivity(_value / 37000, RadioactivityUnit.Microcurie),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Microrutherford) => new Radioactivity(_value, RadioactivityUnit.Microrutherford),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Millibecquerel) => new Radioactivity(_value * 1000, RadioactivityUnit.Millibecquerel),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Millicurie) => new Radioactivity(_value / 37000000, RadioactivityUnit.Millicurie),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Millirutherford) => new Radioactivity(_value / 1000, RadioactivityUnit.Millirutherford),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Nanobecquerel) => new Radioactivity(_value * 1000000000, RadioactivityUnit.Nanobecquerel),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Nanocurie) => new Radioactivity(_value / 37, RadioactivityUnit.Nanocurie),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Nanorutherford) => new Radioactivity(_value * 1000, RadioactivityUnit.Nanorutherford),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Petabecquerel) => new Radioactivity(_value / 1000000000000000, RadioactivityUnit.Petabecquerel),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Picobecquerel) => new Radioactivity(_value * 1000000000000, RadioactivityUnit.Picobecquerel),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Picocurie) => new Radioactivity(_value * new QuantityValue(1000, 37), RadioactivityUnit.Picocurie),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Picorutherford) => new Radioactivity(_value * 1000000, RadioactivityUnit.Picorutherford),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Rutherford) => new Radioactivity(_value / 1000000, RadioactivityUnit.Rutherford),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Terabecquerel) => new Radioactivity(_value / 1000000000000, RadioactivityUnit.Terabecquerel),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Teracurie) => new Radioactivity(_value / 37 / BigInteger.Pow(10, 21), RadioactivityUnit.Teracurie),
                (RadioactivityUnit.Becquerel, RadioactivityUnit.Terarutherford) => new Radioactivity(_value / 1000000000000000000, RadioactivityUnit.Terarutherford),

                _ => null
            };

            if (convertedOrNull is null)
            {
                converted = default;
                return false;
            }

            converted = convertedOrNull.Value;
            return true;
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if (!(unit is RadioactivityUnit typedUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(RadioactivityUnit)} is supported.", nameof(unit));

            return ToUnit(typedUnit, DefaultConversionFunctions);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public Radioactivity ToUnit(UnitSystem unitSystem)
        {
            if (unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if (firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<RadioactivityUnit> IQuantity<RadioactivityUnit>.ToUnit(RadioactivityUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<RadioactivityUnit> IQuantity<RadioactivityUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public string ToString(IFormatProvider? provider)
        {
            return ToString("g", provider);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentCulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string? format)
        {
            return ToString(format, CultureInfo.CurrentCulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentCulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string? format, IFormatProvider? provider)
        {
            return QuantityFormatter.Format<RadioactivityUnit>(this, format, provider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider? provider)
        {
            throw new InvalidCastException($"Converting {typeof(Radioactivity)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider? provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider? provider)
        {
            throw new InvalidCastException($"Converting {typeof(Radioactivity)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider? provider)
        {
            throw new InvalidCastException($"Converting {typeof(Radioactivity)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider? provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider? provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider? provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider? provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider? provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider? provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider? provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider? provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider? provider)
        {
            if (conversionType == typeof(Radioactivity))
                return this;
            else if (conversionType == typeof(RadioactivityUnit))
                return Unit;
            else if (conversionType == typeof(QuantityInfo))
                return Radioactivity.Info;
            else if (conversionType == typeof(BaseDimensions))
                return Radioactivity.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(Radioactivity)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider? provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider? provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider? provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
