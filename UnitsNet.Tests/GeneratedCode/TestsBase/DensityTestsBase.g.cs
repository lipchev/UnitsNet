//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Density.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class DensityTestsBase : QuantityTestsBase
    {
        protected abstract double CentigramsPerDeciliterInOneKilogramPerCubicMeter { get; }
        protected abstract double CentigramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double CentigramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double DecigramsPerDeciliterInOneKilogramPerCubicMeter { get; }
        protected abstract double DecigramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double DecigramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double FemtogramsPerDeciliterInOneKilogramPerCubicMeter { get; }
        protected abstract double FemtogramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double FemtogramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerCubicCentimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerCubicFootInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerCubicInchInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerCubicMeterInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerCubicMillimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerDeciliterInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double KilogramsPerCubicCentimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double KilogramsPerCubicMeterInOneKilogramPerCubicMeter { get; }
        protected abstract double KilogramsPerCubicMillimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double KilogramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double KilopoundsPerCubicFootInOneKilogramPerCubicMeter { get; }
        protected abstract double KilopoundsPerCubicInchInOneKilogramPerCubicMeter { get; }
        protected abstract double KilopoundsPerCubicYardInOneKilogramPerCubicMeter { get; }
        protected abstract double MicrogramsPerCubicMeterInOneKilogramPerCubicMeter { get; }
        protected abstract double MicrogramsPerDeciliterInOneKilogramPerCubicMeter { get; }
        protected abstract double MicrogramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double MicrogramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double MilligramsPerCubicMeterInOneKilogramPerCubicMeter { get; }
        protected abstract double MilligramsPerDeciliterInOneKilogramPerCubicMeter { get; }
        protected abstract double MilligramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double MilligramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double NanogramsPerDeciliterInOneKilogramPerCubicMeter { get; }
        protected abstract double NanogramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double NanogramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double PicogramsPerDeciliterInOneKilogramPerCubicMeter { get; }
        protected abstract double PicogramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double PicogramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double PoundsPerCubicCentimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double PoundsPerCubicFootInOneKilogramPerCubicMeter { get; }
        protected abstract double PoundsPerCubicInchInOneKilogramPerCubicMeter { get; }
        protected abstract double PoundsPerCubicMeterInOneKilogramPerCubicMeter { get; }
        protected abstract double PoundsPerCubicMillimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double PoundsPerCubicYardInOneKilogramPerCubicMeter { get; }
        protected abstract double PoundsPerImperialGallonInOneKilogramPerCubicMeter { get; }
        protected abstract double PoundsPerUSGallonInOneKilogramPerCubicMeter { get; }
        protected abstract double SlugsPerCubicCentimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double SlugsPerCubicFootInOneKilogramPerCubicMeter { get; }
        protected abstract double SlugsPerCubicInchInOneKilogramPerCubicMeter { get; }
        protected abstract double SlugsPerCubicMeterInOneKilogramPerCubicMeter { get; }
        protected abstract double SlugsPerCubicMillimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double TonnesPerCubicCentimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double TonnesPerCubicFootInOneKilogramPerCubicMeter { get; }
        protected abstract double TonnesPerCubicInchInOneKilogramPerCubicMeter { get; }
        protected abstract double TonnesPerCubicMeterInOneKilogramPerCubicMeter { get; }
        protected abstract double TonnesPerCubicMillimeterInOneKilogramPerCubicMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentigramsPerDeciliterTolerance { get { return 1e-5; } }
        protected virtual double CentigramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double CentigramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double DecigramsPerDeciliterTolerance { get { return 1e-5; } }
        protected virtual double DecigramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double DecigramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double FemtogramsPerDeciliterTolerance { get { return 1e-5; } }
        protected virtual double FemtogramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double FemtogramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerCubicCentimeterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double GramsPerCubicInchTolerance { get { return 1e-5; } }
        protected virtual double GramsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerCubicMillimeterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerDeciliterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerCubicCentimeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerCubicMillimeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsPerCubicInchTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsPerCubicYardTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerDeciliterTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerDeciliterTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double NanogramsPerDeciliterTolerance { get { return 1e-5; } }
        protected virtual double NanogramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double NanogramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double PicogramsPerDeciliterTolerance { get { return 1e-5; } }
        protected virtual double PicogramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double PicogramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerCubicCentimeterTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerCubicInchTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerCubicMillimeterTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerCubicYardTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerImperialGallonTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerUSGallonTolerance { get { return 1e-5; } }
        protected virtual double SlugsPerCubicCentimeterTolerance { get { return 1e-5; } }
        protected virtual double SlugsPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double SlugsPerCubicInchTolerance { get { return 1e-5; } }
        protected virtual double SlugsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double SlugsPerCubicMillimeterTolerance { get { return 1e-5; } }
        protected virtual double TonnesPerCubicCentimeterTolerance { get { return 1e-5; } }
        protected virtual double TonnesPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double TonnesPerCubicInchTolerance { get { return 1e-5; } }
        protected virtual double TonnesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double TonnesPerCubicMillimeterTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(DensityUnit unit)
        {
            return unit switch
            {
                DensityUnit.CentigramPerDeciliter => (CentigramsPerDeciliterInOneKilogramPerCubicMeter, CentigramsPerDeciliterTolerance),
                DensityUnit.CentigramPerLiter => (CentigramsPerLiterInOneKilogramPerCubicMeter, CentigramsPerLiterTolerance),
                DensityUnit.CentigramPerMilliliter => (CentigramsPerMilliliterInOneKilogramPerCubicMeter, CentigramsPerMilliliterTolerance),
                DensityUnit.DecigramPerDeciliter => (DecigramsPerDeciliterInOneKilogramPerCubicMeter, DecigramsPerDeciliterTolerance),
                DensityUnit.DecigramPerLiter => (DecigramsPerLiterInOneKilogramPerCubicMeter, DecigramsPerLiterTolerance),
                DensityUnit.DecigramPerMilliliter => (DecigramsPerMilliliterInOneKilogramPerCubicMeter, DecigramsPerMilliliterTolerance),
                DensityUnit.FemtogramPerDeciliter => (FemtogramsPerDeciliterInOneKilogramPerCubicMeter, FemtogramsPerDeciliterTolerance),
                DensityUnit.FemtogramPerLiter => (FemtogramsPerLiterInOneKilogramPerCubicMeter, FemtogramsPerLiterTolerance),
                DensityUnit.FemtogramPerMilliliter => (FemtogramsPerMilliliterInOneKilogramPerCubicMeter, FemtogramsPerMilliliterTolerance),
                DensityUnit.GramPerCubicCentimeter => (GramsPerCubicCentimeterInOneKilogramPerCubicMeter, GramsPerCubicCentimeterTolerance),
                DensityUnit.GramPerCubicFoot => (GramsPerCubicFootInOneKilogramPerCubicMeter, GramsPerCubicFootTolerance),
                DensityUnit.GramPerCubicInch => (GramsPerCubicInchInOneKilogramPerCubicMeter, GramsPerCubicInchTolerance),
                DensityUnit.GramPerCubicMeter => (GramsPerCubicMeterInOneKilogramPerCubicMeter, GramsPerCubicMeterTolerance),
                DensityUnit.GramPerCubicMillimeter => (GramsPerCubicMillimeterInOneKilogramPerCubicMeter, GramsPerCubicMillimeterTolerance),
                DensityUnit.GramPerDeciliter => (GramsPerDeciliterInOneKilogramPerCubicMeter, GramsPerDeciliterTolerance),
                DensityUnit.GramPerLiter => (GramsPerLiterInOneKilogramPerCubicMeter, GramsPerLiterTolerance),
                DensityUnit.GramPerMilliliter => (GramsPerMilliliterInOneKilogramPerCubicMeter, GramsPerMilliliterTolerance),
                DensityUnit.KilogramPerCubicCentimeter => (KilogramsPerCubicCentimeterInOneKilogramPerCubicMeter, KilogramsPerCubicCentimeterTolerance),
                DensityUnit.KilogramPerCubicMeter => (KilogramsPerCubicMeterInOneKilogramPerCubicMeter, KilogramsPerCubicMeterTolerance),
                DensityUnit.KilogramPerCubicMillimeter => (KilogramsPerCubicMillimeterInOneKilogramPerCubicMeter, KilogramsPerCubicMillimeterTolerance),
                DensityUnit.KilogramPerLiter => (KilogramsPerLiterInOneKilogramPerCubicMeter, KilogramsPerLiterTolerance),
                DensityUnit.KilopoundPerCubicFoot => (KilopoundsPerCubicFootInOneKilogramPerCubicMeter, KilopoundsPerCubicFootTolerance),
                DensityUnit.KilopoundPerCubicInch => (KilopoundsPerCubicInchInOneKilogramPerCubicMeter, KilopoundsPerCubicInchTolerance),
                DensityUnit.KilopoundPerCubicYard => (KilopoundsPerCubicYardInOneKilogramPerCubicMeter, KilopoundsPerCubicYardTolerance),
                DensityUnit.MicrogramPerCubicMeter => (MicrogramsPerCubicMeterInOneKilogramPerCubicMeter, MicrogramsPerCubicMeterTolerance),
                DensityUnit.MicrogramPerDeciliter => (MicrogramsPerDeciliterInOneKilogramPerCubicMeter, MicrogramsPerDeciliterTolerance),
                DensityUnit.MicrogramPerLiter => (MicrogramsPerLiterInOneKilogramPerCubicMeter, MicrogramsPerLiterTolerance),
                DensityUnit.MicrogramPerMilliliter => (MicrogramsPerMilliliterInOneKilogramPerCubicMeter, MicrogramsPerMilliliterTolerance),
                DensityUnit.MilligramPerCubicMeter => (MilligramsPerCubicMeterInOneKilogramPerCubicMeter, MilligramsPerCubicMeterTolerance),
                DensityUnit.MilligramPerDeciliter => (MilligramsPerDeciliterInOneKilogramPerCubicMeter, MilligramsPerDeciliterTolerance),
                DensityUnit.MilligramPerLiter => (MilligramsPerLiterInOneKilogramPerCubicMeter, MilligramsPerLiterTolerance),
                DensityUnit.MilligramPerMilliliter => (MilligramsPerMilliliterInOneKilogramPerCubicMeter, MilligramsPerMilliliterTolerance),
                DensityUnit.NanogramPerDeciliter => (NanogramsPerDeciliterInOneKilogramPerCubicMeter, NanogramsPerDeciliterTolerance),
                DensityUnit.NanogramPerLiter => (NanogramsPerLiterInOneKilogramPerCubicMeter, NanogramsPerLiterTolerance),
                DensityUnit.NanogramPerMilliliter => (NanogramsPerMilliliterInOneKilogramPerCubicMeter, NanogramsPerMilliliterTolerance),
                DensityUnit.PicogramPerDeciliter => (PicogramsPerDeciliterInOneKilogramPerCubicMeter, PicogramsPerDeciliterTolerance),
                DensityUnit.PicogramPerLiter => (PicogramsPerLiterInOneKilogramPerCubicMeter, PicogramsPerLiterTolerance),
                DensityUnit.PicogramPerMilliliter => (PicogramsPerMilliliterInOneKilogramPerCubicMeter, PicogramsPerMilliliterTolerance),
                DensityUnit.PoundPerCubicCentimeter => (PoundsPerCubicCentimeterInOneKilogramPerCubicMeter, PoundsPerCubicCentimeterTolerance),
                DensityUnit.PoundPerCubicFoot => (PoundsPerCubicFootInOneKilogramPerCubicMeter, PoundsPerCubicFootTolerance),
                DensityUnit.PoundPerCubicInch => (PoundsPerCubicInchInOneKilogramPerCubicMeter, PoundsPerCubicInchTolerance),
                DensityUnit.PoundPerCubicMeter => (PoundsPerCubicMeterInOneKilogramPerCubicMeter, PoundsPerCubicMeterTolerance),
                DensityUnit.PoundPerCubicMillimeter => (PoundsPerCubicMillimeterInOneKilogramPerCubicMeter, PoundsPerCubicMillimeterTolerance),
                DensityUnit.PoundPerCubicYard => (PoundsPerCubicYardInOneKilogramPerCubicMeter, PoundsPerCubicYardTolerance),
                DensityUnit.PoundPerImperialGallon => (PoundsPerImperialGallonInOneKilogramPerCubicMeter, PoundsPerImperialGallonTolerance),
                DensityUnit.PoundPerUSGallon => (PoundsPerUSGallonInOneKilogramPerCubicMeter, PoundsPerUSGallonTolerance),
                DensityUnit.SlugPerCubicCentimeter => (SlugsPerCubicCentimeterInOneKilogramPerCubicMeter, SlugsPerCubicCentimeterTolerance),
                DensityUnit.SlugPerCubicFoot => (SlugsPerCubicFootInOneKilogramPerCubicMeter, SlugsPerCubicFootTolerance),
                DensityUnit.SlugPerCubicInch => (SlugsPerCubicInchInOneKilogramPerCubicMeter, SlugsPerCubicInchTolerance),
                DensityUnit.SlugPerCubicMeter => (SlugsPerCubicMeterInOneKilogramPerCubicMeter, SlugsPerCubicMeterTolerance),
                DensityUnit.SlugPerCubicMillimeter => (SlugsPerCubicMillimeterInOneKilogramPerCubicMeter, SlugsPerCubicMillimeterTolerance),
                DensityUnit.TonnePerCubicCentimeter => (TonnesPerCubicCentimeterInOneKilogramPerCubicMeter, TonnesPerCubicCentimeterTolerance),
                DensityUnit.TonnePerCubicFoot => (TonnesPerCubicFootInOneKilogramPerCubicMeter, TonnesPerCubicFootTolerance),
                DensityUnit.TonnePerCubicInch => (TonnesPerCubicInchInOneKilogramPerCubicMeter, TonnesPerCubicInchTolerance),
                DensityUnit.TonnePerCubicMeter => (TonnesPerCubicMeterInOneKilogramPerCubicMeter, TonnesPerCubicMeterTolerance),
                DensityUnit.TonnePerCubicMillimeter => (TonnesPerCubicMillimeterInOneKilogramPerCubicMeter, TonnesPerCubicMillimeterTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { DensityUnit.CentigramPerDeciliter },
            new object[] { DensityUnit.CentigramPerLiter },
            new object[] { DensityUnit.CentigramPerMilliliter },
            new object[] { DensityUnit.DecigramPerDeciliter },
            new object[] { DensityUnit.DecigramPerLiter },
            new object[] { DensityUnit.DecigramPerMilliliter },
            new object[] { DensityUnit.FemtogramPerDeciliter },
            new object[] { DensityUnit.FemtogramPerLiter },
            new object[] { DensityUnit.FemtogramPerMilliliter },
            new object[] { DensityUnit.GramPerCubicCentimeter },
            new object[] { DensityUnit.GramPerCubicFoot },
            new object[] { DensityUnit.GramPerCubicInch },
            new object[] { DensityUnit.GramPerCubicMeter },
            new object[] { DensityUnit.GramPerCubicMillimeter },
            new object[] { DensityUnit.GramPerDeciliter },
            new object[] { DensityUnit.GramPerLiter },
            new object[] { DensityUnit.GramPerMilliliter },
            new object[] { DensityUnit.KilogramPerCubicCentimeter },
            new object[] { DensityUnit.KilogramPerCubicMeter },
            new object[] { DensityUnit.KilogramPerCubicMillimeter },
            new object[] { DensityUnit.KilogramPerLiter },
            new object[] { DensityUnit.KilopoundPerCubicFoot },
            new object[] { DensityUnit.KilopoundPerCubicInch },
            new object[] { DensityUnit.KilopoundPerCubicYard },
            new object[] { DensityUnit.MicrogramPerCubicMeter },
            new object[] { DensityUnit.MicrogramPerDeciliter },
            new object[] { DensityUnit.MicrogramPerLiter },
            new object[] { DensityUnit.MicrogramPerMilliliter },
            new object[] { DensityUnit.MilligramPerCubicMeter },
            new object[] { DensityUnit.MilligramPerDeciliter },
            new object[] { DensityUnit.MilligramPerLiter },
            new object[] { DensityUnit.MilligramPerMilliliter },
            new object[] { DensityUnit.NanogramPerDeciliter },
            new object[] { DensityUnit.NanogramPerLiter },
            new object[] { DensityUnit.NanogramPerMilliliter },
            new object[] { DensityUnit.PicogramPerDeciliter },
            new object[] { DensityUnit.PicogramPerLiter },
            new object[] { DensityUnit.PicogramPerMilliliter },
            new object[] { DensityUnit.PoundPerCubicCentimeter },
            new object[] { DensityUnit.PoundPerCubicFoot },
            new object[] { DensityUnit.PoundPerCubicInch },
            new object[] { DensityUnit.PoundPerCubicMeter },
            new object[] { DensityUnit.PoundPerCubicMillimeter },
            new object[] { DensityUnit.PoundPerCubicYard },
            new object[] { DensityUnit.PoundPerImperialGallon },
            new object[] { DensityUnit.PoundPerUSGallon },
            new object[] { DensityUnit.SlugPerCubicCentimeter },
            new object[] { DensityUnit.SlugPerCubicFoot },
            new object[] { DensityUnit.SlugPerCubicInch },
            new object[] { DensityUnit.SlugPerCubicMeter },
            new object[] { DensityUnit.SlugPerCubicMillimeter },
            new object[] { DensityUnit.TonnePerCubicCentimeter },
            new object[] { DensityUnit.TonnePerCubicFoot },
            new object[] { DensityUnit.TonnePerCubicInch },
            new object[] { DensityUnit.TonnePerCubicMeter },
            new object[] { DensityUnit.TonnePerCubicMillimeter },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Density();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(DensityUnit.KilogramPerCubicMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Density(double.PositiveInfinity, DensityUnit.KilogramPerCubicMeter));
            var exception2 = Record.Exception(() => new Density(double.NegativeInfinity, DensityUnit.KilogramPerCubicMeter));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Density(double.NaN, DensityUnit.KilogramPerCubicMeter));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Density(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            if (SupportsSIUnitSystem)
            {
                var quantity = new Density(value: 1, unitSystem: UnitSystem.SI);
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(() => new Density(value: 1, unitSystem: UnitSystem.SI));
            }
        }

        [Fact]
        public void Density_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Density(1, DensityUnit.KilogramPerCubicMeter);

            QuantityInfo<DensityUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Density.Zero, quantityInfo.Zero);
            Assert.Equal("Density", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<DensityUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void KilogramPerCubicMeterToDensityUnits()
        {
            Density kilogrampercubicmeter = Density.FromKilogramsPerCubicMeter(1);
            AssertEx.EqualTolerance(CentigramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.CentigramsPerDeciliter, CentigramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(CentigramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.CentigramsPerLiter, CentigramsPerLiterTolerance);
            AssertEx.EqualTolerance(CentigramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.CentigramsPerMilliliter, CentigramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(DecigramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.DecigramsPerDeciliter, DecigramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(DecigramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.DecigramsPerLiter, DecigramsPerLiterTolerance);
            AssertEx.EqualTolerance(DecigramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.DecigramsPerMilliliter, DecigramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(FemtogramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.FemtogramsPerDeciliter, FemtogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(FemtogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.FemtogramsPerLiter, FemtogramsPerLiterTolerance);
            AssertEx.EqualTolerance(FemtogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.FemtogramsPerMilliliter, FemtogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(GramsPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerCubicCentimeter, GramsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(GramsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerCubicFoot, GramsPerCubicFootTolerance);
            AssertEx.EqualTolerance(GramsPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerCubicInch, GramsPerCubicInchTolerance);
            AssertEx.EqualTolerance(GramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerCubicMeter, GramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(GramsPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerCubicMillimeter, GramsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(GramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerDeciliter, GramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(GramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerLiter, GramsPerLiterTolerance);
            AssertEx.EqualTolerance(GramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerMilliliter, GramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilogramsPerCubicCentimeter, KilogramsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilogramsPerCubicMillimeter, KilogramsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilogramsPerLiter, KilogramsPerLiterTolerance);
            AssertEx.EqualTolerance(KilopoundsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilopoundsPerCubicFoot, KilopoundsPerCubicFootTolerance);
            AssertEx.EqualTolerance(KilopoundsPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilopoundsPerCubicInch, KilopoundsPerCubicInchTolerance);
            AssertEx.EqualTolerance(KilopoundsPerCubicYardInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilopoundsPerCubicYard, KilopoundsPerCubicYardTolerance);
            AssertEx.EqualTolerance(MicrogramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MicrogramsPerCubicMeter, MicrogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MicrogramsPerDeciliter, MicrogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MicrogramsPerLiter, MicrogramsPerLiterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MicrogramsPerMilliliter, MicrogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(MilligramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MilligramsPerCubicMeter, MilligramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MilligramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MilligramsPerDeciliter, MilligramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(MilligramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MilligramsPerLiter, MilligramsPerLiterTolerance);
            AssertEx.EqualTolerance(MilligramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MilligramsPerMilliliter, MilligramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(NanogramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.NanogramsPerDeciliter, NanogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(NanogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.NanogramsPerLiter, NanogramsPerLiterTolerance);
            AssertEx.EqualTolerance(NanogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.NanogramsPerMilliliter, NanogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(PicogramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.PicogramsPerDeciliter, PicogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(PicogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.PicogramsPerLiter, PicogramsPerLiterTolerance);
            AssertEx.EqualTolerance(PicogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.PicogramsPerMilliliter, PicogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.PoundsPerCubicCentimeter, PoundsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.PoundsPerCubicFoot, PoundsPerCubicFootTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.PoundsPerCubicInch, PoundsPerCubicInchTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.PoundsPerCubicMeter, PoundsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.PoundsPerCubicMillimeter, PoundsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicYardInOneKilogramPerCubicMeter, kilogrampercubicmeter.PoundsPerCubicYard, PoundsPerCubicYardTolerance);
            AssertEx.EqualTolerance(PoundsPerImperialGallonInOneKilogramPerCubicMeter, kilogrampercubicmeter.PoundsPerImperialGallon, PoundsPerImperialGallonTolerance);
            AssertEx.EqualTolerance(PoundsPerUSGallonInOneKilogramPerCubicMeter, kilogrampercubicmeter.PoundsPerUSGallon, PoundsPerUSGallonTolerance);
            AssertEx.EqualTolerance(SlugsPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.SlugsPerCubicCentimeter, SlugsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(SlugsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.SlugsPerCubicFoot, SlugsPerCubicFootTolerance);
            AssertEx.EqualTolerance(SlugsPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.SlugsPerCubicInch, SlugsPerCubicInchTolerance);
            AssertEx.EqualTolerance(SlugsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.SlugsPerCubicMeter, SlugsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(SlugsPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.SlugsPerCubicMillimeter, SlugsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.TonnesPerCubicCentimeter, TonnesPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.TonnesPerCubicFoot, TonnesPerCubicFootTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.TonnesPerCubicInch, TonnesPerCubicInchTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.TonnesPerCubicMeter, TonnesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.TonnesPerCubicMillimeter, TonnesPerCubicMillimeterTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Density.From(1, DensityUnit.CentigramPerDeciliter);
            Assert.Equal(1, quantity00.CentigramsPerDeciliter);
            Assert.Equal(DensityUnit.CentigramPerDeciliter, quantity00.Unit);

            var quantity01 = Density.From(1, DensityUnit.CentigramPerLiter);
            Assert.Equal(1, quantity01.CentigramsPerLiter);
            Assert.Equal(DensityUnit.CentigramPerLiter, quantity01.Unit);

            var quantity02 = Density.From(1, DensityUnit.CentigramPerMilliliter);
            Assert.Equal(1, quantity02.CentigramsPerMilliliter);
            Assert.Equal(DensityUnit.CentigramPerMilliliter, quantity02.Unit);

            var quantity03 = Density.From(1, DensityUnit.DecigramPerDeciliter);
            Assert.Equal(1, quantity03.DecigramsPerDeciliter);
            Assert.Equal(DensityUnit.DecigramPerDeciliter, quantity03.Unit);

            var quantity04 = Density.From(1, DensityUnit.DecigramPerLiter);
            Assert.Equal(1, quantity04.DecigramsPerLiter);
            Assert.Equal(DensityUnit.DecigramPerLiter, quantity04.Unit);

            var quantity05 = Density.From(1, DensityUnit.DecigramPerMilliliter);
            Assert.Equal(1, quantity05.DecigramsPerMilliliter);
            Assert.Equal(DensityUnit.DecigramPerMilliliter, quantity05.Unit);

            var quantity06 = Density.From(1, DensityUnit.FemtogramPerDeciliter);
            Assert.Equal(1, quantity06.FemtogramsPerDeciliter);
            Assert.Equal(DensityUnit.FemtogramPerDeciliter, quantity06.Unit);

            var quantity07 = Density.From(1, DensityUnit.FemtogramPerLiter);
            Assert.Equal(1, quantity07.FemtogramsPerLiter);
            Assert.Equal(DensityUnit.FemtogramPerLiter, quantity07.Unit);

            var quantity08 = Density.From(1, DensityUnit.FemtogramPerMilliliter);
            Assert.Equal(1, quantity08.FemtogramsPerMilliliter);
            Assert.Equal(DensityUnit.FemtogramPerMilliliter, quantity08.Unit);

            var quantity09 = Density.From(1, DensityUnit.GramPerCubicCentimeter);
            Assert.Equal(1, quantity09.GramsPerCubicCentimeter);
            Assert.Equal(DensityUnit.GramPerCubicCentimeter, quantity09.Unit);

            var quantity10 = Density.From(1, DensityUnit.GramPerCubicFoot);
            Assert.Equal(1, quantity10.GramsPerCubicFoot);
            Assert.Equal(DensityUnit.GramPerCubicFoot, quantity10.Unit);

            var quantity11 = Density.From(1, DensityUnit.GramPerCubicInch);
            Assert.Equal(1, quantity11.GramsPerCubicInch);
            Assert.Equal(DensityUnit.GramPerCubicInch, quantity11.Unit);

            var quantity12 = Density.From(1, DensityUnit.GramPerCubicMeter);
            Assert.Equal(1, quantity12.GramsPerCubicMeter);
            Assert.Equal(DensityUnit.GramPerCubicMeter, quantity12.Unit);

            var quantity13 = Density.From(1, DensityUnit.GramPerCubicMillimeter);
            Assert.Equal(1, quantity13.GramsPerCubicMillimeter);
            Assert.Equal(DensityUnit.GramPerCubicMillimeter, quantity13.Unit);

            var quantity14 = Density.From(1, DensityUnit.GramPerDeciliter);
            Assert.Equal(1, quantity14.GramsPerDeciliter);
            Assert.Equal(DensityUnit.GramPerDeciliter, quantity14.Unit);

            var quantity15 = Density.From(1, DensityUnit.GramPerLiter);
            Assert.Equal(1, quantity15.GramsPerLiter);
            Assert.Equal(DensityUnit.GramPerLiter, quantity15.Unit);

            var quantity16 = Density.From(1, DensityUnit.GramPerMilliliter);
            Assert.Equal(1, quantity16.GramsPerMilliliter);
            Assert.Equal(DensityUnit.GramPerMilliliter, quantity16.Unit);

            var quantity17 = Density.From(1, DensityUnit.KilogramPerCubicCentimeter);
            Assert.Equal(1, quantity17.KilogramsPerCubicCentimeter);
            Assert.Equal(DensityUnit.KilogramPerCubicCentimeter, quantity17.Unit);

            var quantity18 = Density.From(1, DensityUnit.KilogramPerCubicMeter);
            Assert.Equal(1, quantity18.KilogramsPerCubicMeter);
            Assert.Equal(DensityUnit.KilogramPerCubicMeter, quantity18.Unit);

            var quantity19 = Density.From(1, DensityUnit.KilogramPerCubicMillimeter);
            Assert.Equal(1, quantity19.KilogramsPerCubicMillimeter);
            Assert.Equal(DensityUnit.KilogramPerCubicMillimeter, quantity19.Unit);

            var quantity20 = Density.From(1, DensityUnit.KilogramPerLiter);
            Assert.Equal(1, quantity20.KilogramsPerLiter);
            Assert.Equal(DensityUnit.KilogramPerLiter, quantity20.Unit);

            var quantity21 = Density.From(1, DensityUnit.KilopoundPerCubicFoot);
            Assert.Equal(1, quantity21.KilopoundsPerCubicFoot);
            Assert.Equal(DensityUnit.KilopoundPerCubicFoot, quantity21.Unit);

            var quantity22 = Density.From(1, DensityUnit.KilopoundPerCubicInch);
            Assert.Equal(1, quantity22.KilopoundsPerCubicInch);
            Assert.Equal(DensityUnit.KilopoundPerCubicInch, quantity22.Unit);

            var quantity23 = Density.From(1, DensityUnit.KilopoundPerCubicYard);
            Assert.Equal(1, quantity23.KilopoundsPerCubicYard);
            Assert.Equal(DensityUnit.KilopoundPerCubicYard, quantity23.Unit);

            var quantity24 = Density.From(1, DensityUnit.MicrogramPerCubicMeter);
            Assert.Equal(1, quantity24.MicrogramsPerCubicMeter);
            Assert.Equal(DensityUnit.MicrogramPerCubicMeter, quantity24.Unit);

            var quantity25 = Density.From(1, DensityUnit.MicrogramPerDeciliter);
            Assert.Equal(1, quantity25.MicrogramsPerDeciliter);
            Assert.Equal(DensityUnit.MicrogramPerDeciliter, quantity25.Unit);

            var quantity26 = Density.From(1, DensityUnit.MicrogramPerLiter);
            Assert.Equal(1, quantity26.MicrogramsPerLiter);
            Assert.Equal(DensityUnit.MicrogramPerLiter, quantity26.Unit);

            var quantity27 = Density.From(1, DensityUnit.MicrogramPerMilliliter);
            Assert.Equal(1, quantity27.MicrogramsPerMilliliter);
            Assert.Equal(DensityUnit.MicrogramPerMilliliter, quantity27.Unit);

            var quantity28 = Density.From(1, DensityUnit.MilligramPerCubicMeter);
            Assert.Equal(1, quantity28.MilligramsPerCubicMeter);
            Assert.Equal(DensityUnit.MilligramPerCubicMeter, quantity28.Unit);

            var quantity29 = Density.From(1, DensityUnit.MilligramPerDeciliter);
            Assert.Equal(1, quantity29.MilligramsPerDeciliter);
            Assert.Equal(DensityUnit.MilligramPerDeciliter, quantity29.Unit);

            var quantity30 = Density.From(1, DensityUnit.MilligramPerLiter);
            Assert.Equal(1, quantity30.MilligramsPerLiter);
            Assert.Equal(DensityUnit.MilligramPerLiter, quantity30.Unit);

            var quantity31 = Density.From(1, DensityUnit.MilligramPerMilliliter);
            Assert.Equal(1, quantity31.MilligramsPerMilliliter);
            Assert.Equal(DensityUnit.MilligramPerMilliliter, quantity31.Unit);

            var quantity32 = Density.From(1, DensityUnit.NanogramPerDeciliter);
            Assert.Equal(1, quantity32.NanogramsPerDeciliter);
            Assert.Equal(DensityUnit.NanogramPerDeciliter, quantity32.Unit);

            var quantity33 = Density.From(1, DensityUnit.NanogramPerLiter);
            Assert.Equal(1, quantity33.NanogramsPerLiter);
            Assert.Equal(DensityUnit.NanogramPerLiter, quantity33.Unit);

            var quantity34 = Density.From(1, DensityUnit.NanogramPerMilliliter);
            Assert.Equal(1, quantity34.NanogramsPerMilliliter);
            Assert.Equal(DensityUnit.NanogramPerMilliliter, quantity34.Unit);

            var quantity35 = Density.From(1, DensityUnit.PicogramPerDeciliter);
            Assert.Equal(1, quantity35.PicogramsPerDeciliter);
            Assert.Equal(DensityUnit.PicogramPerDeciliter, quantity35.Unit);

            var quantity36 = Density.From(1, DensityUnit.PicogramPerLiter);
            Assert.Equal(1, quantity36.PicogramsPerLiter);
            Assert.Equal(DensityUnit.PicogramPerLiter, quantity36.Unit);

            var quantity37 = Density.From(1, DensityUnit.PicogramPerMilliliter);
            Assert.Equal(1, quantity37.PicogramsPerMilliliter);
            Assert.Equal(DensityUnit.PicogramPerMilliliter, quantity37.Unit);

            var quantity38 = Density.From(1, DensityUnit.PoundPerCubicCentimeter);
            Assert.Equal(1, quantity38.PoundsPerCubicCentimeter);
            Assert.Equal(DensityUnit.PoundPerCubicCentimeter, quantity38.Unit);

            var quantity39 = Density.From(1, DensityUnit.PoundPerCubicFoot);
            Assert.Equal(1, quantity39.PoundsPerCubicFoot);
            Assert.Equal(DensityUnit.PoundPerCubicFoot, quantity39.Unit);

            var quantity40 = Density.From(1, DensityUnit.PoundPerCubicInch);
            Assert.Equal(1, quantity40.PoundsPerCubicInch);
            Assert.Equal(DensityUnit.PoundPerCubicInch, quantity40.Unit);

            var quantity41 = Density.From(1, DensityUnit.PoundPerCubicMeter);
            Assert.Equal(1, quantity41.PoundsPerCubicMeter);
            Assert.Equal(DensityUnit.PoundPerCubicMeter, quantity41.Unit);

            var quantity42 = Density.From(1, DensityUnit.PoundPerCubicMillimeter);
            Assert.Equal(1, quantity42.PoundsPerCubicMillimeter);
            Assert.Equal(DensityUnit.PoundPerCubicMillimeter, quantity42.Unit);

            var quantity43 = Density.From(1, DensityUnit.PoundPerCubicYard);
            Assert.Equal(1, quantity43.PoundsPerCubicYard);
            Assert.Equal(DensityUnit.PoundPerCubicYard, quantity43.Unit);

            var quantity44 = Density.From(1, DensityUnit.PoundPerImperialGallon);
            Assert.Equal(1, quantity44.PoundsPerImperialGallon);
            Assert.Equal(DensityUnit.PoundPerImperialGallon, quantity44.Unit);

            var quantity45 = Density.From(1, DensityUnit.PoundPerUSGallon);
            Assert.Equal(1, quantity45.PoundsPerUSGallon);
            Assert.Equal(DensityUnit.PoundPerUSGallon, quantity45.Unit);

            var quantity46 = Density.From(1, DensityUnit.SlugPerCubicCentimeter);
            Assert.Equal(1, quantity46.SlugsPerCubicCentimeter);
            Assert.Equal(DensityUnit.SlugPerCubicCentimeter, quantity46.Unit);

            var quantity47 = Density.From(1, DensityUnit.SlugPerCubicFoot);
            Assert.Equal(1, quantity47.SlugsPerCubicFoot);
            Assert.Equal(DensityUnit.SlugPerCubicFoot, quantity47.Unit);

            var quantity48 = Density.From(1, DensityUnit.SlugPerCubicInch);
            Assert.Equal(1, quantity48.SlugsPerCubicInch);
            Assert.Equal(DensityUnit.SlugPerCubicInch, quantity48.Unit);

            var quantity49 = Density.From(1, DensityUnit.SlugPerCubicMeter);
            Assert.Equal(1, quantity49.SlugsPerCubicMeter);
            Assert.Equal(DensityUnit.SlugPerCubicMeter, quantity49.Unit);

            var quantity50 = Density.From(1, DensityUnit.SlugPerCubicMillimeter);
            Assert.Equal(1, quantity50.SlugsPerCubicMillimeter);
            Assert.Equal(DensityUnit.SlugPerCubicMillimeter, quantity50.Unit);

            var quantity51 = Density.From(1, DensityUnit.TonnePerCubicCentimeter);
            Assert.Equal(1, quantity51.TonnesPerCubicCentimeter);
            Assert.Equal(DensityUnit.TonnePerCubicCentimeter, quantity51.Unit);

            var quantity52 = Density.From(1, DensityUnit.TonnePerCubicFoot);
            Assert.Equal(1, quantity52.TonnesPerCubicFoot);
            Assert.Equal(DensityUnit.TonnePerCubicFoot, quantity52.Unit);

            var quantity53 = Density.From(1, DensityUnit.TonnePerCubicInch);
            Assert.Equal(1, quantity53.TonnesPerCubicInch);
            Assert.Equal(DensityUnit.TonnePerCubicInch, quantity53.Unit);

            var quantity54 = Density.From(1, DensityUnit.TonnePerCubicMeter);
            Assert.Equal(1, quantity54.TonnesPerCubicMeter);
            Assert.Equal(DensityUnit.TonnePerCubicMeter, quantity54.Unit);

            var quantity55 = Density.From(1, DensityUnit.TonnePerCubicMillimeter);
            Assert.Equal(1, quantity55.TonnesPerCubicMillimeter);
            Assert.Equal(DensityUnit.TonnePerCubicMillimeter, quantity55.Unit);

        }

        [Fact]
        public void FromKilogramsPerCubicMeter_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Density.FromKilogramsPerCubicMeter(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Density.FromKilogramsPerCubicMeter(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromKilogramsPerCubicMeter_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Density.FromKilogramsPerCubicMeter(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var kilogrampercubicmeter = Density.FromKilogramsPerCubicMeter(1);
            AssertEx.EqualTolerance(CentigramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.CentigramPerDeciliter), CentigramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(CentigramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.CentigramPerLiter), CentigramsPerLiterTolerance);
            AssertEx.EqualTolerance(CentigramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.CentigramPerMilliliter), CentigramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(DecigramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.DecigramPerDeciliter), DecigramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(DecigramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.DecigramPerLiter), DecigramsPerLiterTolerance);
            AssertEx.EqualTolerance(DecigramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.DecigramPerMilliliter), DecigramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(FemtogramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.FemtogramPerDeciliter), FemtogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(FemtogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.FemtogramPerLiter), FemtogramsPerLiterTolerance);
            AssertEx.EqualTolerance(FemtogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.FemtogramPerMilliliter), FemtogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(GramsPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.GramPerCubicCentimeter), GramsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(GramsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.GramPerCubicFoot), GramsPerCubicFootTolerance);
            AssertEx.EqualTolerance(GramsPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.GramPerCubicInch), GramsPerCubicInchTolerance);
            AssertEx.EqualTolerance(GramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.GramPerCubicMeter), GramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(GramsPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.GramPerCubicMillimeter), GramsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(GramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.GramPerDeciliter), GramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(GramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.GramPerLiter), GramsPerLiterTolerance);
            AssertEx.EqualTolerance(GramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.GramPerMilliliter), GramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.KilogramPerCubicCentimeter), KilogramsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.KilogramPerCubicMeter), KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.KilogramPerCubicMillimeter), KilogramsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.KilogramPerLiter), KilogramsPerLiterTolerance);
            AssertEx.EqualTolerance(KilopoundsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.KilopoundPerCubicFoot), KilopoundsPerCubicFootTolerance);
            AssertEx.EqualTolerance(KilopoundsPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.KilopoundPerCubicInch), KilopoundsPerCubicInchTolerance);
            AssertEx.EqualTolerance(KilopoundsPerCubicYardInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.KilopoundPerCubicYard), KilopoundsPerCubicYardTolerance);
            AssertEx.EqualTolerance(MicrogramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.MicrogramPerCubicMeter), MicrogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.MicrogramPerDeciliter), MicrogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.MicrogramPerLiter), MicrogramsPerLiterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.MicrogramPerMilliliter), MicrogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(MilligramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.MilligramPerCubicMeter), MilligramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MilligramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.MilligramPerDeciliter), MilligramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(MilligramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.MilligramPerLiter), MilligramsPerLiterTolerance);
            AssertEx.EqualTolerance(MilligramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.MilligramPerMilliliter), MilligramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(NanogramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.NanogramPerDeciliter), NanogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(NanogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.NanogramPerLiter), NanogramsPerLiterTolerance);
            AssertEx.EqualTolerance(NanogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.NanogramPerMilliliter), NanogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(PicogramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PicogramPerDeciliter), PicogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(PicogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PicogramPerLiter), PicogramsPerLiterTolerance);
            AssertEx.EqualTolerance(PicogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PicogramPerMilliliter), PicogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PoundPerCubicCentimeter), PoundsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PoundPerCubicFoot), PoundsPerCubicFootTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PoundPerCubicInch), PoundsPerCubicInchTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PoundPerCubicMeter), PoundsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PoundPerCubicMillimeter), PoundsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicYardInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PoundPerCubicYard), PoundsPerCubicYardTolerance);
            AssertEx.EqualTolerance(PoundsPerImperialGallonInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PoundPerImperialGallon), PoundsPerImperialGallonTolerance);
            AssertEx.EqualTolerance(PoundsPerUSGallonInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PoundPerUSGallon), PoundsPerUSGallonTolerance);
            AssertEx.EqualTolerance(SlugsPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.SlugPerCubicCentimeter), SlugsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(SlugsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.SlugPerCubicFoot), SlugsPerCubicFootTolerance);
            AssertEx.EqualTolerance(SlugsPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.SlugPerCubicInch), SlugsPerCubicInchTolerance);
            AssertEx.EqualTolerance(SlugsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.SlugPerCubicMeter), SlugsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(SlugsPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.SlugPerCubicMillimeter), SlugsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.TonnePerCubicCentimeter), TonnesPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.TonnePerCubicFoot), TonnesPerCubicFootTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.TonnePerCubicInch), TonnesPerCubicInchTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.TonnePerCubicMeter), TonnesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.TonnePerCubicMillimeter), TonnesPerCubicMillimeterTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Density(value: 1, unit: Density.BaseUnit);
            if (SupportsSIUnitSystem)
            {
                Assert.Equal(1, quantity.As(UnitSystem.SI));
            }
            else
            {
                Assert.Throws<ArgumentException>(() => quantity.As(UnitSystem.SI));
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = Density.Parse("1 cg/dl", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.CentigramsPerDeciliter);
                Assert.Equal(DensityUnit.CentigramPerDeciliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 cg/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.CentigramsPerLiter);
                Assert.Equal(DensityUnit.CentigramPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 cg/ml", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.CentigramsPerMilliliter);
                Assert.Equal(DensityUnit.CentigramPerMilliliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 dg/dl", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.DecigramsPerDeciliter);
                Assert.Equal(DensityUnit.DecigramPerDeciliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 dg/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.DecigramsPerLiter);
                Assert.Equal(DensityUnit.DecigramPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 dg/ml", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.DecigramsPerMilliliter);
                Assert.Equal(DensityUnit.DecigramPerMilliliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 fg/dl", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.FemtogramsPerDeciliter);
                Assert.Equal(DensityUnit.FemtogramPerDeciliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 fg/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.FemtogramsPerLiter);
                Assert.Equal(DensityUnit.FemtogramPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 fg/ml", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.FemtogramsPerMilliliter);
                Assert.Equal(DensityUnit.FemtogramPerMilliliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 g/cm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.GramsPerCubicCentimeter);
                Assert.Equal(DensityUnit.GramPerCubicCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 g/ft³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.GramsPerCubicFoot);
                Assert.Equal(DensityUnit.GramPerCubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 g/in³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.GramsPerCubicInch);
                Assert.Equal(DensityUnit.GramPerCubicInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 g/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.GramsPerCubicMeter);
                Assert.Equal(DensityUnit.GramPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 г/м³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.GramsPerCubicMeter);
                Assert.Equal(DensityUnit.GramPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 g/mm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.GramsPerCubicMillimeter);
                Assert.Equal(DensityUnit.GramPerCubicMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 g/dl", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.GramsPerDeciliter);
                Assert.Equal(DensityUnit.GramPerDeciliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 g/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.GramsPerLiter);
                Assert.Equal(DensityUnit.GramPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 g/ml", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.GramsPerMilliliter);
                Assert.Equal(DensityUnit.GramPerMilliliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 kg/cm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilogramsPerCubicCentimeter);
                Assert.Equal(DensityUnit.KilogramPerCubicCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 kg/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilogramsPerCubicMeter);
                Assert.Equal(DensityUnit.KilogramPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 кг/м³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.KilogramsPerCubicMeter);
                Assert.Equal(DensityUnit.KilogramPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 kg/mm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilogramsPerCubicMillimeter);
                Assert.Equal(DensityUnit.KilogramPerCubicMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 kg/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilogramsPerLiter);
                Assert.Equal(DensityUnit.KilogramPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 kip/ft³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilopoundsPerCubicFoot);
                Assert.Equal(DensityUnit.KilopoundPerCubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 kip/in³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilopoundsPerCubicInch);
                Assert.Equal(DensityUnit.KilopoundPerCubicInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 kip/yd³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilopoundsPerCubicYard);
                Assert.Equal(DensityUnit.KilopoundPerCubicYard, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 µg/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MicrogramsPerCubicMeter);
                Assert.Equal(DensityUnit.MicrogramPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 мкг/м³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.MicrogramsPerCubicMeter);
                Assert.Equal(DensityUnit.MicrogramPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 µg/dl", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MicrogramsPerDeciliter);
                Assert.Equal(DensityUnit.MicrogramPerDeciliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 µg/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MicrogramsPerLiter);
                Assert.Equal(DensityUnit.MicrogramPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 µg/ml", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MicrogramsPerMilliliter);
                Assert.Equal(DensityUnit.MicrogramPerMilliliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 mg/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MilligramsPerCubicMeter);
                Assert.Equal(DensityUnit.MilligramPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 мг/м³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.MilligramsPerCubicMeter);
                Assert.Equal(DensityUnit.MilligramPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 mg/dl", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MilligramsPerDeciliter);
                Assert.Equal(DensityUnit.MilligramPerDeciliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 mg/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MilligramsPerLiter);
                Assert.Equal(DensityUnit.MilligramPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 mg/ml", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MilligramsPerMilliliter);
                Assert.Equal(DensityUnit.MilligramPerMilliliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 ng/dl", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.NanogramsPerDeciliter);
                Assert.Equal(DensityUnit.NanogramPerDeciliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 ng/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.NanogramsPerLiter);
                Assert.Equal(DensityUnit.NanogramPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 ng/ml", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.NanogramsPerMilliliter);
                Assert.Equal(DensityUnit.NanogramPerMilliliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 pg/dl", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PicogramsPerDeciliter);
                Assert.Equal(DensityUnit.PicogramPerDeciliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 pg/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PicogramsPerLiter);
                Assert.Equal(DensityUnit.PicogramPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 pg/ml", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PicogramsPerMilliliter);
                Assert.Equal(DensityUnit.PicogramPerMilliliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 lb/cm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PoundsPerCubicCentimeter);
                Assert.Equal(DensityUnit.PoundPerCubicCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 lb/ft³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PoundsPerCubicFoot);
                Assert.Equal(DensityUnit.PoundPerCubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 lb/in³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PoundsPerCubicInch);
                Assert.Equal(DensityUnit.PoundPerCubicInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 lb/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PoundsPerCubicMeter);
                Assert.Equal(DensityUnit.PoundPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 lb/mm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PoundsPerCubicMillimeter);
                Assert.Equal(DensityUnit.PoundPerCubicMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 lb/yd³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PoundsPerCubicYard);
                Assert.Equal(DensityUnit.PoundPerCubicYard, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 ppg (imp.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PoundsPerImperialGallon);
                Assert.Equal(DensityUnit.PoundPerImperialGallon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 ppg (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PoundsPerUSGallon);
                Assert.Equal(DensityUnit.PoundPerUSGallon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 slug/cm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.SlugsPerCubicCentimeter);
                Assert.Equal(DensityUnit.SlugPerCubicCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 slug/ft³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.SlugsPerCubicFoot);
                Assert.Equal(DensityUnit.SlugPerCubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 slug/in³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.SlugsPerCubicInch);
                Assert.Equal(DensityUnit.SlugPerCubicInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 slug/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.SlugsPerCubicMeter);
                Assert.Equal(DensityUnit.SlugPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 slug/mm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.SlugsPerCubicMillimeter);
                Assert.Equal(DensityUnit.SlugPerCubicMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 t/cm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.TonnesPerCubicCentimeter);
                Assert.Equal(DensityUnit.TonnePerCubicCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 t/ft³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.TonnesPerCubicFoot);
                Assert.Equal(DensityUnit.TonnePerCubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 t/in³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.TonnesPerCubicInch);
                Assert.Equal(DensityUnit.TonnePerCubicInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 t/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.TonnesPerCubicMeter);
                Assert.Equal(DensityUnit.TonnePerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Density.Parse("1 t/mm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.TonnesPerCubicMillimeter);
                Assert.Equal(DensityUnit.TonnePerCubicMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(Density.TryParse("1 cg/dl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.CentigramsPerDeciliter);
                Assert.Equal(DensityUnit.CentigramPerDeciliter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 cg/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.CentigramsPerLiter);
                Assert.Equal(DensityUnit.CentigramPerLiter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 cg/ml", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.CentigramsPerMilliliter);
                Assert.Equal(DensityUnit.CentigramPerMilliliter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 dg/dl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.DecigramsPerDeciliter);
                Assert.Equal(DensityUnit.DecigramPerDeciliter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 dg/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.DecigramsPerLiter);
                Assert.Equal(DensityUnit.DecigramPerLiter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 dg/ml", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.DecigramsPerMilliliter);
                Assert.Equal(DensityUnit.DecigramPerMilliliter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 fg/dl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.FemtogramsPerDeciliter);
                Assert.Equal(DensityUnit.FemtogramPerDeciliter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 fg/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.FemtogramsPerLiter);
                Assert.Equal(DensityUnit.FemtogramPerLiter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 fg/ml", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.FemtogramsPerMilliliter);
                Assert.Equal(DensityUnit.FemtogramPerMilliliter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 g/cm³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.GramsPerCubicCentimeter);
                Assert.Equal(DensityUnit.GramPerCubicCentimeter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 g/ft³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.GramsPerCubicFoot);
                Assert.Equal(DensityUnit.GramPerCubicFoot, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 g/in³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.GramsPerCubicInch);
                Assert.Equal(DensityUnit.GramPerCubicInch, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 g/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.GramsPerCubicMeter);
                Assert.Equal(DensityUnit.GramPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 г/м³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.GramsPerCubicMeter);
                Assert.Equal(DensityUnit.GramPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 g/mm³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.GramsPerCubicMillimeter);
                Assert.Equal(DensityUnit.GramPerCubicMillimeter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 g/dl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.GramsPerDeciliter);
                Assert.Equal(DensityUnit.GramPerDeciliter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 g/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.GramsPerLiter);
                Assert.Equal(DensityUnit.GramPerLiter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 g/ml", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.GramsPerMilliliter);
                Assert.Equal(DensityUnit.GramPerMilliliter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 kg/cm³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilogramsPerCubicCentimeter);
                Assert.Equal(DensityUnit.KilogramPerCubicCentimeter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 kg/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilogramsPerCubicMeter);
                Assert.Equal(DensityUnit.KilogramPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 кг/м³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.KilogramsPerCubicMeter);
                Assert.Equal(DensityUnit.KilogramPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 kg/mm³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilogramsPerCubicMillimeter);
                Assert.Equal(DensityUnit.KilogramPerCubicMillimeter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 kg/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilogramsPerLiter);
                Assert.Equal(DensityUnit.KilogramPerLiter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 kip/ft³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilopoundsPerCubicFoot);
                Assert.Equal(DensityUnit.KilopoundPerCubicFoot, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 kip/in³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilopoundsPerCubicInch);
                Assert.Equal(DensityUnit.KilopoundPerCubicInch, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 kip/yd³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilopoundsPerCubicYard);
                Assert.Equal(DensityUnit.KilopoundPerCubicYard, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 µg/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MicrogramsPerCubicMeter);
                Assert.Equal(DensityUnit.MicrogramPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 мкг/м³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.MicrogramsPerCubicMeter);
                Assert.Equal(DensityUnit.MicrogramPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 µg/dl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MicrogramsPerDeciliter);
                Assert.Equal(DensityUnit.MicrogramPerDeciliter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 µg/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MicrogramsPerLiter);
                Assert.Equal(DensityUnit.MicrogramPerLiter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 µg/ml", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MicrogramsPerMilliliter);
                Assert.Equal(DensityUnit.MicrogramPerMilliliter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 mg/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MilligramsPerCubicMeter);
                Assert.Equal(DensityUnit.MilligramPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 мг/м³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.MilligramsPerCubicMeter);
                Assert.Equal(DensityUnit.MilligramPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 mg/dl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MilligramsPerDeciliter);
                Assert.Equal(DensityUnit.MilligramPerDeciliter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 mg/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MilligramsPerLiter);
                Assert.Equal(DensityUnit.MilligramPerLiter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 mg/ml", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MilligramsPerMilliliter);
                Assert.Equal(DensityUnit.MilligramPerMilliliter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 ng/dl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.NanogramsPerDeciliter);
                Assert.Equal(DensityUnit.NanogramPerDeciliter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 ng/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.NanogramsPerLiter);
                Assert.Equal(DensityUnit.NanogramPerLiter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 ng/ml", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.NanogramsPerMilliliter);
                Assert.Equal(DensityUnit.NanogramPerMilliliter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 pg/dl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PicogramsPerDeciliter);
                Assert.Equal(DensityUnit.PicogramPerDeciliter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 pg/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PicogramsPerLiter);
                Assert.Equal(DensityUnit.PicogramPerLiter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 pg/ml", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PicogramsPerMilliliter);
                Assert.Equal(DensityUnit.PicogramPerMilliliter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 lb/cm³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PoundsPerCubicCentimeter);
                Assert.Equal(DensityUnit.PoundPerCubicCentimeter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 lb/ft³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PoundsPerCubicFoot);
                Assert.Equal(DensityUnit.PoundPerCubicFoot, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 lb/in³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PoundsPerCubicInch);
                Assert.Equal(DensityUnit.PoundPerCubicInch, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 lb/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PoundsPerCubicMeter);
                Assert.Equal(DensityUnit.PoundPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 lb/mm³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PoundsPerCubicMillimeter);
                Assert.Equal(DensityUnit.PoundPerCubicMillimeter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 lb/yd³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PoundsPerCubicYard);
                Assert.Equal(DensityUnit.PoundPerCubicYard, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 ppg (imp.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PoundsPerImperialGallon);
                Assert.Equal(DensityUnit.PoundPerImperialGallon, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 ppg (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PoundsPerUSGallon);
                Assert.Equal(DensityUnit.PoundPerUSGallon, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 slug/cm³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.SlugsPerCubicCentimeter);
                Assert.Equal(DensityUnit.SlugPerCubicCentimeter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 slug/ft³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.SlugsPerCubicFoot);
                Assert.Equal(DensityUnit.SlugPerCubicFoot, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 slug/in³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.SlugsPerCubicInch);
                Assert.Equal(DensityUnit.SlugPerCubicInch, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 slug/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.SlugsPerCubicMeter);
                Assert.Equal(DensityUnit.SlugPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 slug/mm³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.SlugsPerCubicMillimeter);
                Assert.Equal(DensityUnit.SlugPerCubicMillimeter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 t/cm³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.TonnesPerCubicCentimeter);
                Assert.Equal(DensityUnit.TonnePerCubicCentimeter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 t/ft³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.TonnesPerCubicFoot);
                Assert.Equal(DensityUnit.TonnePerCubicFoot, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 t/in³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.TonnesPerCubicInch);
                Assert.Equal(DensityUnit.TonnePerCubicInch, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 t/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.TonnesPerCubicMeter);
                Assert.Equal(DensityUnit.TonnePerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(Density.TryParse("1 t/mm³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.TonnesPerCubicMillimeter);
                Assert.Equal(DensityUnit.TonnePerCubicMillimeter, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = Density.ParseUnit("cg/dl", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.CentigramPerDeciliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("cg/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.CentigramPerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("cg/ml", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.CentigramPerMilliliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("dg/dl", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.DecigramPerDeciliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("dg/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.DecigramPerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("dg/ml", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.DecigramPerMilliliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("fg/dl", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.FemtogramPerDeciliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("fg/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.FemtogramPerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("fg/ml", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.FemtogramPerMilliliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("g/cm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.GramPerCubicCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("g/ft³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.GramPerCubicFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("g/in³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.GramPerCubicInch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("g/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.GramPerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("г/м³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DensityUnit.GramPerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("g/mm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.GramPerCubicMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("g/dl", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.GramPerDeciliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("g/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.GramPerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("g/ml", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.GramPerMilliliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("kg/cm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.KilogramPerCubicCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("kg/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.KilogramPerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("кг/м³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DensityUnit.KilogramPerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("kg/mm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.KilogramPerCubicMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("kg/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.KilogramPerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("kip/ft³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.KilopoundPerCubicFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("kip/in³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.KilopoundPerCubicInch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("kip/yd³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.KilopoundPerCubicYard, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("µg/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.MicrogramPerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("мкг/м³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DensityUnit.MicrogramPerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("µg/dl", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.MicrogramPerDeciliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("µg/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.MicrogramPerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("µg/ml", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.MicrogramPerMilliliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("mg/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.MilligramPerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("мг/м³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DensityUnit.MilligramPerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("mg/dl", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.MilligramPerDeciliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("mg/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.MilligramPerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("mg/ml", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.MilligramPerMilliliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("ng/dl", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.NanogramPerDeciliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("ng/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.NanogramPerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("ng/ml", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.NanogramPerMilliliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("pg/dl", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.PicogramPerDeciliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("pg/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.PicogramPerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("pg/ml", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.PicogramPerMilliliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("lb/cm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.PoundPerCubicCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("lb/ft³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.PoundPerCubicFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("lb/in³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.PoundPerCubicInch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("lb/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.PoundPerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("lb/mm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.PoundPerCubicMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("lb/yd³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.PoundPerCubicYard, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("ppg (imp.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.PoundPerImperialGallon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("ppg (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.PoundPerUSGallon, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("slug/cm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.SlugPerCubicCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("slug/ft³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.SlugPerCubicFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("slug/in³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.SlugPerCubicInch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("slug/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.SlugPerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("slug/mm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.SlugPerCubicMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("t/cm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.TonnePerCubicCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("t/ft³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.TonnePerCubicFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("t/in³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.TonnePerCubicInch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("t/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.TonnePerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Density.ParseUnit("t/mm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DensityUnit.TonnePerCubicMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(Density.TryParseUnit("cg/dl", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.CentigramPerDeciliter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("cg/l", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.CentigramPerLiter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("cg/ml", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.CentigramPerMilliliter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("dg/dl", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.DecigramPerDeciliter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("dg/l", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.DecigramPerLiter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("dg/ml", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.DecigramPerMilliliter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("fg/dl", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.FemtogramPerDeciliter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("fg/l", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.FemtogramPerLiter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("fg/ml", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.FemtogramPerMilliliter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("g/cm³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.GramPerCubicCentimeter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("g/ft³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.GramPerCubicFoot, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("g/in³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.GramPerCubicInch, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("g/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.GramPerCubicMeter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("г/м³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DensityUnit.GramPerCubicMeter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("g/mm³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.GramPerCubicMillimeter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("g/dl", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.GramPerDeciliter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("g/l", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.GramPerLiter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("g/ml", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.GramPerMilliliter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("kg/cm³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.KilogramPerCubicCentimeter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("kg/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.KilogramPerCubicMeter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("кг/м³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DensityUnit.KilogramPerCubicMeter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("kg/mm³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.KilogramPerCubicMillimeter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("kg/l", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.KilogramPerLiter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("kip/ft³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.KilopoundPerCubicFoot, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("kip/in³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.KilopoundPerCubicInch, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("kip/yd³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.KilopoundPerCubicYard, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("µg/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.MicrogramPerCubicMeter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("мкг/м³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DensityUnit.MicrogramPerCubicMeter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("µg/dl", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.MicrogramPerDeciliter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("µg/l", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.MicrogramPerLiter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("µg/ml", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.MicrogramPerMilliliter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("mg/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.MilligramPerCubicMeter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("мг/м³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DensityUnit.MilligramPerCubicMeter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("mg/dl", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.MilligramPerDeciliter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("mg/l", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.MilligramPerLiter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("mg/ml", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.MilligramPerMilliliter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("ng/dl", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.NanogramPerDeciliter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("ng/l", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.NanogramPerLiter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("ng/ml", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.NanogramPerMilliliter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("pg/dl", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.PicogramPerDeciliter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("pg/l", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.PicogramPerLiter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("pg/ml", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.PicogramPerMilliliter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("lb/cm³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.PoundPerCubicCentimeter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("lb/ft³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.PoundPerCubicFoot, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("lb/in³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.PoundPerCubicInch, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("lb/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.PoundPerCubicMeter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("lb/mm³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.PoundPerCubicMillimeter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("lb/yd³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.PoundPerCubicYard, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("ppg (imp.)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.PoundPerImperialGallon, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("ppg (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.PoundPerUSGallon, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("slug/cm³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.SlugPerCubicCentimeter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("slug/ft³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.SlugPerCubicFoot, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("slug/in³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.SlugPerCubicInch, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("slug/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.SlugPerCubicMeter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("slug/mm³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.SlugPerCubicMillimeter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("t/cm³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.TonnePerCubicCentimeter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("t/ft³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.TonnePerCubicFoot, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("t/in³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.TonnePerCubicInch, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("t/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.TonnePerCubicMeter, parsedUnit);
            }

            {
                Assert.True(Density.TryParseUnit("t/mm³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DensityUnit.TonnePerCubicMillimeter, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(DensityUnit unit)
        {
            var inBaseUnits = Density.From(1.0, Density.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(DensityUnit unit)
        {
            var quantity = Density.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(DensityUnit unit)
        {
            // See if there is a unit available that is not the base unit, fallback to base unit if it has only a single unit.
            var fromUnit = Density.Units.First(u => u != Density.BaseUnit);

            var quantity = Density.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(DensityUnit unit)
        {
            var quantity = default(Density);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Density kilogrampercubicmeter = Density.FromKilogramsPerCubicMeter(1);
            Assert.Equal(1, Density.FromCentigramsPerDeciliter(kilogrampercubicmeter.CentigramsPerDeciliter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromCentigramsPerLiter(kilogrampercubicmeter.CentigramsPerLiter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromCentigramsPerMilliliter(kilogrampercubicmeter.CentigramsPerMilliliter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromDecigramsPerDeciliter(kilogrampercubicmeter.DecigramsPerDeciliter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromDecigramsPerLiter(kilogrampercubicmeter.DecigramsPerLiter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromDecigramsPerMilliliter(kilogrampercubicmeter.DecigramsPerMilliliter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromFemtogramsPerDeciliter(kilogrampercubicmeter.FemtogramsPerDeciliter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromFemtogramsPerLiter(kilogrampercubicmeter.FemtogramsPerLiter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromFemtogramsPerMilliliter(kilogrampercubicmeter.FemtogramsPerMilliliter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromGramsPerCubicCentimeter(kilogrampercubicmeter.GramsPerCubicCentimeter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromGramsPerCubicFoot(kilogrampercubicmeter.GramsPerCubicFoot).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromGramsPerCubicInch(kilogrampercubicmeter.GramsPerCubicInch).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromGramsPerCubicMeter(kilogrampercubicmeter.GramsPerCubicMeter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromGramsPerCubicMillimeter(kilogrampercubicmeter.GramsPerCubicMillimeter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromGramsPerDeciliter(kilogrampercubicmeter.GramsPerDeciliter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromGramsPerLiter(kilogrampercubicmeter.GramsPerLiter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromGramsPerMilliliter(kilogrampercubicmeter.GramsPerMilliliter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromKilogramsPerCubicCentimeter(kilogrampercubicmeter.KilogramsPerCubicCentimeter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromKilogramsPerCubicMeter(kilogrampercubicmeter.KilogramsPerCubicMeter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromKilogramsPerCubicMillimeter(kilogrampercubicmeter.KilogramsPerCubicMillimeter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromKilogramsPerLiter(kilogrampercubicmeter.KilogramsPerLiter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromKilopoundsPerCubicFoot(kilogrampercubicmeter.KilopoundsPerCubicFoot).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromKilopoundsPerCubicInch(kilogrampercubicmeter.KilopoundsPerCubicInch).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromKilopoundsPerCubicYard(kilogrampercubicmeter.KilopoundsPerCubicYard).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromMicrogramsPerCubicMeter(kilogrampercubicmeter.MicrogramsPerCubicMeter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromMicrogramsPerDeciliter(kilogrampercubicmeter.MicrogramsPerDeciliter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromMicrogramsPerLiter(kilogrampercubicmeter.MicrogramsPerLiter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromMicrogramsPerMilliliter(kilogrampercubicmeter.MicrogramsPerMilliliter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromMilligramsPerCubicMeter(kilogrampercubicmeter.MilligramsPerCubicMeter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromMilligramsPerDeciliter(kilogrampercubicmeter.MilligramsPerDeciliter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromMilligramsPerLiter(kilogrampercubicmeter.MilligramsPerLiter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromMilligramsPerMilliliter(kilogrampercubicmeter.MilligramsPerMilliliter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromNanogramsPerDeciliter(kilogrampercubicmeter.NanogramsPerDeciliter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromNanogramsPerLiter(kilogrampercubicmeter.NanogramsPerLiter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromNanogramsPerMilliliter(kilogrampercubicmeter.NanogramsPerMilliliter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromPicogramsPerDeciliter(kilogrampercubicmeter.PicogramsPerDeciliter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromPicogramsPerLiter(kilogrampercubicmeter.PicogramsPerLiter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromPicogramsPerMilliliter(kilogrampercubicmeter.PicogramsPerMilliliter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromPoundsPerCubicCentimeter(kilogrampercubicmeter.PoundsPerCubicCentimeter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromPoundsPerCubicFoot(kilogrampercubicmeter.PoundsPerCubicFoot).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromPoundsPerCubicInch(kilogrampercubicmeter.PoundsPerCubicInch).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromPoundsPerCubicMeter(kilogrampercubicmeter.PoundsPerCubicMeter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromPoundsPerCubicMillimeter(kilogrampercubicmeter.PoundsPerCubicMillimeter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromPoundsPerCubicYard(kilogrampercubicmeter.PoundsPerCubicYard).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromPoundsPerImperialGallon(kilogrampercubicmeter.PoundsPerImperialGallon).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromPoundsPerUSGallon(kilogrampercubicmeter.PoundsPerUSGallon).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromSlugsPerCubicCentimeter(kilogrampercubicmeter.SlugsPerCubicCentimeter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromSlugsPerCubicFoot(kilogrampercubicmeter.SlugsPerCubicFoot).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromSlugsPerCubicInch(kilogrampercubicmeter.SlugsPerCubicInch).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromSlugsPerCubicMeter(kilogrampercubicmeter.SlugsPerCubicMeter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromSlugsPerCubicMillimeter(kilogrampercubicmeter.SlugsPerCubicMillimeter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromTonnesPerCubicCentimeter(kilogrampercubicmeter.TonnesPerCubicCentimeter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromTonnesPerCubicFoot(kilogrampercubicmeter.TonnesPerCubicFoot).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromTonnesPerCubicInch(kilogrampercubicmeter.TonnesPerCubicInch).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromTonnesPerCubicMeter(kilogrampercubicmeter.TonnesPerCubicMeter).KilogramsPerCubicMeter);
            Assert.Equal(1, Density.FromTonnesPerCubicMillimeter(kilogrampercubicmeter.TonnesPerCubicMillimeter).KilogramsPerCubicMeter);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Density v = Density.FromKilogramsPerCubicMeter(1);
            Assert.Equal(-1, -v.KilogramsPerCubicMeter);
            Assert.Equal(2, (Density.FromKilogramsPerCubicMeter(3) - v).KilogramsPerCubicMeter);
            Assert.Equal(2, (v + v).KilogramsPerCubicMeter);
            Assert.Equal(10, (v * 10).KilogramsPerCubicMeter);
            Assert.Equal(10, (10 * v).KilogramsPerCubicMeter);
            Assert.Equal(2, (Density.FromKilogramsPerCubicMeter(10) / 5).KilogramsPerCubicMeter);
            Assert.Equal(2, Density.FromKilogramsPerCubicMeter(10) / Density.FromKilogramsPerCubicMeter(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            Density oneKilogramPerCubicMeter = Density.FromKilogramsPerCubicMeter(1);
            Density twoKilogramsPerCubicMeter = Density.FromKilogramsPerCubicMeter(2);

            Assert.True(oneKilogramPerCubicMeter < twoKilogramsPerCubicMeter);
            Assert.True(oneKilogramPerCubicMeter <= twoKilogramsPerCubicMeter);
            Assert.True(twoKilogramsPerCubicMeter > oneKilogramPerCubicMeter);
            Assert.True(twoKilogramsPerCubicMeter >= oneKilogramPerCubicMeter);

            Assert.False(oneKilogramPerCubicMeter > twoKilogramsPerCubicMeter);
            Assert.False(oneKilogramPerCubicMeter >= twoKilogramsPerCubicMeter);
            Assert.False(twoKilogramsPerCubicMeter < oneKilogramPerCubicMeter);
            Assert.False(twoKilogramsPerCubicMeter <= oneKilogramPerCubicMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Density kilogrampercubicmeter = Density.FromKilogramsPerCubicMeter(1);
            Assert.Equal(0, kilogrampercubicmeter.CompareTo(kilogrampercubicmeter));
            Assert.True(kilogrampercubicmeter.CompareTo(Density.Zero) > 0);
            Assert.True(Density.Zero.CompareTo(kilogrampercubicmeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Density kilogrampercubicmeter = Density.FromKilogramsPerCubicMeter(1);
            Assert.Throws<ArgumentException>(() => kilogrampercubicmeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Density kilogrampercubicmeter = Density.FromKilogramsPerCubicMeter(1);
            Assert.Throws<ArgumentNullException>(() => kilogrampercubicmeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, DensityUnit.KilogramPerCubicMeter, 1, DensityUnit.KilogramPerCubicMeter, true)]  // Same value and unit.
        [InlineData(1, DensityUnit.KilogramPerCubicMeter, 2, DensityUnit.KilogramPerCubicMeter, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, DensityUnit unitA, double valueB, DensityUnit unitB, bool expectEqual)
        {
            var a = new Density(valueA, unitA);
            var b = new Density(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Density.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_WithTolerance_IsImplemented()
        {
            var v = Density.FromKilogramsPerCubicMeter(1);
            Assert.True(v.Equals(Density.FromKilogramsPerCubicMeter(1), Density.FromKilogramsPerCubicMeter(0)));
            Assert.True(v.Equals(Density.FromKilogramsPerCubicMeter(1), Density.FromKilogramsPerCubicMeter(0.001m)));
            Assert.True(v.Equals(Density.FromKilogramsPerCubicMeter(0.9999), Density.FromKilogramsPerCubicMeter(0.001m)));
            Assert.False(v.Equals(Density.FromKilogramsPerCubicMeter(0.99), Density.FromKilogramsPerCubicMeter(0.001m)));
            Assert.False(v.Equals(Density.Zero, Density.FromKilogramsPerCubicMeter(0.001m)));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Density.FromKilogramsPerCubicMeter(1);
            var negativeTolerance = Density.FromKilogramsPerCubicMeter(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Density.FromKilogramsPerCubicMeter(1), negativeTolerance));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Density kilogrampercubicmeter = Density.FromKilogramsPerCubicMeter(1);
            Assert.False(kilogrampercubicmeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Density kilogrampercubicmeter = Density.FromKilogramsPerCubicMeter(1);
            Assert.False(kilogrampercubicmeter.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(DensityUnit)).Cast<DensityUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Density.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentCulture;
            Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 cg/dl", new Density(1, DensityUnit.CentigramPerDeciliter).ToString());
                Assert.Equal("1 cg/l", new Density(1, DensityUnit.CentigramPerLiter).ToString());
                Assert.Equal("1 cg/ml", new Density(1, DensityUnit.CentigramPerMilliliter).ToString());
                Assert.Equal("1 dg/dl", new Density(1, DensityUnit.DecigramPerDeciliter).ToString());
                Assert.Equal("1 dg/l", new Density(1, DensityUnit.DecigramPerLiter).ToString());
                Assert.Equal("1 dg/ml", new Density(1, DensityUnit.DecigramPerMilliliter).ToString());
                Assert.Equal("1 fg/dl", new Density(1, DensityUnit.FemtogramPerDeciliter).ToString());
                Assert.Equal("1 fg/l", new Density(1, DensityUnit.FemtogramPerLiter).ToString());
                Assert.Equal("1 fg/ml", new Density(1, DensityUnit.FemtogramPerMilliliter).ToString());
                Assert.Equal("1 g/cm³", new Density(1, DensityUnit.GramPerCubicCentimeter).ToString());
                Assert.Equal("1 g/ft³", new Density(1, DensityUnit.GramPerCubicFoot).ToString());
                Assert.Equal("1 g/in³", new Density(1, DensityUnit.GramPerCubicInch).ToString());
                Assert.Equal("1 g/m³", new Density(1, DensityUnit.GramPerCubicMeter).ToString());
                Assert.Equal("1 g/mm³", new Density(1, DensityUnit.GramPerCubicMillimeter).ToString());
                Assert.Equal("1 g/dl", new Density(1, DensityUnit.GramPerDeciliter).ToString());
                Assert.Equal("1 g/l", new Density(1, DensityUnit.GramPerLiter).ToString());
                Assert.Equal("1 g/ml", new Density(1, DensityUnit.GramPerMilliliter).ToString());
                Assert.Equal("1 kg/cm³", new Density(1, DensityUnit.KilogramPerCubicCentimeter).ToString());
                Assert.Equal("1 kg/m³", new Density(1, DensityUnit.KilogramPerCubicMeter).ToString());
                Assert.Equal("1 kg/mm³", new Density(1, DensityUnit.KilogramPerCubicMillimeter).ToString());
                Assert.Equal("1 kg/l", new Density(1, DensityUnit.KilogramPerLiter).ToString());
                Assert.Equal("1 kip/ft³", new Density(1, DensityUnit.KilopoundPerCubicFoot).ToString());
                Assert.Equal("1 kip/in³", new Density(1, DensityUnit.KilopoundPerCubicInch).ToString());
                Assert.Equal("1 kip/yd³", new Density(1, DensityUnit.KilopoundPerCubicYard).ToString());
                Assert.Equal("1 µg/m³", new Density(1, DensityUnit.MicrogramPerCubicMeter).ToString());
                Assert.Equal("1 µg/dl", new Density(1, DensityUnit.MicrogramPerDeciliter).ToString());
                Assert.Equal("1 µg/l", new Density(1, DensityUnit.MicrogramPerLiter).ToString());
                Assert.Equal("1 µg/ml", new Density(1, DensityUnit.MicrogramPerMilliliter).ToString());
                Assert.Equal("1 mg/m³", new Density(1, DensityUnit.MilligramPerCubicMeter).ToString());
                Assert.Equal("1 mg/dl", new Density(1, DensityUnit.MilligramPerDeciliter).ToString());
                Assert.Equal("1 mg/l", new Density(1, DensityUnit.MilligramPerLiter).ToString());
                Assert.Equal("1 mg/ml", new Density(1, DensityUnit.MilligramPerMilliliter).ToString());
                Assert.Equal("1 ng/dl", new Density(1, DensityUnit.NanogramPerDeciliter).ToString());
                Assert.Equal("1 ng/l", new Density(1, DensityUnit.NanogramPerLiter).ToString());
                Assert.Equal("1 ng/ml", new Density(1, DensityUnit.NanogramPerMilliliter).ToString());
                Assert.Equal("1 pg/dl", new Density(1, DensityUnit.PicogramPerDeciliter).ToString());
                Assert.Equal("1 pg/l", new Density(1, DensityUnit.PicogramPerLiter).ToString());
                Assert.Equal("1 pg/ml", new Density(1, DensityUnit.PicogramPerMilliliter).ToString());
                Assert.Equal("1 lb/cm³", new Density(1, DensityUnit.PoundPerCubicCentimeter).ToString());
                Assert.Equal("1 lb/ft³", new Density(1, DensityUnit.PoundPerCubicFoot).ToString());
                Assert.Equal("1 lb/in³", new Density(1, DensityUnit.PoundPerCubicInch).ToString());
                Assert.Equal("1 lb/m³", new Density(1, DensityUnit.PoundPerCubicMeter).ToString());
                Assert.Equal("1 lb/mm³", new Density(1, DensityUnit.PoundPerCubicMillimeter).ToString());
                Assert.Equal("1 lb/yd³", new Density(1, DensityUnit.PoundPerCubicYard).ToString());
                Assert.Equal("1 ppg (imp.)", new Density(1, DensityUnit.PoundPerImperialGallon).ToString());
                Assert.Equal("1 ppg (U.S.)", new Density(1, DensityUnit.PoundPerUSGallon).ToString());
                Assert.Equal("1 slug/cm³", new Density(1, DensityUnit.SlugPerCubicCentimeter).ToString());
                Assert.Equal("1 slug/ft³", new Density(1, DensityUnit.SlugPerCubicFoot).ToString());
                Assert.Equal("1 slug/in³", new Density(1, DensityUnit.SlugPerCubicInch).ToString());
                Assert.Equal("1 slug/m³", new Density(1, DensityUnit.SlugPerCubicMeter).ToString());
                Assert.Equal("1 slug/mm³", new Density(1, DensityUnit.SlugPerCubicMillimeter).ToString());
                Assert.Equal("1 t/cm³", new Density(1, DensityUnit.TonnePerCubicCentimeter).ToString());
                Assert.Equal("1 t/ft³", new Density(1, DensityUnit.TonnePerCubicFoot).ToString());
                Assert.Equal("1 t/in³", new Density(1, DensityUnit.TonnePerCubicInch).ToString());
                Assert.Equal("1 t/m³", new Density(1, DensityUnit.TonnePerCubicMeter).ToString());
                Assert.Equal("1 t/mm³", new Density(1, DensityUnit.TonnePerCubicMillimeter).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cg/dl", new Density(1, DensityUnit.CentigramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 cg/l", new Density(1, DensityUnit.CentigramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 cg/ml", new Density(1, DensityUnit.CentigramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 dg/dl", new Density(1, DensityUnit.DecigramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 dg/l", new Density(1, DensityUnit.DecigramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 dg/ml", new Density(1, DensityUnit.DecigramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 fg/dl", new Density(1, DensityUnit.FemtogramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 fg/l", new Density(1, DensityUnit.FemtogramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 fg/ml", new Density(1, DensityUnit.FemtogramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 g/cm³", new Density(1, DensityUnit.GramPerCubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 g/ft³", new Density(1, DensityUnit.GramPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 g/in³", new Density(1, DensityUnit.GramPerCubicInch).ToString(swedishCulture));
            Assert.Equal("1 g/m³", new Density(1, DensityUnit.GramPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 g/mm³", new Density(1, DensityUnit.GramPerCubicMillimeter).ToString(swedishCulture));
            Assert.Equal("1 g/dl", new Density(1, DensityUnit.GramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 g/l", new Density(1, DensityUnit.GramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 g/ml", new Density(1, DensityUnit.GramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 kg/cm³", new Density(1, DensityUnit.KilogramPerCubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kg/m³", new Density(1, DensityUnit.KilogramPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 kg/mm³", new Density(1, DensityUnit.KilogramPerCubicMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kg/l", new Density(1, DensityUnit.KilogramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 kip/ft³", new Density(1, DensityUnit.KilopoundPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 kip/in³", new Density(1, DensityUnit.KilopoundPerCubicInch).ToString(swedishCulture));
            Assert.Equal("1 kip/yd³", new Density(1, DensityUnit.KilopoundPerCubicYard).ToString(swedishCulture));
            Assert.Equal("1 µg/m³", new Density(1, DensityUnit.MicrogramPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 µg/dl", new Density(1, DensityUnit.MicrogramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 µg/l", new Density(1, DensityUnit.MicrogramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 µg/ml", new Density(1, DensityUnit.MicrogramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 mg/m³", new Density(1, DensityUnit.MilligramPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 mg/dl", new Density(1, DensityUnit.MilligramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 mg/l", new Density(1, DensityUnit.MilligramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 mg/ml", new Density(1, DensityUnit.MilligramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 ng/dl", new Density(1, DensityUnit.NanogramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 ng/l", new Density(1, DensityUnit.NanogramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 ng/ml", new Density(1, DensityUnit.NanogramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 pg/dl", new Density(1, DensityUnit.PicogramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 pg/l", new Density(1, DensityUnit.PicogramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 pg/ml", new Density(1, DensityUnit.PicogramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 lb/cm³", new Density(1, DensityUnit.PoundPerCubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 lb/ft³", new Density(1, DensityUnit.PoundPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 lb/in³", new Density(1, DensityUnit.PoundPerCubicInch).ToString(swedishCulture));
            Assert.Equal("1 lb/m³", new Density(1, DensityUnit.PoundPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 lb/mm³", new Density(1, DensityUnit.PoundPerCubicMillimeter).ToString(swedishCulture));
            Assert.Equal("1 lb/yd³", new Density(1, DensityUnit.PoundPerCubicYard).ToString(swedishCulture));
            Assert.Equal("1 ppg (imp.)", new Density(1, DensityUnit.PoundPerImperialGallon).ToString(swedishCulture));
            Assert.Equal("1 ppg (U.S.)", new Density(1, DensityUnit.PoundPerUSGallon).ToString(swedishCulture));
            Assert.Equal("1 slug/cm³", new Density(1, DensityUnit.SlugPerCubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 slug/ft³", new Density(1, DensityUnit.SlugPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 slug/in³", new Density(1, DensityUnit.SlugPerCubicInch).ToString(swedishCulture));
            Assert.Equal("1 slug/m³", new Density(1, DensityUnit.SlugPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 slug/mm³", new Density(1, DensityUnit.SlugPerCubicMillimeter).ToString(swedishCulture));
            Assert.Equal("1 t/cm³", new Density(1, DensityUnit.TonnePerCubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 t/ft³", new Density(1, DensityUnit.TonnePerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 t/in³", new Density(1, DensityUnit.TonnePerCubicInch).ToString(swedishCulture));
            Assert.Equal("1 t/m³", new Density(1, DensityUnit.TonnePerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 t/mm³", new Density(1, DensityUnit.TonnePerCubicMillimeter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentCulture;
            try
            {
                CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 kg/m³", new Density(0.123456, DensityUnit.KilogramPerCubicMeter).ToString("s1"));
                Assert.Equal("0.12 kg/m³", new Density(0.123456, DensityUnit.KilogramPerCubicMeter).ToString("s2"));
                Assert.Equal("0.123 kg/m³", new Density(0.123456, DensityUnit.KilogramPerCubicMeter).ToString("s3"));
                Assert.Equal("0.1235 kg/m³", new Density(0.123456, DensityUnit.KilogramPerCubicMeter).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentCulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 kg/m³", new Density(0.123456, DensityUnit.KilogramPerCubicMeter).ToString("s1", culture));
            Assert.Equal("0.12 kg/m³", new Density(0.123456, DensityUnit.KilogramPerCubicMeter).ToString("s2", culture));
            Assert.Equal("0.123 kg/m³", new Density(0.123456, DensityUnit.KilogramPerCubicMeter).ToString("s3", culture));
            Assert.Equal("0.1235 kg/m³", new Density(0.123456, DensityUnit.KilogramPerCubicMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("g", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(Density)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(DensityUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal(Density.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal(Density.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            #if NET7_0_OR_GREATER
            var expected = HashCode.Combine(Density.Info.Name, quantity.KilogramsPerCubicMeter);
            #else
            var expected = new {Density.Info.Name, valueInBaseUnit = quantity.KilogramsPerCubicMeter}.GetHashCode();
            #endif
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Density.FromKilogramsPerCubicMeter(value);
            Assert.Equal(Density.FromKilogramsPerCubicMeter(-value), -quantity);
        }
    }
}
