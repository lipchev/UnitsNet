//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Length.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class LengthTestsBase : QuantityTestsBase
    {
        protected abstract double AngstromsInOneMeter { get; }
        protected abstract double AstronomicalUnitsInOneMeter { get; }
        protected abstract double CentimetersInOneMeter { get; }
        protected abstract double ChainsInOneMeter { get; }
        protected abstract double DataMilesInOneMeter { get; }
        protected abstract double DecametersInOneMeter { get; }
        protected abstract double DecimetersInOneMeter { get; }
        protected abstract double DtpPicasInOneMeter { get; }
        protected abstract double DtpPointsInOneMeter { get; }
        protected abstract double FathomsInOneMeter { get; }
        protected abstract double FemtometersInOneMeter { get; }
        protected abstract double FeetInOneMeter { get; }
        protected abstract double GigametersInOneMeter { get; }
        protected abstract double HandsInOneMeter { get; }
        protected abstract double HectometersInOneMeter { get; }
        protected abstract double InchesInOneMeter { get; }
        protected abstract double KilofeetInOneMeter { get; }
        protected abstract double KilolightYearsInOneMeter { get; }
        protected abstract double KilometersInOneMeter { get; }
        protected abstract double KiloparsecsInOneMeter { get; }
        protected abstract double KiloyardsInOneMeter { get; }
        protected abstract double LightYearsInOneMeter { get; }
        protected abstract double MegalightYearsInOneMeter { get; }
        protected abstract double MegametersInOneMeter { get; }
        protected abstract double MegaparsecsInOneMeter { get; }
        protected abstract double MetersInOneMeter { get; }
        protected abstract double MicroinchesInOneMeter { get; }
        protected abstract double MicrometersInOneMeter { get; }
        protected abstract double MilsInOneMeter { get; }
        protected abstract double MilesInOneMeter { get; }
        protected abstract double MillimetersInOneMeter { get; }
        protected abstract double NanometersInOneMeter { get; }
        protected abstract double NauticalMilesInOneMeter { get; }
        protected abstract double ParsecsInOneMeter { get; }
        protected abstract double PicometersInOneMeter { get; }
        protected abstract double PrinterPicasInOneMeter { get; }
        protected abstract double PrinterPointsInOneMeter { get; }
        protected abstract double ShacklesInOneMeter { get; }
        protected abstract double SolarRadiusesInOneMeter { get; }
        protected abstract double TwipsInOneMeter { get; }
        protected abstract double UsSurveyFeetInOneMeter { get; }
        protected abstract double YardsInOneMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double AngstromsTolerance { get { return 1e-5; } }
        protected virtual double AstronomicalUnitsTolerance { get { return 1e-5; } }
        protected virtual double CentimetersTolerance { get { return 1e-5; } }
        protected virtual double ChainsTolerance { get { return 1e-5; } }
        protected virtual double DataMilesTolerance { get { return 1e-5; } }
        protected virtual double DecametersTolerance { get { return 1e-5; } }
        protected virtual double DecimetersTolerance { get { return 1e-5; } }
        protected virtual double DtpPicasTolerance { get { return 1e-5; } }
        protected virtual double DtpPointsTolerance { get { return 1e-5; } }
        protected virtual double FathomsTolerance { get { return 1e-5; } }
        protected virtual double FemtometersTolerance { get { return 1e-5; } }
        protected virtual double FeetTolerance { get { return 1e-5; } }
        protected virtual double GigametersTolerance { get { return 1e-5; } }
        protected virtual double HandsTolerance { get { return 1e-5; } }
        protected virtual double HectometersTolerance { get { return 1e-5; } }
        protected virtual double InchesTolerance { get { return 1e-5; } }
        protected virtual double KilofeetTolerance { get { return 1e-5; } }
        protected virtual double KilolightYearsTolerance { get { return 1e-5; } }
        protected virtual double KilometersTolerance { get { return 1e-5; } }
        protected virtual double KiloparsecsTolerance { get { return 1e-5; } }
        protected virtual double KiloyardsTolerance { get { return 1e-5; } }
        protected virtual double LightYearsTolerance { get { return 1e-5; } }
        protected virtual double MegalightYearsTolerance { get { return 1e-5; } }
        protected virtual double MegametersTolerance { get { return 1e-5; } }
        protected virtual double MegaparsecsTolerance { get { return 1e-5; } }
        protected virtual double MetersTolerance { get { return 1e-5; } }
        protected virtual double MicroinchesTolerance { get { return 1e-5; } }
        protected virtual double MicrometersTolerance { get { return 1e-5; } }
        protected virtual double MilsTolerance { get { return 1e-5; } }
        protected virtual double MilesTolerance { get { return 1e-5; } }
        protected virtual double MillimetersTolerance { get { return 1e-5; } }
        protected virtual double NanometersTolerance { get { return 1e-5; } }
        protected virtual double NauticalMilesTolerance { get { return 1e-5; } }
        protected virtual double ParsecsTolerance { get { return 1e-5; } }
        protected virtual double PicometersTolerance { get { return 1e-5; } }
        protected virtual double PrinterPicasTolerance { get { return 1e-5; } }
        protected virtual double PrinterPointsTolerance { get { return 1e-5; } }
        protected virtual double ShacklesTolerance { get { return 1e-5; } }
        protected virtual double SolarRadiusesTolerance { get { return 1e-5; } }
        protected virtual double TwipsTolerance { get { return 1e-5; } }
        protected virtual double UsSurveyFeetTolerance { get { return 1e-5; } }
        protected virtual double YardsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(LengthUnit unit)
        {
            return unit switch
            {
                LengthUnit.Angstrom => (AngstromsInOneMeter, AngstromsTolerance),
                LengthUnit.AstronomicalUnit => (AstronomicalUnitsInOneMeter, AstronomicalUnitsTolerance),
                LengthUnit.Centimeter => (CentimetersInOneMeter, CentimetersTolerance),
                LengthUnit.Chain => (ChainsInOneMeter, ChainsTolerance),
                LengthUnit.DataMile => (DataMilesInOneMeter, DataMilesTolerance),
                LengthUnit.Decameter => (DecametersInOneMeter, DecametersTolerance),
                LengthUnit.Decimeter => (DecimetersInOneMeter, DecimetersTolerance),
                LengthUnit.DtpPica => (DtpPicasInOneMeter, DtpPicasTolerance),
                LengthUnit.DtpPoint => (DtpPointsInOneMeter, DtpPointsTolerance),
                LengthUnit.Fathom => (FathomsInOneMeter, FathomsTolerance),
                LengthUnit.Femtometer => (FemtometersInOneMeter, FemtometersTolerance),
                LengthUnit.Foot => (FeetInOneMeter, FeetTolerance),
                LengthUnit.Gigameter => (GigametersInOneMeter, GigametersTolerance),
                LengthUnit.Hand => (HandsInOneMeter, HandsTolerance),
                LengthUnit.Hectometer => (HectometersInOneMeter, HectometersTolerance),
                LengthUnit.Inch => (InchesInOneMeter, InchesTolerance),
                LengthUnit.Kilofoot => (KilofeetInOneMeter, KilofeetTolerance),
                LengthUnit.KilolightYear => (KilolightYearsInOneMeter, KilolightYearsTolerance),
                LengthUnit.Kilometer => (KilometersInOneMeter, KilometersTolerance),
                LengthUnit.Kiloparsec => (KiloparsecsInOneMeter, KiloparsecsTolerance),
                LengthUnit.Kiloyard => (KiloyardsInOneMeter, KiloyardsTolerance),
                LengthUnit.LightYear => (LightYearsInOneMeter, LightYearsTolerance),
                LengthUnit.MegalightYear => (MegalightYearsInOneMeter, MegalightYearsTolerance),
                LengthUnit.Megameter => (MegametersInOneMeter, MegametersTolerance),
                LengthUnit.Megaparsec => (MegaparsecsInOneMeter, MegaparsecsTolerance),
                LengthUnit.Meter => (MetersInOneMeter, MetersTolerance),
                LengthUnit.Microinch => (MicroinchesInOneMeter, MicroinchesTolerance),
                LengthUnit.Micrometer => (MicrometersInOneMeter, MicrometersTolerance),
                LengthUnit.Mil => (MilsInOneMeter, MilsTolerance),
                LengthUnit.Mile => (MilesInOneMeter, MilesTolerance),
                LengthUnit.Millimeter => (MillimetersInOneMeter, MillimetersTolerance),
                LengthUnit.Nanometer => (NanometersInOneMeter, NanometersTolerance),
                LengthUnit.NauticalMile => (NauticalMilesInOneMeter, NauticalMilesTolerance),
                LengthUnit.Parsec => (ParsecsInOneMeter, ParsecsTolerance),
                LengthUnit.Picometer => (PicometersInOneMeter, PicometersTolerance),
                LengthUnit.PrinterPica => (PrinterPicasInOneMeter, PrinterPicasTolerance),
                LengthUnit.PrinterPoint => (PrinterPointsInOneMeter, PrinterPointsTolerance),
                LengthUnit.Shackle => (ShacklesInOneMeter, ShacklesTolerance),
                LengthUnit.SolarRadius => (SolarRadiusesInOneMeter, SolarRadiusesTolerance),
                LengthUnit.Twip => (TwipsInOneMeter, TwipsTolerance),
                LengthUnit.UsSurveyFoot => (UsSurveyFeetInOneMeter, UsSurveyFeetTolerance),
                LengthUnit.Yard => (YardsInOneMeter, YardsTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { LengthUnit.Angstrom },
            new object[] { LengthUnit.AstronomicalUnit },
            new object[] { LengthUnit.Centimeter },
            new object[] { LengthUnit.Chain },
            new object[] { LengthUnit.DataMile },
            new object[] { LengthUnit.Decameter },
            new object[] { LengthUnit.Decimeter },
            new object[] { LengthUnit.DtpPica },
            new object[] { LengthUnit.DtpPoint },
            new object[] { LengthUnit.Fathom },
            new object[] { LengthUnit.Femtometer },
            new object[] { LengthUnit.Foot },
            new object[] { LengthUnit.Gigameter },
            new object[] { LengthUnit.Hand },
            new object[] { LengthUnit.Hectometer },
            new object[] { LengthUnit.Inch },
            new object[] { LengthUnit.Kilofoot },
            new object[] { LengthUnit.KilolightYear },
            new object[] { LengthUnit.Kilometer },
            new object[] { LengthUnit.Kiloparsec },
            new object[] { LengthUnit.Kiloyard },
            new object[] { LengthUnit.LightYear },
            new object[] { LengthUnit.MegalightYear },
            new object[] { LengthUnit.Megameter },
            new object[] { LengthUnit.Megaparsec },
            new object[] { LengthUnit.Meter },
            new object[] { LengthUnit.Microinch },
            new object[] { LengthUnit.Micrometer },
            new object[] { LengthUnit.Mil },
            new object[] { LengthUnit.Mile },
            new object[] { LengthUnit.Millimeter },
            new object[] { LengthUnit.Nanometer },
            new object[] { LengthUnit.NauticalMile },
            new object[] { LengthUnit.Parsec },
            new object[] { LengthUnit.Picometer },
            new object[] { LengthUnit.PrinterPica },
            new object[] { LengthUnit.PrinterPoint },
            new object[] { LengthUnit.Shackle },
            new object[] { LengthUnit.SolarRadius },
            new object[] { LengthUnit.Twip },
            new object[] { LengthUnit.UsSurveyFoot },
            new object[] { LengthUnit.Yard },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Length();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(LengthUnit.Meter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Length(double.PositiveInfinity, LengthUnit.Meter));
            var exception2 = Record.Exception(() => new Length(double.NegativeInfinity, LengthUnit.Meter));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Length(double.NaN, LengthUnit.Meter));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Length(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            if (SupportsSIUnitSystem)
            {
                var quantity = new Length(value: 1, unitSystem: UnitSystem.SI);
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(() => new Length(value: 1, unitSystem: UnitSystem.SI));
            }
        }

        [Fact]
        public void Length_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Length(1, LengthUnit.Meter);

            QuantityInfo<LengthUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Length.Zero, quantityInfo.Zero);
            Assert.Equal("Length", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<LengthUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void MeterToLengthUnits()
        {
            Length meter = Length.FromMeters(1);
            AssertEx.EqualTolerance(AngstromsInOneMeter, meter.Angstroms, AngstromsTolerance);
            AssertEx.EqualTolerance(AstronomicalUnitsInOneMeter, meter.AstronomicalUnits, AstronomicalUnitsTolerance);
            AssertEx.EqualTolerance(CentimetersInOneMeter, meter.Centimeters, CentimetersTolerance);
            AssertEx.EqualTolerance(ChainsInOneMeter, meter.Chains, ChainsTolerance);
            AssertEx.EqualTolerance(DataMilesInOneMeter, meter.DataMiles, DataMilesTolerance);
            AssertEx.EqualTolerance(DecametersInOneMeter, meter.Decameters, DecametersTolerance);
            AssertEx.EqualTolerance(DecimetersInOneMeter, meter.Decimeters, DecimetersTolerance);
            AssertEx.EqualTolerance(DtpPicasInOneMeter, meter.DtpPicas, DtpPicasTolerance);
            AssertEx.EqualTolerance(DtpPointsInOneMeter, meter.DtpPoints, DtpPointsTolerance);
            AssertEx.EqualTolerance(FathomsInOneMeter, meter.Fathoms, FathomsTolerance);
            AssertEx.EqualTolerance(FemtometersInOneMeter, meter.Femtometers, FemtometersTolerance);
            AssertEx.EqualTolerance(FeetInOneMeter, meter.Feet, FeetTolerance);
            AssertEx.EqualTolerance(GigametersInOneMeter, meter.Gigameters, GigametersTolerance);
            AssertEx.EqualTolerance(HandsInOneMeter, meter.Hands, HandsTolerance);
            AssertEx.EqualTolerance(HectometersInOneMeter, meter.Hectometers, HectometersTolerance);
            AssertEx.EqualTolerance(InchesInOneMeter, meter.Inches, InchesTolerance);
            AssertEx.EqualTolerance(KilofeetInOneMeter, meter.Kilofeet, KilofeetTolerance);
            AssertEx.EqualTolerance(KilolightYearsInOneMeter, meter.KilolightYears, KilolightYearsTolerance);
            AssertEx.EqualTolerance(KilometersInOneMeter, meter.Kilometers, KilometersTolerance);
            AssertEx.EqualTolerance(KiloparsecsInOneMeter, meter.Kiloparsecs, KiloparsecsTolerance);
            AssertEx.EqualTolerance(KiloyardsInOneMeter, meter.Kiloyards, KiloyardsTolerance);
            AssertEx.EqualTolerance(LightYearsInOneMeter, meter.LightYears, LightYearsTolerance);
            AssertEx.EqualTolerance(MegalightYearsInOneMeter, meter.MegalightYears, MegalightYearsTolerance);
            AssertEx.EqualTolerance(MegametersInOneMeter, meter.Megameters, MegametersTolerance);
            AssertEx.EqualTolerance(MegaparsecsInOneMeter, meter.Megaparsecs, MegaparsecsTolerance);
            AssertEx.EqualTolerance(MetersInOneMeter, meter.Meters, MetersTolerance);
            AssertEx.EqualTolerance(MicroinchesInOneMeter, meter.Microinches, MicroinchesTolerance);
            AssertEx.EqualTolerance(MicrometersInOneMeter, meter.Micrometers, MicrometersTolerance);
            AssertEx.EqualTolerance(MilsInOneMeter, meter.Mils, MilsTolerance);
            AssertEx.EqualTolerance(MilesInOneMeter, meter.Miles, MilesTolerance);
            AssertEx.EqualTolerance(MillimetersInOneMeter, meter.Millimeters, MillimetersTolerance);
            AssertEx.EqualTolerance(NanometersInOneMeter, meter.Nanometers, NanometersTolerance);
            AssertEx.EqualTolerance(NauticalMilesInOneMeter, meter.NauticalMiles, NauticalMilesTolerance);
            AssertEx.EqualTolerance(ParsecsInOneMeter, meter.Parsecs, ParsecsTolerance);
            AssertEx.EqualTolerance(PicometersInOneMeter, meter.Picometers, PicometersTolerance);
            AssertEx.EqualTolerance(PrinterPicasInOneMeter, meter.PrinterPicas, PrinterPicasTolerance);
            AssertEx.EqualTolerance(PrinterPointsInOneMeter, meter.PrinterPoints, PrinterPointsTolerance);
            AssertEx.EqualTolerance(ShacklesInOneMeter, meter.Shackles, ShacklesTolerance);
            AssertEx.EqualTolerance(SolarRadiusesInOneMeter, meter.SolarRadiuses, SolarRadiusesTolerance);
            AssertEx.EqualTolerance(TwipsInOneMeter, meter.Twips, TwipsTolerance);
            AssertEx.EqualTolerance(UsSurveyFeetInOneMeter, meter.UsSurveyFeet, UsSurveyFeetTolerance);
            AssertEx.EqualTolerance(YardsInOneMeter, meter.Yards, YardsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Length.From(1, LengthUnit.Angstrom);
            Assert.Equal(1, quantity00.Angstroms);
            Assert.Equal(LengthUnit.Angstrom, quantity00.Unit);

            var quantity01 = Length.From(1, LengthUnit.AstronomicalUnit);
            Assert.Equal(1, quantity01.AstronomicalUnits);
            Assert.Equal(LengthUnit.AstronomicalUnit, quantity01.Unit);

            var quantity02 = Length.From(1, LengthUnit.Centimeter);
            Assert.Equal(1, quantity02.Centimeters);
            Assert.Equal(LengthUnit.Centimeter, quantity02.Unit);

            var quantity03 = Length.From(1, LengthUnit.Chain);
            Assert.Equal(1, quantity03.Chains);
            Assert.Equal(LengthUnit.Chain, quantity03.Unit);

            var quantity04 = Length.From(1, LengthUnit.DataMile);
            Assert.Equal(1, quantity04.DataMiles);
            Assert.Equal(LengthUnit.DataMile, quantity04.Unit);

            var quantity05 = Length.From(1, LengthUnit.Decameter);
            Assert.Equal(1, quantity05.Decameters);
            Assert.Equal(LengthUnit.Decameter, quantity05.Unit);

            var quantity06 = Length.From(1, LengthUnit.Decimeter);
            Assert.Equal(1, quantity06.Decimeters);
            Assert.Equal(LengthUnit.Decimeter, quantity06.Unit);

            var quantity07 = Length.From(1, LengthUnit.DtpPica);
            Assert.Equal(1, quantity07.DtpPicas);
            Assert.Equal(LengthUnit.DtpPica, quantity07.Unit);

            var quantity08 = Length.From(1, LengthUnit.DtpPoint);
            Assert.Equal(1, quantity08.DtpPoints);
            Assert.Equal(LengthUnit.DtpPoint, quantity08.Unit);

            var quantity09 = Length.From(1, LengthUnit.Fathom);
            Assert.Equal(1, quantity09.Fathoms);
            Assert.Equal(LengthUnit.Fathom, quantity09.Unit);

            var quantity10 = Length.From(1, LengthUnit.Femtometer);
            Assert.Equal(1, quantity10.Femtometers);
            Assert.Equal(LengthUnit.Femtometer, quantity10.Unit);

            var quantity11 = Length.From(1, LengthUnit.Foot);
            Assert.Equal(1, quantity11.Feet);
            Assert.Equal(LengthUnit.Foot, quantity11.Unit);

            var quantity12 = Length.From(1, LengthUnit.Gigameter);
            Assert.Equal(1, quantity12.Gigameters);
            Assert.Equal(LengthUnit.Gigameter, quantity12.Unit);

            var quantity13 = Length.From(1, LengthUnit.Hand);
            Assert.Equal(1, quantity13.Hands);
            Assert.Equal(LengthUnit.Hand, quantity13.Unit);

            var quantity14 = Length.From(1, LengthUnit.Hectometer);
            Assert.Equal(1, quantity14.Hectometers);
            Assert.Equal(LengthUnit.Hectometer, quantity14.Unit);

            var quantity15 = Length.From(1, LengthUnit.Inch);
            Assert.Equal(1, quantity15.Inches);
            Assert.Equal(LengthUnit.Inch, quantity15.Unit);

            var quantity16 = Length.From(1, LengthUnit.Kilofoot);
            Assert.Equal(1, quantity16.Kilofeet);
            Assert.Equal(LengthUnit.Kilofoot, quantity16.Unit);

            var quantity17 = Length.From(1, LengthUnit.KilolightYear);
            Assert.Equal(1, quantity17.KilolightYears);
            Assert.Equal(LengthUnit.KilolightYear, quantity17.Unit);

            var quantity18 = Length.From(1, LengthUnit.Kilometer);
            Assert.Equal(1, quantity18.Kilometers);
            Assert.Equal(LengthUnit.Kilometer, quantity18.Unit);

            var quantity19 = Length.From(1, LengthUnit.Kiloparsec);
            Assert.Equal(1, quantity19.Kiloparsecs);
            Assert.Equal(LengthUnit.Kiloparsec, quantity19.Unit);

            var quantity20 = Length.From(1, LengthUnit.Kiloyard);
            Assert.Equal(1, quantity20.Kiloyards);
            Assert.Equal(LengthUnit.Kiloyard, quantity20.Unit);

            var quantity21 = Length.From(1, LengthUnit.LightYear);
            Assert.Equal(1, quantity21.LightYears);
            Assert.Equal(LengthUnit.LightYear, quantity21.Unit);

            var quantity22 = Length.From(1, LengthUnit.MegalightYear);
            Assert.Equal(1, quantity22.MegalightYears);
            Assert.Equal(LengthUnit.MegalightYear, quantity22.Unit);

            var quantity23 = Length.From(1, LengthUnit.Megameter);
            Assert.Equal(1, quantity23.Megameters);
            Assert.Equal(LengthUnit.Megameter, quantity23.Unit);

            var quantity24 = Length.From(1, LengthUnit.Megaparsec);
            Assert.Equal(1, quantity24.Megaparsecs);
            Assert.Equal(LengthUnit.Megaparsec, quantity24.Unit);

            var quantity25 = Length.From(1, LengthUnit.Meter);
            Assert.Equal(1, quantity25.Meters);
            Assert.Equal(LengthUnit.Meter, quantity25.Unit);

            var quantity26 = Length.From(1, LengthUnit.Microinch);
            Assert.Equal(1, quantity26.Microinches);
            Assert.Equal(LengthUnit.Microinch, quantity26.Unit);

            var quantity27 = Length.From(1, LengthUnit.Micrometer);
            Assert.Equal(1, quantity27.Micrometers);
            Assert.Equal(LengthUnit.Micrometer, quantity27.Unit);

            var quantity28 = Length.From(1, LengthUnit.Mil);
            Assert.Equal(1, quantity28.Mils);
            Assert.Equal(LengthUnit.Mil, quantity28.Unit);

            var quantity29 = Length.From(1, LengthUnit.Mile);
            Assert.Equal(1, quantity29.Miles);
            Assert.Equal(LengthUnit.Mile, quantity29.Unit);

            var quantity30 = Length.From(1, LengthUnit.Millimeter);
            Assert.Equal(1, quantity30.Millimeters);
            Assert.Equal(LengthUnit.Millimeter, quantity30.Unit);

            var quantity31 = Length.From(1, LengthUnit.Nanometer);
            Assert.Equal(1, quantity31.Nanometers);
            Assert.Equal(LengthUnit.Nanometer, quantity31.Unit);

            var quantity32 = Length.From(1, LengthUnit.NauticalMile);
            Assert.Equal(1, quantity32.NauticalMiles);
            Assert.Equal(LengthUnit.NauticalMile, quantity32.Unit);

            var quantity33 = Length.From(1, LengthUnit.Parsec);
            Assert.Equal(1, quantity33.Parsecs);
            Assert.Equal(LengthUnit.Parsec, quantity33.Unit);

            var quantity34 = Length.From(1, LengthUnit.Picometer);
            Assert.Equal(1, quantity34.Picometers);
            Assert.Equal(LengthUnit.Picometer, quantity34.Unit);

            var quantity35 = Length.From(1, LengthUnit.PrinterPica);
            Assert.Equal(1, quantity35.PrinterPicas);
            Assert.Equal(LengthUnit.PrinterPica, quantity35.Unit);

            var quantity36 = Length.From(1, LengthUnit.PrinterPoint);
            Assert.Equal(1, quantity36.PrinterPoints);
            Assert.Equal(LengthUnit.PrinterPoint, quantity36.Unit);

            var quantity37 = Length.From(1, LengthUnit.Shackle);
            Assert.Equal(1, quantity37.Shackles);
            Assert.Equal(LengthUnit.Shackle, quantity37.Unit);

            var quantity38 = Length.From(1, LengthUnit.SolarRadius);
            Assert.Equal(1, quantity38.SolarRadiuses);
            Assert.Equal(LengthUnit.SolarRadius, quantity38.Unit);

            var quantity39 = Length.From(1, LengthUnit.Twip);
            Assert.Equal(1, quantity39.Twips);
            Assert.Equal(LengthUnit.Twip, quantity39.Unit);

            var quantity40 = Length.From(1, LengthUnit.UsSurveyFoot);
            Assert.Equal(1, quantity40.UsSurveyFeet);
            Assert.Equal(LengthUnit.UsSurveyFoot, quantity40.Unit);

            var quantity41 = Length.From(1, LengthUnit.Yard);
            Assert.Equal(1, quantity41.Yards);
            Assert.Equal(LengthUnit.Yard, quantity41.Unit);

        }

        [Fact]
        public void FromMeters_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Length.FromMeters(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Length.FromMeters(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromMeters_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Length.FromMeters(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var meter = Length.FromMeters(1);
            AssertEx.EqualTolerance(AngstromsInOneMeter, meter.As(LengthUnit.Angstrom), AngstromsTolerance);
            AssertEx.EqualTolerance(AstronomicalUnitsInOneMeter, meter.As(LengthUnit.AstronomicalUnit), AstronomicalUnitsTolerance);
            AssertEx.EqualTolerance(CentimetersInOneMeter, meter.As(LengthUnit.Centimeter), CentimetersTolerance);
            AssertEx.EqualTolerance(ChainsInOneMeter, meter.As(LengthUnit.Chain), ChainsTolerance);
            AssertEx.EqualTolerance(DataMilesInOneMeter, meter.As(LengthUnit.DataMile), DataMilesTolerance);
            AssertEx.EqualTolerance(DecametersInOneMeter, meter.As(LengthUnit.Decameter), DecametersTolerance);
            AssertEx.EqualTolerance(DecimetersInOneMeter, meter.As(LengthUnit.Decimeter), DecimetersTolerance);
            AssertEx.EqualTolerance(DtpPicasInOneMeter, meter.As(LengthUnit.DtpPica), DtpPicasTolerance);
            AssertEx.EqualTolerance(DtpPointsInOneMeter, meter.As(LengthUnit.DtpPoint), DtpPointsTolerance);
            AssertEx.EqualTolerance(FathomsInOneMeter, meter.As(LengthUnit.Fathom), FathomsTolerance);
            AssertEx.EqualTolerance(FemtometersInOneMeter, meter.As(LengthUnit.Femtometer), FemtometersTolerance);
            AssertEx.EqualTolerance(FeetInOneMeter, meter.As(LengthUnit.Foot), FeetTolerance);
            AssertEx.EqualTolerance(GigametersInOneMeter, meter.As(LengthUnit.Gigameter), GigametersTolerance);
            AssertEx.EqualTolerance(HandsInOneMeter, meter.As(LengthUnit.Hand), HandsTolerance);
            AssertEx.EqualTolerance(HectometersInOneMeter, meter.As(LengthUnit.Hectometer), HectometersTolerance);
            AssertEx.EqualTolerance(InchesInOneMeter, meter.As(LengthUnit.Inch), InchesTolerance);
            AssertEx.EqualTolerance(KilofeetInOneMeter, meter.As(LengthUnit.Kilofoot), KilofeetTolerance);
            AssertEx.EqualTolerance(KilolightYearsInOneMeter, meter.As(LengthUnit.KilolightYear), KilolightYearsTolerance);
            AssertEx.EqualTolerance(KilometersInOneMeter, meter.As(LengthUnit.Kilometer), KilometersTolerance);
            AssertEx.EqualTolerance(KiloparsecsInOneMeter, meter.As(LengthUnit.Kiloparsec), KiloparsecsTolerance);
            AssertEx.EqualTolerance(KiloyardsInOneMeter, meter.As(LengthUnit.Kiloyard), KiloyardsTolerance);
            AssertEx.EqualTolerance(LightYearsInOneMeter, meter.As(LengthUnit.LightYear), LightYearsTolerance);
            AssertEx.EqualTolerance(MegalightYearsInOneMeter, meter.As(LengthUnit.MegalightYear), MegalightYearsTolerance);
            AssertEx.EqualTolerance(MegametersInOneMeter, meter.As(LengthUnit.Megameter), MegametersTolerance);
            AssertEx.EqualTolerance(MegaparsecsInOneMeter, meter.As(LengthUnit.Megaparsec), MegaparsecsTolerance);
            AssertEx.EqualTolerance(MetersInOneMeter, meter.As(LengthUnit.Meter), MetersTolerance);
            AssertEx.EqualTolerance(MicroinchesInOneMeter, meter.As(LengthUnit.Microinch), MicroinchesTolerance);
            AssertEx.EqualTolerance(MicrometersInOneMeter, meter.As(LengthUnit.Micrometer), MicrometersTolerance);
            AssertEx.EqualTolerance(MilsInOneMeter, meter.As(LengthUnit.Mil), MilsTolerance);
            AssertEx.EqualTolerance(MilesInOneMeter, meter.As(LengthUnit.Mile), MilesTolerance);
            AssertEx.EqualTolerance(MillimetersInOneMeter, meter.As(LengthUnit.Millimeter), MillimetersTolerance);
            AssertEx.EqualTolerance(NanometersInOneMeter, meter.As(LengthUnit.Nanometer), NanometersTolerance);
            AssertEx.EqualTolerance(NauticalMilesInOneMeter, meter.As(LengthUnit.NauticalMile), NauticalMilesTolerance);
            AssertEx.EqualTolerance(ParsecsInOneMeter, meter.As(LengthUnit.Parsec), ParsecsTolerance);
            AssertEx.EqualTolerance(PicometersInOneMeter, meter.As(LengthUnit.Picometer), PicometersTolerance);
            AssertEx.EqualTolerance(PrinterPicasInOneMeter, meter.As(LengthUnit.PrinterPica), PrinterPicasTolerance);
            AssertEx.EqualTolerance(PrinterPointsInOneMeter, meter.As(LengthUnit.PrinterPoint), PrinterPointsTolerance);
            AssertEx.EqualTolerance(ShacklesInOneMeter, meter.As(LengthUnit.Shackle), ShacklesTolerance);
            AssertEx.EqualTolerance(SolarRadiusesInOneMeter, meter.As(LengthUnit.SolarRadius), SolarRadiusesTolerance);
            AssertEx.EqualTolerance(TwipsInOneMeter, meter.As(LengthUnit.Twip), TwipsTolerance);
            AssertEx.EqualTolerance(UsSurveyFeetInOneMeter, meter.As(LengthUnit.UsSurveyFoot), UsSurveyFeetTolerance);
            AssertEx.EqualTolerance(YardsInOneMeter, meter.As(LengthUnit.Yard), YardsTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Length(value: 1, unit: Length.BaseUnit);
            if (SupportsSIUnitSystem)
            {
                Assert.Equal(1, quantity.As(UnitSystem.SI));
            }
            else
            {
                Assert.Throws<ArgumentException>(() => quantity.As(UnitSystem.SI));
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = Length.Parse("1 Å", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Angstroms);
                Assert.Equal(LengthUnit.Angstrom, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 A", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Angstroms);
                Assert.Equal(LengthUnit.Angstrom, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 au", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.AstronomicalUnits);
                Assert.Equal(LengthUnit.AstronomicalUnit, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 ua", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.AstronomicalUnits);
                Assert.Equal(LengthUnit.AstronomicalUnit, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 cm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Centimeters);
                Assert.Equal(LengthUnit.Centimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 см", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Centimeters);
                Assert.Equal(LengthUnit.Centimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 厘米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(1, parsed.Centimeters);
                Assert.Equal(LengthUnit.Centimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 ch", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Chains);
                Assert.Equal(LengthUnit.Chain, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 DM", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.DataMiles);
                Assert.Equal(LengthUnit.DataMile, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 dam", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Decameters);
                Assert.Equal(LengthUnit.Decameter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 дам", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Decameters);
                Assert.Equal(LengthUnit.Decameter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 十米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(1, parsed.Decameters);
                Assert.Equal(LengthUnit.Decameter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 dm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Decimeters);
                Assert.Equal(LengthUnit.Decimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 дм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Decimeters);
                Assert.Equal(LengthUnit.Decimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 分米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(1, parsed.Decimeters);
                Assert.Equal(LengthUnit.Decimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 pica", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.DtpPicas);
                Assert.Equal(LengthUnit.DtpPica, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 pt", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.DtpPoints);
                Assert.Equal(LengthUnit.DtpPoint, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 fathom", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Fathoms);
                Assert.Equal(LengthUnit.Fathom, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 fm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Femtometers);
                Assert.Equal(LengthUnit.Femtometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 фм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Femtometers);
                Assert.Equal(LengthUnit.Femtometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 飞米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(1, parsed.Femtometers);
                Assert.Equal(LengthUnit.Femtometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Feet);
                Assert.Equal(LengthUnit.Foot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 '", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Feet);
                Assert.Equal(LengthUnit.Foot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 ′", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Feet);
                Assert.Equal(LengthUnit.Foot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 фут", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Feet);
                Assert.Equal(LengthUnit.Foot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 英尺", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(1, parsed.Feet);
                Assert.Equal(LengthUnit.Foot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 Gm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Gigameters);
                Assert.Equal(LengthUnit.Gigameter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 Гм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Gigameters);
                Assert.Equal(LengthUnit.Gigameter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 吉米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(1, parsed.Gigameters);
                Assert.Equal(LengthUnit.Gigameter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 h", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Hands);
                Assert.Equal(LengthUnit.Hand, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 hh", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Hands);
                Assert.Equal(LengthUnit.Hand, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 hm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Hectometers);
                Assert.Equal(LengthUnit.Hectometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 гм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Hectometers);
                Assert.Equal(LengthUnit.Hectometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 百米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(1, parsed.Hectometers);
                Assert.Equal(LengthUnit.Hectometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 in", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Inches);
                Assert.Equal(LengthUnit.Inch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 \"", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Inches);
                Assert.Equal(LengthUnit.Inch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 ″", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Inches);
                Assert.Equal(LengthUnit.Inch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 дюйм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Inches);
                Assert.Equal(LengthUnit.Inch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 英寸", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(1, parsed.Inches);
                Assert.Equal(LengthUnit.Inch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 kft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Kilofeet);
                Assert.Equal(LengthUnit.Kilofoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 k'", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Kilofeet);
                Assert.Equal(LengthUnit.Kilofoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 k′", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Kilofeet);
                Assert.Equal(LengthUnit.Kilofoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 кфут", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Kilofeet);
                Assert.Equal(LengthUnit.Kilofoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 千英尺", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(1, parsed.Kilofeet);
                Assert.Equal(LengthUnit.Kilofoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 kly", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilolightYears);
                Assert.Equal(LengthUnit.KilolightYear, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 km", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Kilometers);
                Assert.Equal(LengthUnit.Kilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 км", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Kilometers);
                Assert.Equal(LengthUnit.Kilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 千米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(1, parsed.Kilometers);
                Assert.Equal(LengthUnit.Kilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 kpc", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Kiloparsecs);
                Assert.Equal(LengthUnit.Kiloparsec, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 kyd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Kiloyards);
                Assert.Equal(LengthUnit.Kiloyard, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 кярд", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Kiloyards);
                Assert.Equal(LengthUnit.Kiloyard, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 千码", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(1, parsed.Kiloyards);
                Assert.Equal(LengthUnit.Kiloyard, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 ly", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.LightYears);
                Assert.Equal(LengthUnit.LightYear, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 Mly", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MegalightYears);
                Assert.Equal(LengthUnit.MegalightYear, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 Mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Megameters);
                Assert.Equal(LengthUnit.Megameter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 Мм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Megameters);
                Assert.Equal(LengthUnit.Megameter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 兆米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(1, parsed.Megameters);
                Assert.Equal(LengthUnit.Megameter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 Mpc", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Megaparsecs);
                Assert.Equal(LengthUnit.Megaparsec, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Meters);
                Assert.Equal(LengthUnit.Meter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 м", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Meters);
                Assert.Equal(LengthUnit.Meter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(1, parsed.Meters);
                Assert.Equal(LengthUnit.Meter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 µin", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Microinches);
                Assert.Equal(LengthUnit.Microinch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 микродюйм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Microinches);
                Assert.Equal(LengthUnit.Microinch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 微英寸", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(1, parsed.Microinches);
                Assert.Equal(LengthUnit.Microinch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 µm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Micrometers);
                Assert.Equal(LengthUnit.Micrometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 мкм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Micrometers);
                Assert.Equal(LengthUnit.Micrometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 微米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(1, parsed.Micrometers);
                Assert.Equal(LengthUnit.Micrometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 mil", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Mils);
                Assert.Equal(LengthUnit.Mil, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 мил", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Mils);
                Assert.Equal(LengthUnit.Mil, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 密耳", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(1, parsed.Mils);
                Assert.Equal(LengthUnit.Mil, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 mi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Miles);
                Assert.Equal(LengthUnit.Mile, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 миля", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Miles);
                Assert.Equal(LengthUnit.Mile, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 英里", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(1, parsed.Miles);
                Assert.Equal(LengthUnit.Mile, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Millimeters);
                Assert.Equal(LengthUnit.Millimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 мм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Millimeters);
                Assert.Equal(LengthUnit.Millimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 毫米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(1, parsed.Millimeters);
                Assert.Equal(LengthUnit.Millimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 nm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Nanometers);
                Assert.Equal(LengthUnit.Nanometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 нм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Nanometers);
                Assert.Equal(LengthUnit.Nanometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 纳米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(1, parsed.Nanometers);
                Assert.Equal(LengthUnit.Nanometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 NM", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.NauticalMiles);
                Assert.Equal(LengthUnit.NauticalMile, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 nmi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.NauticalMiles);
                Assert.Equal(LengthUnit.NauticalMile, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 мил", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.NauticalMiles);
                Assert.Equal(LengthUnit.NauticalMile, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 纳米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(1, parsed.NauticalMiles);
                Assert.Equal(LengthUnit.NauticalMile, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 pc", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Parsecs);
                Assert.Equal(LengthUnit.Parsec, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 pm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Picometers);
                Assert.Equal(LengthUnit.Picometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 пм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Picometers);
                Assert.Equal(LengthUnit.Picometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 皮米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(1, parsed.Picometers);
                Assert.Equal(LengthUnit.Picometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 pica", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PrinterPicas);
                Assert.Equal(LengthUnit.PrinterPica, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 pt", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PrinterPoints);
                Assert.Equal(LengthUnit.PrinterPoint, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 shackle", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Shackles);
                Assert.Equal(LengthUnit.Shackle, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 R⊙", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.SolarRadiuses);
                Assert.Equal(LengthUnit.SolarRadius, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 twip", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Twips);
                Assert.Equal(LengthUnit.Twip, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 ftUS", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.UsSurveyFeet);
                Assert.Equal(LengthUnit.UsSurveyFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 yd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Yards);
                Assert.Equal(LengthUnit.Yard, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 ярд", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Yards);
                Assert.Equal(LengthUnit.Yard, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Length.Parse("1 码", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(1, parsed.Yards);
                Assert.Equal(LengthUnit.Yard, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(Length.TryParse("1 Å", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Angstroms);
                Assert.Equal(LengthUnit.Angstrom, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 A", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Angstroms);
                Assert.Equal(LengthUnit.Angstrom, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 au", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.AstronomicalUnits);
                Assert.Equal(LengthUnit.AstronomicalUnit, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 ua", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.AstronomicalUnits);
                Assert.Equal(LengthUnit.AstronomicalUnit, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Centimeters);
                Assert.Equal(LengthUnit.Centimeter, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 см", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Centimeters);
                Assert.Equal(LengthUnit.Centimeter, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 厘米", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                Assert.Equal(1, parsed.Centimeters);
                Assert.Equal(LengthUnit.Centimeter, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 ch", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Chains);
                Assert.Equal(LengthUnit.Chain, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 dam", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Decameters);
                Assert.Equal(LengthUnit.Decameter, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 дам", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Decameters);
                Assert.Equal(LengthUnit.Decameter, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 十米", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                Assert.Equal(1, parsed.Decameters);
                Assert.Equal(LengthUnit.Decameter, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 дм", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Decimeters);
                Assert.Equal(LengthUnit.Decimeter, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 分米", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                Assert.Equal(1, parsed.Decimeters);
                Assert.Equal(LengthUnit.Decimeter, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 fathom", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Fathoms);
                Assert.Equal(LengthUnit.Fathom, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 fm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Femtometers);
                Assert.Equal(LengthUnit.Femtometer, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 фм", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Femtometers);
                Assert.Equal(LengthUnit.Femtometer, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 飞米", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                Assert.Equal(1, parsed.Femtometers);
                Assert.Equal(LengthUnit.Femtometer, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Feet);
                Assert.Equal(LengthUnit.Foot, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 '", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Feet);
                Assert.Equal(LengthUnit.Foot, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 ′", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Feet);
                Assert.Equal(LengthUnit.Foot, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 фут", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Feet);
                Assert.Equal(LengthUnit.Foot, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 英尺", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                Assert.Equal(1, parsed.Feet);
                Assert.Equal(LengthUnit.Foot, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 Gm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Gigameters);
                Assert.Equal(LengthUnit.Gigameter, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 吉米", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                Assert.Equal(1, parsed.Gigameters);
                Assert.Equal(LengthUnit.Gigameter, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Hands);
                Assert.Equal(LengthUnit.Hand, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 hh", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Hands);
                Assert.Equal(LengthUnit.Hand, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 hm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Hectometers);
                Assert.Equal(LengthUnit.Hectometer, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 百米", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                Assert.Equal(1, parsed.Hectometers);
                Assert.Equal(LengthUnit.Hectometer, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 in", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Inches);
                Assert.Equal(LengthUnit.Inch, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 \"", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Inches);
                Assert.Equal(LengthUnit.Inch, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 ″", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Inches);
                Assert.Equal(LengthUnit.Inch, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 дюйм", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Inches);
                Assert.Equal(LengthUnit.Inch, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 英寸", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                Assert.Equal(1, parsed.Inches);
                Assert.Equal(LengthUnit.Inch, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 kft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Kilofeet);
                Assert.Equal(LengthUnit.Kilofoot, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 k'", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Kilofeet);
                Assert.Equal(LengthUnit.Kilofoot, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 k′", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Kilofeet);
                Assert.Equal(LengthUnit.Kilofoot, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 кфут", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Kilofeet);
                Assert.Equal(LengthUnit.Kilofoot, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 千英尺", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                Assert.Equal(1, parsed.Kilofeet);
                Assert.Equal(LengthUnit.Kilofoot, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 kly", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilolightYears);
                Assert.Equal(LengthUnit.KilolightYear, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 km", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Kilometers);
                Assert.Equal(LengthUnit.Kilometer, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 км", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Kilometers);
                Assert.Equal(LengthUnit.Kilometer, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 千米", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                Assert.Equal(1, parsed.Kilometers);
                Assert.Equal(LengthUnit.Kilometer, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 kpc", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Kiloparsecs);
                Assert.Equal(LengthUnit.Kiloparsec, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 kyd", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Kiloyards);
                Assert.Equal(LengthUnit.Kiloyard, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 кярд", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Kiloyards);
                Assert.Equal(LengthUnit.Kiloyard, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 千码", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                Assert.Equal(1, parsed.Kiloyards);
                Assert.Equal(LengthUnit.Kiloyard, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 ly", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.LightYears);
                Assert.Equal(LengthUnit.LightYear, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 Mly", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MegalightYears);
                Assert.Equal(LengthUnit.MegalightYear, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 兆米", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                Assert.Equal(1, parsed.Megameters);
                Assert.Equal(LengthUnit.Megameter, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 Mpc", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Megaparsecs);
                Assert.Equal(LengthUnit.Megaparsec, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Meters);
                Assert.Equal(LengthUnit.Meter, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 м", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Meters);
                Assert.Equal(LengthUnit.Meter, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 米", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                Assert.Equal(1, parsed.Meters);
                Assert.Equal(LengthUnit.Meter, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 µin", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Microinches);
                Assert.Equal(LengthUnit.Microinch, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 микродюйм", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Microinches);
                Assert.Equal(LengthUnit.Microinch, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 微英寸", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                Assert.Equal(1, parsed.Microinches);
                Assert.Equal(LengthUnit.Microinch, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 µm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Micrometers);
                Assert.Equal(LengthUnit.Micrometer, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 мкм", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Micrometers);
                Assert.Equal(LengthUnit.Micrometer, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 微米", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                Assert.Equal(1, parsed.Micrometers);
                Assert.Equal(LengthUnit.Micrometer, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 mil", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Mils);
                Assert.Equal(LengthUnit.Mil, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 密耳", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                Assert.Equal(1, parsed.Mils);
                Assert.Equal(LengthUnit.Mil, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 mi", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Miles);
                Assert.Equal(LengthUnit.Mile, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 миля", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Miles);
                Assert.Equal(LengthUnit.Mile, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 英里", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                Assert.Equal(1, parsed.Miles);
                Assert.Equal(LengthUnit.Mile, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 毫米", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                Assert.Equal(1, parsed.Millimeters);
                Assert.Equal(LengthUnit.Millimeter, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 нм", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Nanometers);
                Assert.Equal(LengthUnit.Nanometer, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 nmi", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.NauticalMiles);
                Assert.Equal(LengthUnit.NauticalMile, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 pc", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Parsecs);
                Assert.Equal(LengthUnit.Parsec, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 pm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Picometers);
                Assert.Equal(LengthUnit.Picometer, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 пм", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Picometers);
                Assert.Equal(LengthUnit.Picometer, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 皮米", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                Assert.Equal(1, parsed.Picometers);
                Assert.Equal(LengthUnit.Picometer, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 shackle", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Shackles);
                Assert.Equal(LengthUnit.Shackle, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 R⊙", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.SolarRadiuses);
                Assert.Equal(LengthUnit.SolarRadius, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 twip", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Twips);
                Assert.Equal(LengthUnit.Twip, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 ftUS", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.UsSurveyFeet);
                Assert.Equal(LengthUnit.UsSurveyFoot, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 yd", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Yards);
                Assert.Equal(LengthUnit.Yard, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 ярд", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Yards);
                Assert.Equal(LengthUnit.Yard, parsed.Unit);
            }

            {
                Assert.True(Length.TryParse("1 码", CultureInfo.GetCultureInfo("zh-CN"), out var parsed));
                Assert.Equal(1, parsed.Yards);
                Assert.Equal(LengthUnit.Yard, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = Length.ParseUnit("Å", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Angstrom, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("A", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Angstrom, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("au", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.AstronomicalUnit, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("ua", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.AstronomicalUnit, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("cm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Centimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("см", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(LengthUnit.Centimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("厘米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(LengthUnit.Centimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("ch", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Chain, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("DM", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.DataMile, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("dam", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Decameter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("дам", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(LengthUnit.Decameter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("十米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(LengthUnit.Decameter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("dm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Decimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("дм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(LengthUnit.Decimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("分米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(LengthUnit.Decimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("pica", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.DtpPica, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("pt", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.DtpPoint, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("fathom", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Fathom, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("fm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Femtometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("фм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(LengthUnit.Femtometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("飞米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(LengthUnit.Femtometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Foot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("'", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Foot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("′", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Foot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("фут", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(LengthUnit.Foot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("英尺", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(LengthUnit.Foot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("Gm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Gigameter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("Гм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(LengthUnit.Gigameter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("吉米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(LengthUnit.Gigameter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("h", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Hand, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("hh", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Hand, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("hm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Hectometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("гм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(LengthUnit.Hectometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("百米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(LengthUnit.Hectometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("in", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Inch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("\"", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Inch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("″", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Inch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("дюйм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(LengthUnit.Inch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("英寸", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(LengthUnit.Inch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("kft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Kilofoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("k'", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Kilofoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("k′", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Kilofoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("кфут", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(LengthUnit.Kilofoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("千英尺", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(LengthUnit.Kilofoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("kly", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.KilolightYear, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("km", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Kilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("км", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(LengthUnit.Kilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("千米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(LengthUnit.Kilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("kpc", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Kiloparsec, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("kyd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Kiloyard, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("кярд", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(LengthUnit.Kiloyard, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("千码", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(LengthUnit.Kiloyard, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("ly", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.LightYear, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("Mly", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.MegalightYear, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("Mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Megameter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("Мм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(LengthUnit.Megameter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("兆米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(LengthUnit.Megameter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("Mpc", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Megaparsec, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Meter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("м", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(LengthUnit.Meter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(LengthUnit.Meter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("µin", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Microinch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("микродюйм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(LengthUnit.Microinch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("微英寸", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(LengthUnit.Microinch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("µm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Micrometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("мкм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(LengthUnit.Micrometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("微米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(LengthUnit.Micrometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("mil", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Mil, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("мил", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(LengthUnit.Mil, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("密耳", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(LengthUnit.Mil, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("mi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Mile, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("миля", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(LengthUnit.Mile, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("英里", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(LengthUnit.Mile, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Millimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("мм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(LengthUnit.Millimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("毫米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(LengthUnit.Millimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("nm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Nanometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("нм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(LengthUnit.Nanometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("纳米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(LengthUnit.Nanometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("NM", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.NauticalMile, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("nmi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.NauticalMile, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("мил", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(LengthUnit.NauticalMile, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("纳米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(LengthUnit.NauticalMile, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("pc", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Parsec, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("pm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Picometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("пм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(LengthUnit.Picometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("皮米", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(LengthUnit.Picometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("pica", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.PrinterPica, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("pt", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.PrinterPoint, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("shackle", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Shackle, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("R⊙", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.SolarRadius, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("twip", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Twip, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("ftUS", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.UsSurveyFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("yd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LengthUnit.Yard, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("ярд", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(LengthUnit.Yard, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Length.ParseUnit("码", CultureInfo.GetCultureInfo("zh-CN"));
                Assert.Equal(LengthUnit.Yard, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(Length.TryParseUnit("Å", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Angstrom, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("A", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Angstrom, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("au", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.AstronomicalUnit, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("ua", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.AstronomicalUnit, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("cm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Centimeter, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("см", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(LengthUnit.Centimeter, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("厘米", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(LengthUnit.Centimeter, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("ch", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Chain, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("dam", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Decameter, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("дам", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(LengthUnit.Decameter, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("十米", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(LengthUnit.Decameter, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("дм", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(LengthUnit.Decimeter, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("分米", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(LengthUnit.Decimeter, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("fathom", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Fathom, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("fm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Femtometer, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("фм", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(LengthUnit.Femtometer, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("飞米", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(LengthUnit.Femtometer, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("ft", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Foot, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("'", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Foot, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("′", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Foot, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("фут", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(LengthUnit.Foot, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("英尺", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(LengthUnit.Foot, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("Gm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Gigameter, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("吉米", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(LengthUnit.Gigameter, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("h", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Hand, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("hh", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Hand, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("hm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Hectometer, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("百米", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(LengthUnit.Hectometer, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("in", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Inch, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("\"", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Inch, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("″", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Inch, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("дюйм", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(LengthUnit.Inch, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("英寸", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(LengthUnit.Inch, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("kft", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Kilofoot, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("k'", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Kilofoot, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("k′", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Kilofoot, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("кфут", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(LengthUnit.Kilofoot, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("千英尺", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(LengthUnit.Kilofoot, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("kly", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.KilolightYear, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("km", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Kilometer, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("км", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(LengthUnit.Kilometer, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("千米", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(LengthUnit.Kilometer, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("kpc", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Kiloparsec, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("kyd", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Kiloyard, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("кярд", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(LengthUnit.Kiloyard, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("千码", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(LengthUnit.Kiloyard, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("ly", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.LightYear, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("Mly", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.MegalightYear, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("兆米", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(LengthUnit.Megameter, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("Mpc", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Megaparsec, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Meter, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("м", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(LengthUnit.Meter, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("米", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(LengthUnit.Meter, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("µin", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Microinch, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("микродюйм", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(LengthUnit.Microinch, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("微英寸", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(LengthUnit.Microinch, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("µm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Micrometer, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("мкм", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(LengthUnit.Micrometer, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("微米", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(LengthUnit.Micrometer, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("mil", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Mil, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("密耳", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(LengthUnit.Mil, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("mi", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Mile, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("миля", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(LengthUnit.Mile, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("英里", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(LengthUnit.Mile, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("毫米", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(LengthUnit.Millimeter, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("нм", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(LengthUnit.Nanometer, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("nmi", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.NauticalMile, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("pc", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Parsec, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("pm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Picometer, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("пм", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(LengthUnit.Picometer, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("皮米", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(LengthUnit.Picometer, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("shackle", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Shackle, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("R⊙", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.SolarRadius, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("twip", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Twip, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("ftUS", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.UsSurveyFoot, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("yd", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LengthUnit.Yard, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("ярд", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(LengthUnit.Yard, parsedUnit);
            }

            {
                Assert.True(Length.TryParseUnit("码", CultureInfo.GetCultureInfo("zh-CN"), out var parsedUnit));
                Assert.Equal(LengthUnit.Yard, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(LengthUnit unit)
        {
            var inBaseUnits = Length.From(1.0, Length.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(LengthUnit unit)
        {
            var quantity = Length.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(LengthUnit unit)
        {
            // See if there is a unit available that is not the base unit, fallback to base unit if it has only a single unit.
            var fromUnit = Length.Units.First(u => u != Length.BaseUnit);

            var quantity = Length.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(LengthUnit unit)
        {
            var quantity = default(Length);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Length meter = Length.FromMeters(1);
            Assert.Equal(1, Length.FromAngstroms(meter.Angstroms).Meters);
            Assert.Equal(1, Length.FromAstronomicalUnits(meter.AstronomicalUnits).Meters);
            Assert.Equal(1, Length.FromCentimeters(meter.Centimeters).Meters);
            Assert.Equal(1, Length.FromChains(meter.Chains).Meters);
            Assert.Equal(1, Length.FromDataMiles(meter.DataMiles).Meters);
            Assert.Equal(1, Length.FromDecameters(meter.Decameters).Meters);
            Assert.Equal(1, Length.FromDecimeters(meter.Decimeters).Meters);
            Assert.Equal(1, Length.FromDtpPicas(meter.DtpPicas).Meters);
            Assert.Equal(1, Length.FromDtpPoints(meter.DtpPoints).Meters);
            Assert.Equal(1, Length.FromFathoms(meter.Fathoms).Meters);
            Assert.Equal(1, Length.FromFemtometers(meter.Femtometers).Meters);
            Assert.Equal(1, Length.FromFeet(meter.Feet).Meters);
            Assert.Equal(1, Length.FromGigameters(meter.Gigameters).Meters);
            Assert.Equal(1, Length.FromHands(meter.Hands).Meters);
            Assert.Equal(1, Length.FromHectometers(meter.Hectometers).Meters);
            Assert.Equal(1, Length.FromInches(meter.Inches).Meters);
            Assert.Equal(1, Length.FromKilofeet(meter.Kilofeet).Meters);
            Assert.Equal(1, Length.FromKilolightYears(meter.KilolightYears).Meters);
            Assert.Equal(1, Length.FromKilometers(meter.Kilometers).Meters);
            Assert.Equal(1, Length.FromKiloparsecs(meter.Kiloparsecs).Meters);
            Assert.Equal(1, Length.FromKiloyards(meter.Kiloyards).Meters);
            Assert.Equal(1, Length.FromLightYears(meter.LightYears).Meters);
            Assert.Equal(1, Length.FromMegalightYears(meter.MegalightYears).Meters);
            Assert.Equal(1, Length.FromMegameters(meter.Megameters).Meters);
            Assert.Equal(1, Length.FromMegaparsecs(meter.Megaparsecs).Meters);
            Assert.Equal(1, Length.FromMeters(meter.Meters).Meters);
            Assert.Equal(1, Length.FromMicroinches(meter.Microinches).Meters);
            Assert.Equal(1, Length.FromMicrometers(meter.Micrometers).Meters);
            Assert.Equal(1, Length.FromMils(meter.Mils).Meters);
            Assert.Equal(1, Length.FromMiles(meter.Miles).Meters);
            Assert.Equal(1, Length.FromMillimeters(meter.Millimeters).Meters);
            Assert.Equal(1, Length.FromNanometers(meter.Nanometers).Meters);
            Assert.Equal(1, Length.FromNauticalMiles(meter.NauticalMiles).Meters);
            Assert.Equal(1, Length.FromParsecs(meter.Parsecs).Meters);
            Assert.Equal(1, Length.FromPicometers(meter.Picometers).Meters);
            Assert.Equal(1, Length.FromPrinterPicas(meter.PrinterPicas).Meters);
            Assert.Equal(1, Length.FromPrinterPoints(meter.PrinterPoints).Meters);
            Assert.Equal(1, Length.FromShackles(meter.Shackles).Meters);
            Assert.Equal(1, Length.FromSolarRadiuses(meter.SolarRadiuses).Meters);
            Assert.Equal(1, Length.FromTwips(meter.Twips).Meters);
            Assert.Equal(1, Length.FromUsSurveyFeet(meter.UsSurveyFeet).Meters);
            Assert.Equal(1, Length.FromYards(meter.Yards).Meters);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Length v = Length.FromMeters(1);
            Assert.Equal(-1, -v.Meters);
            Assert.Equal(2, (Length.FromMeters(3) - v).Meters);
            Assert.Equal(2, (v + v).Meters);
            Assert.Equal(10, (v * 10).Meters);
            Assert.Equal(10, (10 * v).Meters);
            Assert.Equal(2, (Length.FromMeters(10) / 5).Meters);
            Assert.Equal(2, Length.FromMeters(10) / Length.FromMeters(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            Length oneMeter = Length.FromMeters(1);
            Length twoMeters = Length.FromMeters(2);

            Assert.True(oneMeter < twoMeters);
            Assert.True(oneMeter <= twoMeters);
            Assert.True(twoMeters > oneMeter);
            Assert.True(twoMeters >= oneMeter);

            Assert.False(oneMeter > twoMeters);
            Assert.False(oneMeter >= twoMeters);
            Assert.False(twoMeters < oneMeter);
            Assert.False(twoMeters <= oneMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Length meter = Length.FromMeters(1);
            Assert.Equal(0, meter.CompareTo(meter));
            Assert.True(meter.CompareTo(Length.Zero) > 0);
            Assert.True(Length.Zero.CompareTo(meter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Length meter = Length.FromMeters(1);
            Assert.Throws<ArgumentException>(() => meter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Length meter = Length.FromMeters(1);
            Assert.Throws<ArgumentNullException>(() => meter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, LengthUnit.Meter, 1, LengthUnit.Meter, true)]  // Same value and unit.
        [InlineData(1, LengthUnit.Meter, 2, LengthUnit.Meter, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, LengthUnit unitA, double valueB, LengthUnit unitB, bool expectEqual)
        {
            var a = new Length(valueA, unitA);
            var b = new Length(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Length.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_WithTolerance_IsImplemented()
        {
            var v = Length.FromMeters(1);
            Assert.True(v.Equals(Length.FromMeters(1), Length.FromMeters(0)));
            Assert.True(v.Equals(Length.FromMeters(1), Length.FromMeters(0.001m)));
            Assert.True(v.Equals(Length.FromMeters(0.9999), Length.FromMeters(0.001m)));
            Assert.False(v.Equals(Length.FromMeters(0.99), Length.FromMeters(0.001m)));
            Assert.False(v.Equals(Length.Zero, Length.FromMeters(0.001m)));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Length.FromMeters(1);
            var negativeTolerance = Length.FromMeters(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Length.FromMeters(1), negativeTolerance));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Length meter = Length.FromMeters(1);
            Assert.False(meter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Length meter = Length.FromMeters(1);
            Assert.False(meter.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(LengthUnit)).Cast<LengthUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Length.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentCulture;
            Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 Å", new Length(1, LengthUnit.Angstrom).ToString());
                Assert.Equal("1 au", new Length(1, LengthUnit.AstronomicalUnit).ToString());
                Assert.Equal("1 cm", new Length(1, LengthUnit.Centimeter).ToString());
                Assert.Equal("1 ch", new Length(1, LengthUnit.Chain).ToString());
                Assert.Equal("1 DM", new Length(1, LengthUnit.DataMile).ToString());
                Assert.Equal("1 dam", new Length(1, LengthUnit.Decameter).ToString());
                Assert.Equal("1 dm", new Length(1, LengthUnit.Decimeter).ToString());
                Assert.Equal("1 pica", new Length(1, LengthUnit.DtpPica).ToString());
                Assert.Equal("1 pt", new Length(1, LengthUnit.DtpPoint).ToString());
                Assert.Equal("1 fathom", new Length(1, LengthUnit.Fathom).ToString());
                Assert.Equal("1 fm", new Length(1, LengthUnit.Femtometer).ToString());
                Assert.Equal("1 ft", new Length(1, LengthUnit.Foot).ToString());
                Assert.Equal("1 Gm", new Length(1, LengthUnit.Gigameter).ToString());
                Assert.Equal("1 h", new Length(1, LengthUnit.Hand).ToString());
                Assert.Equal("1 hm", new Length(1, LengthUnit.Hectometer).ToString());
                Assert.Equal("1 in", new Length(1, LengthUnit.Inch).ToString());
                Assert.Equal("1 kft", new Length(1, LengthUnit.Kilofoot).ToString());
                Assert.Equal("1 kly", new Length(1, LengthUnit.KilolightYear).ToString());
                Assert.Equal("1 km", new Length(1, LengthUnit.Kilometer).ToString());
                Assert.Equal("1 kpc", new Length(1, LengthUnit.Kiloparsec).ToString());
                Assert.Equal("1 kyd", new Length(1, LengthUnit.Kiloyard).ToString());
                Assert.Equal("1 ly", new Length(1, LengthUnit.LightYear).ToString());
                Assert.Equal("1 Mly", new Length(1, LengthUnit.MegalightYear).ToString());
                Assert.Equal("1 Mm", new Length(1, LengthUnit.Megameter).ToString());
                Assert.Equal("1 Mpc", new Length(1, LengthUnit.Megaparsec).ToString());
                Assert.Equal("1 m", new Length(1, LengthUnit.Meter).ToString());
                Assert.Equal("1 µin", new Length(1, LengthUnit.Microinch).ToString());
                Assert.Equal("1 µm", new Length(1, LengthUnit.Micrometer).ToString());
                Assert.Equal("1 mil", new Length(1, LengthUnit.Mil).ToString());
                Assert.Equal("1 mi", new Length(1, LengthUnit.Mile).ToString());
                Assert.Equal("1 mm", new Length(1, LengthUnit.Millimeter).ToString());
                Assert.Equal("1 nm", new Length(1, LengthUnit.Nanometer).ToString());
                Assert.Equal("1 NM", new Length(1, LengthUnit.NauticalMile).ToString());
                Assert.Equal("1 pc", new Length(1, LengthUnit.Parsec).ToString());
                Assert.Equal("1 pm", new Length(1, LengthUnit.Picometer).ToString());
                Assert.Equal("1 pica", new Length(1, LengthUnit.PrinterPica).ToString());
                Assert.Equal("1 pt", new Length(1, LengthUnit.PrinterPoint).ToString());
                Assert.Equal("1 shackle", new Length(1, LengthUnit.Shackle).ToString());
                Assert.Equal("1 R⊙", new Length(1, LengthUnit.SolarRadius).ToString());
                Assert.Equal("1 twip", new Length(1, LengthUnit.Twip).ToString());
                Assert.Equal("1 ftUS", new Length(1, LengthUnit.UsSurveyFoot).ToString());
                Assert.Equal("1 yd", new Length(1, LengthUnit.Yard).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 Å", new Length(1, LengthUnit.Angstrom).ToString(swedishCulture));
            Assert.Equal("1 au", new Length(1, LengthUnit.AstronomicalUnit).ToString(swedishCulture));
            Assert.Equal("1 cm", new Length(1, LengthUnit.Centimeter).ToString(swedishCulture));
            Assert.Equal("1 ch", new Length(1, LengthUnit.Chain).ToString(swedishCulture));
            Assert.Equal("1 DM", new Length(1, LengthUnit.DataMile).ToString(swedishCulture));
            Assert.Equal("1 dam", new Length(1, LengthUnit.Decameter).ToString(swedishCulture));
            Assert.Equal("1 dm", new Length(1, LengthUnit.Decimeter).ToString(swedishCulture));
            Assert.Equal("1 pica", new Length(1, LengthUnit.DtpPica).ToString(swedishCulture));
            Assert.Equal("1 pt", new Length(1, LengthUnit.DtpPoint).ToString(swedishCulture));
            Assert.Equal("1 fathom", new Length(1, LengthUnit.Fathom).ToString(swedishCulture));
            Assert.Equal("1 fm", new Length(1, LengthUnit.Femtometer).ToString(swedishCulture));
            Assert.Equal("1 ft", new Length(1, LengthUnit.Foot).ToString(swedishCulture));
            Assert.Equal("1 Gm", new Length(1, LengthUnit.Gigameter).ToString(swedishCulture));
            Assert.Equal("1 h", new Length(1, LengthUnit.Hand).ToString(swedishCulture));
            Assert.Equal("1 hm", new Length(1, LengthUnit.Hectometer).ToString(swedishCulture));
            Assert.Equal("1 in", new Length(1, LengthUnit.Inch).ToString(swedishCulture));
            Assert.Equal("1 kft", new Length(1, LengthUnit.Kilofoot).ToString(swedishCulture));
            Assert.Equal("1 kly", new Length(1, LengthUnit.KilolightYear).ToString(swedishCulture));
            Assert.Equal("1 km", new Length(1, LengthUnit.Kilometer).ToString(swedishCulture));
            Assert.Equal("1 kpc", new Length(1, LengthUnit.Kiloparsec).ToString(swedishCulture));
            Assert.Equal("1 kyd", new Length(1, LengthUnit.Kiloyard).ToString(swedishCulture));
            Assert.Equal("1 ly", new Length(1, LengthUnit.LightYear).ToString(swedishCulture));
            Assert.Equal("1 Mly", new Length(1, LengthUnit.MegalightYear).ToString(swedishCulture));
            Assert.Equal("1 Mm", new Length(1, LengthUnit.Megameter).ToString(swedishCulture));
            Assert.Equal("1 Mpc", new Length(1, LengthUnit.Megaparsec).ToString(swedishCulture));
            Assert.Equal("1 m", new Length(1, LengthUnit.Meter).ToString(swedishCulture));
            Assert.Equal("1 µin", new Length(1, LengthUnit.Microinch).ToString(swedishCulture));
            Assert.Equal("1 µm", new Length(1, LengthUnit.Micrometer).ToString(swedishCulture));
            Assert.Equal("1 mil", new Length(1, LengthUnit.Mil).ToString(swedishCulture));
            Assert.Equal("1 mi", new Length(1, LengthUnit.Mile).ToString(swedishCulture));
            Assert.Equal("1 mm", new Length(1, LengthUnit.Millimeter).ToString(swedishCulture));
            Assert.Equal("1 nm", new Length(1, LengthUnit.Nanometer).ToString(swedishCulture));
            Assert.Equal("1 NM", new Length(1, LengthUnit.NauticalMile).ToString(swedishCulture));
            Assert.Equal("1 pc", new Length(1, LengthUnit.Parsec).ToString(swedishCulture));
            Assert.Equal("1 pm", new Length(1, LengthUnit.Picometer).ToString(swedishCulture));
            Assert.Equal("1 pica", new Length(1, LengthUnit.PrinterPica).ToString(swedishCulture));
            Assert.Equal("1 pt", new Length(1, LengthUnit.PrinterPoint).ToString(swedishCulture));
            Assert.Equal("1 shackle", new Length(1, LengthUnit.Shackle).ToString(swedishCulture));
            Assert.Equal("1 R⊙", new Length(1, LengthUnit.SolarRadius).ToString(swedishCulture));
            Assert.Equal("1 twip", new Length(1, LengthUnit.Twip).ToString(swedishCulture));
            Assert.Equal("1 ftUS", new Length(1, LengthUnit.UsSurveyFoot).ToString(swedishCulture));
            Assert.Equal("1 yd", new Length(1, LengthUnit.Yard).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentCulture;
            try
            {
                CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 m", new Length(0.123456, LengthUnit.Meter).ToString("s1"));
                Assert.Equal("0.12 m", new Length(0.123456, LengthUnit.Meter).ToString("s2"));
                Assert.Equal("0.123 m", new Length(0.123456, LengthUnit.Meter).ToString("s3"));
                Assert.Equal("0.1235 m", new Length(0.123456, LengthUnit.Meter).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentCulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 m", new Length(0.123456, LengthUnit.Meter).ToString("s1", culture));
            Assert.Equal("0.12 m", new Length(0.123456, LengthUnit.Meter).ToString("s2", culture));
            Assert.Equal("0.123 m", new Length(0.123456, LengthUnit.Meter).ToString("s3", culture));
            Assert.Equal("0.1235 m", new Length(0.123456, LengthUnit.Meter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Length.FromMeters(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("g", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = Length.FromMeters(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(Length)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(LengthUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal(Length.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Equal(Length.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = Length.FromMeters(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Length.FromMeters(1.0);
            #if NET7_0_OR_GREATER
            var expected = HashCode.Combine(Length.Info.Name, quantity.Meters);
            #else
            var expected = new {Length.Info.Name, valueInBaseUnit = quantity.Meters}.GetHashCode();
            #endif
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Length.FromMeters(value);
            Assert.Equal(Length.FromMeters(-value), -quantity);
        }
    }
}
