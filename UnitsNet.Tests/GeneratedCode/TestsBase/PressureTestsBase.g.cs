//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Pressure.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class PressureTestsBase : QuantityTestsBase
    {
        protected abstract double AtmospheresInOnePascal { get; }
        protected abstract double BarsInOnePascal { get; }
        protected abstract double CentibarsInOnePascal { get; }
        protected abstract double CentimetersOfWaterColumnInOnePascal { get; }
        protected abstract double DecapascalsInOnePascal { get; }
        protected abstract double DecibarsInOnePascal { get; }
        protected abstract double DynesPerSquareCentimeterInOnePascal { get; }
        protected abstract double FeetOfHeadInOnePascal { get; }
        protected abstract double GigapascalsInOnePascal { get; }
        protected abstract double HectopascalsInOnePascal { get; }
        protected abstract double InchesOfMercuryInOnePascal { get; }
        protected abstract double InchesOfWaterColumnInOnePascal { get; }
        protected abstract double KilobarsInOnePascal { get; }
        protected abstract double KilogramsForcePerSquareCentimeterInOnePascal { get; }
        protected abstract double KilogramsForcePerSquareMeterInOnePascal { get; }
        protected abstract double KilogramsForcePerSquareMillimeterInOnePascal { get; }
        protected abstract double KilonewtonsPerSquareCentimeterInOnePascal { get; }
        protected abstract double KilonewtonsPerSquareMeterInOnePascal { get; }
        protected abstract double KilonewtonsPerSquareMillimeterInOnePascal { get; }
        protected abstract double KilopascalsInOnePascal { get; }
        protected abstract double KilopoundsForcePerSquareFootInOnePascal { get; }
        protected abstract double KilopoundsForcePerSquareInchInOnePascal { get; }
        protected abstract double KilopoundsForcePerSquareMilInOnePascal { get; }
        protected abstract double MegabarsInOnePascal { get; }
        protected abstract double MeganewtonsPerSquareMeterInOnePascal { get; }
        protected abstract double MegapascalsInOnePascal { get; }
        protected abstract double MetersOfHeadInOnePascal { get; }
        protected abstract double MetersOfWaterColumnInOnePascal { get; }
        protected abstract double MicrobarsInOnePascal { get; }
        protected abstract double MicropascalsInOnePascal { get; }
        protected abstract double MillibarsInOnePascal { get; }
        protected abstract double MillimetersOfMercuryInOnePascal { get; }
        protected abstract double MillimetersOfWaterColumnInOnePascal { get; }
        protected abstract double MillipascalsInOnePascal { get; }
        protected abstract double NewtonsPerSquareCentimeterInOnePascal { get; }
        protected abstract double NewtonsPerSquareMeterInOnePascal { get; }
        protected abstract double NewtonsPerSquareMillimeterInOnePascal { get; }
        protected abstract double PascalsInOnePascal { get; }
        protected abstract double PoundsForcePerSquareFootInOnePascal { get; }
        protected abstract double PoundsForcePerSquareInchInOnePascal { get; }
        protected abstract double PoundsForcePerSquareMilInOnePascal { get; }
        protected abstract double PoundsPerInchSecondSquaredInOnePascal { get; }
        protected abstract double TechnicalAtmospheresInOnePascal { get; }
        protected abstract double TonnesForcePerSquareCentimeterInOnePascal { get; }
        protected abstract double TonnesForcePerSquareMeterInOnePascal { get; }
        protected abstract double TonnesForcePerSquareMillimeterInOnePascal { get; }
        protected abstract double TorrsInOnePascal { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double AtmospheresTolerance { get { return 1e-5; } }
        protected virtual double BarsTolerance { get { return 1e-5; } }
        protected virtual double CentibarsTolerance { get { return 1e-5; } }
        protected virtual double CentimetersOfWaterColumnTolerance { get { return 1e-5; } }
        protected virtual double DecapascalsTolerance { get { return 1e-5; } }
        protected virtual double DecibarsTolerance { get { return 1e-5; } }
        protected virtual double DynesPerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double FeetOfHeadTolerance { get { return 1e-5; } }
        protected virtual double GigapascalsTolerance { get { return 1e-5; } }
        protected virtual double HectopascalsTolerance { get { return 1e-5; } }
        protected virtual double InchesOfMercuryTolerance { get { return 1e-5; } }
        protected virtual double InchesOfWaterColumnTolerance { get { return 1e-5; } }
        protected virtual double KilobarsTolerance { get { return 1e-5; } }
        protected virtual double KilogramsForcePerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsForcePerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsForcePerSquareMillimeterTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonsPerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonsPerSquareMillimeterTolerance { get { return 1e-5; } }
        protected virtual double KilopascalsTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsForcePerSquareFootTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsForcePerSquareInchTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsForcePerSquareMilTolerance { get { return 1e-5; } }
        protected virtual double MegabarsTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double MegapascalsTolerance { get { return 1e-5; } }
        protected virtual double MetersOfHeadTolerance { get { return 1e-5; } }
        protected virtual double MetersOfWaterColumnTolerance { get { return 1e-5; } }
        protected virtual double MicrobarsTolerance { get { return 1e-5; } }
        protected virtual double MicropascalsTolerance { get { return 1e-5; } }
        protected virtual double MillibarsTolerance { get { return 1e-5; } }
        protected virtual double MillimetersOfMercuryTolerance { get { return 1e-5; } }
        protected virtual double MillimetersOfWaterColumnTolerance { get { return 1e-5; } }
        protected virtual double MillipascalsTolerance { get { return 1e-5; } }
        protected virtual double NewtonsPerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double NewtonsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double NewtonsPerSquareMillimeterTolerance { get { return 1e-5; } }
        protected virtual double PascalsTolerance { get { return 1e-5; } }
        protected virtual double PoundsForcePerSquareFootTolerance { get { return 1e-5; } }
        protected virtual double PoundsForcePerSquareInchTolerance { get { return 1e-5; } }
        protected virtual double PoundsForcePerSquareMilTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerInchSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double TechnicalAtmospheresTolerance { get { return 1e-5; } }
        protected virtual double TonnesForcePerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double TonnesForcePerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double TonnesForcePerSquareMillimeterTolerance { get { return 1e-5; } }
        protected virtual double TorrsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(PressureUnit unit)
        {
            return unit switch
            {
                PressureUnit.Atmosphere => (AtmospheresInOnePascal, AtmospheresTolerance),
                PressureUnit.Bar => (BarsInOnePascal, BarsTolerance),
                PressureUnit.Centibar => (CentibarsInOnePascal, CentibarsTolerance),
                PressureUnit.CentimeterOfWaterColumn => (CentimetersOfWaterColumnInOnePascal, CentimetersOfWaterColumnTolerance),
                PressureUnit.Decapascal => (DecapascalsInOnePascal, DecapascalsTolerance),
                PressureUnit.Decibar => (DecibarsInOnePascal, DecibarsTolerance),
                PressureUnit.DynePerSquareCentimeter => (DynesPerSquareCentimeterInOnePascal, DynesPerSquareCentimeterTolerance),
                PressureUnit.FootOfHead => (FeetOfHeadInOnePascal, FeetOfHeadTolerance),
                PressureUnit.Gigapascal => (GigapascalsInOnePascal, GigapascalsTolerance),
                PressureUnit.Hectopascal => (HectopascalsInOnePascal, HectopascalsTolerance),
                PressureUnit.InchOfMercury => (InchesOfMercuryInOnePascal, InchesOfMercuryTolerance),
                PressureUnit.InchOfWaterColumn => (InchesOfWaterColumnInOnePascal, InchesOfWaterColumnTolerance),
                PressureUnit.Kilobar => (KilobarsInOnePascal, KilobarsTolerance),
                PressureUnit.KilogramForcePerSquareCentimeter => (KilogramsForcePerSquareCentimeterInOnePascal, KilogramsForcePerSquareCentimeterTolerance),
                PressureUnit.KilogramForcePerSquareMeter => (KilogramsForcePerSquareMeterInOnePascal, KilogramsForcePerSquareMeterTolerance),
                PressureUnit.KilogramForcePerSquareMillimeter => (KilogramsForcePerSquareMillimeterInOnePascal, KilogramsForcePerSquareMillimeterTolerance),
                PressureUnit.KilonewtonPerSquareCentimeter => (KilonewtonsPerSquareCentimeterInOnePascal, KilonewtonsPerSquareCentimeterTolerance),
                PressureUnit.KilonewtonPerSquareMeter => (KilonewtonsPerSquareMeterInOnePascal, KilonewtonsPerSquareMeterTolerance),
                PressureUnit.KilonewtonPerSquareMillimeter => (KilonewtonsPerSquareMillimeterInOnePascal, KilonewtonsPerSquareMillimeterTolerance),
                PressureUnit.Kilopascal => (KilopascalsInOnePascal, KilopascalsTolerance),
                PressureUnit.KilopoundForcePerSquareFoot => (KilopoundsForcePerSquareFootInOnePascal, KilopoundsForcePerSquareFootTolerance),
                PressureUnit.KilopoundForcePerSquareInch => (KilopoundsForcePerSquareInchInOnePascal, KilopoundsForcePerSquareInchTolerance),
                PressureUnit.KilopoundForcePerSquareMil => (KilopoundsForcePerSquareMilInOnePascal, KilopoundsForcePerSquareMilTolerance),
                PressureUnit.Megabar => (MegabarsInOnePascal, MegabarsTolerance),
                PressureUnit.MeganewtonPerSquareMeter => (MeganewtonsPerSquareMeterInOnePascal, MeganewtonsPerSquareMeterTolerance),
                PressureUnit.Megapascal => (MegapascalsInOnePascal, MegapascalsTolerance),
                PressureUnit.MeterOfHead => (MetersOfHeadInOnePascal, MetersOfHeadTolerance),
                PressureUnit.MeterOfWaterColumn => (MetersOfWaterColumnInOnePascal, MetersOfWaterColumnTolerance),
                PressureUnit.Microbar => (MicrobarsInOnePascal, MicrobarsTolerance),
                PressureUnit.Micropascal => (MicropascalsInOnePascal, MicropascalsTolerance),
                PressureUnit.Millibar => (MillibarsInOnePascal, MillibarsTolerance),
                PressureUnit.MillimeterOfMercury => (MillimetersOfMercuryInOnePascal, MillimetersOfMercuryTolerance),
                PressureUnit.MillimeterOfWaterColumn => (MillimetersOfWaterColumnInOnePascal, MillimetersOfWaterColumnTolerance),
                PressureUnit.Millipascal => (MillipascalsInOnePascal, MillipascalsTolerance),
                PressureUnit.NewtonPerSquareCentimeter => (NewtonsPerSquareCentimeterInOnePascal, NewtonsPerSquareCentimeterTolerance),
                PressureUnit.NewtonPerSquareMeter => (NewtonsPerSquareMeterInOnePascal, NewtonsPerSquareMeterTolerance),
                PressureUnit.NewtonPerSquareMillimeter => (NewtonsPerSquareMillimeterInOnePascal, NewtonsPerSquareMillimeterTolerance),
                PressureUnit.Pascal => (PascalsInOnePascal, PascalsTolerance),
                PressureUnit.PoundForcePerSquareFoot => (PoundsForcePerSquareFootInOnePascal, PoundsForcePerSquareFootTolerance),
                PressureUnit.PoundForcePerSquareInch => (PoundsForcePerSquareInchInOnePascal, PoundsForcePerSquareInchTolerance),
                PressureUnit.PoundForcePerSquareMil => (PoundsForcePerSquareMilInOnePascal, PoundsForcePerSquareMilTolerance),
                PressureUnit.PoundPerInchSecondSquared => (PoundsPerInchSecondSquaredInOnePascal, PoundsPerInchSecondSquaredTolerance),
                PressureUnit.TechnicalAtmosphere => (TechnicalAtmospheresInOnePascal, TechnicalAtmospheresTolerance),
                PressureUnit.TonneForcePerSquareCentimeter => (TonnesForcePerSquareCentimeterInOnePascal, TonnesForcePerSquareCentimeterTolerance),
                PressureUnit.TonneForcePerSquareMeter => (TonnesForcePerSquareMeterInOnePascal, TonnesForcePerSquareMeterTolerance),
                PressureUnit.TonneForcePerSquareMillimeter => (TonnesForcePerSquareMillimeterInOnePascal, TonnesForcePerSquareMillimeterTolerance),
                PressureUnit.Torr => (TorrsInOnePascal, TorrsTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { PressureUnit.Atmosphere },
            new object[] { PressureUnit.Bar },
            new object[] { PressureUnit.Centibar },
            new object[] { PressureUnit.CentimeterOfWaterColumn },
            new object[] { PressureUnit.Decapascal },
            new object[] { PressureUnit.Decibar },
            new object[] { PressureUnit.DynePerSquareCentimeter },
            new object[] { PressureUnit.FootOfHead },
            new object[] { PressureUnit.Gigapascal },
            new object[] { PressureUnit.Hectopascal },
            new object[] { PressureUnit.InchOfMercury },
            new object[] { PressureUnit.InchOfWaterColumn },
            new object[] { PressureUnit.Kilobar },
            new object[] { PressureUnit.KilogramForcePerSquareCentimeter },
            new object[] { PressureUnit.KilogramForcePerSquareMeter },
            new object[] { PressureUnit.KilogramForcePerSquareMillimeter },
            new object[] { PressureUnit.KilonewtonPerSquareCentimeter },
            new object[] { PressureUnit.KilonewtonPerSquareMeter },
            new object[] { PressureUnit.KilonewtonPerSquareMillimeter },
            new object[] { PressureUnit.Kilopascal },
            new object[] { PressureUnit.KilopoundForcePerSquareFoot },
            new object[] { PressureUnit.KilopoundForcePerSquareInch },
            new object[] { PressureUnit.KilopoundForcePerSquareMil },
            new object[] { PressureUnit.Megabar },
            new object[] { PressureUnit.MeganewtonPerSquareMeter },
            new object[] { PressureUnit.Megapascal },
            new object[] { PressureUnit.MeterOfHead },
            new object[] { PressureUnit.MeterOfWaterColumn },
            new object[] { PressureUnit.Microbar },
            new object[] { PressureUnit.Micropascal },
            new object[] { PressureUnit.Millibar },
            new object[] { PressureUnit.MillimeterOfMercury },
            new object[] { PressureUnit.MillimeterOfWaterColumn },
            new object[] { PressureUnit.Millipascal },
            new object[] { PressureUnit.NewtonPerSquareCentimeter },
            new object[] { PressureUnit.NewtonPerSquareMeter },
            new object[] { PressureUnit.NewtonPerSquareMillimeter },
            new object[] { PressureUnit.Pascal },
            new object[] { PressureUnit.PoundForcePerSquareFoot },
            new object[] { PressureUnit.PoundForcePerSquareInch },
            new object[] { PressureUnit.PoundForcePerSquareMil },
            new object[] { PressureUnit.PoundPerInchSecondSquared },
            new object[] { PressureUnit.TechnicalAtmosphere },
            new object[] { PressureUnit.TonneForcePerSquareCentimeter },
            new object[] { PressureUnit.TonneForcePerSquareMeter },
            new object[] { PressureUnit.TonneForcePerSquareMillimeter },
            new object[] { PressureUnit.Torr },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Pressure();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(PressureUnit.Pascal, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Pressure(double.PositiveInfinity, PressureUnit.Pascal));
            var exception2 = Record.Exception(() => new Pressure(double.NegativeInfinity, PressureUnit.Pascal));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Pressure(double.NaN, PressureUnit.Pascal));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Pressure(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            if (SupportsSIUnitSystem)
            {
                var quantity = new Pressure(value: 1, unitSystem: UnitSystem.SI);
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(() => new Pressure(value: 1, unitSystem: UnitSystem.SI));
            }
        }

        [Fact]
        public void Pressure_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Pressure(1, PressureUnit.Pascal);

            QuantityInfo<PressureUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Pressure.Zero, quantityInfo.Zero);
            Assert.Equal("Pressure", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<PressureUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void PascalToPressureUnits()
        {
            Pressure pascal = Pressure.FromPascals(1);
            AssertEx.EqualTolerance(AtmospheresInOnePascal, pascal.Atmospheres, AtmospheresTolerance);
            AssertEx.EqualTolerance(BarsInOnePascal, pascal.Bars, BarsTolerance);
            AssertEx.EqualTolerance(CentibarsInOnePascal, pascal.Centibars, CentibarsTolerance);
            AssertEx.EqualTolerance(CentimetersOfWaterColumnInOnePascal, pascal.CentimetersOfWaterColumn, CentimetersOfWaterColumnTolerance);
            AssertEx.EqualTolerance(DecapascalsInOnePascal, pascal.Decapascals, DecapascalsTolerance);
            AssertEx.EqualTolerance(DecibarsInOnePascal, pascal.Decibars, DecibarsTolerance);
            AssertEx.EqualTolerance(DynesPerSquareCentimeterInOnePascal, pascal.DynesPerSquareCentimeter, DynesPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(FeetOfHeadInOnePascal, pascal.FeetOfHead, FeetOfHeadTolerance);
            AssertEx.EqualTolerance(GigapascalsInOnePascal, pascal.Gigapascals, GigapascalsTolerance);
            AssertEx.EqualTolerance(HectopascalsInOnePascal, pascal.Hectopascals, HectopascalsTolerance);
            AssertEx.EqualTolerance(InchesOfMercuryInOnePascal, pascal.InchesOfMercury, InchesOfMercuryTolerance);
            AssertEx.EqualTolerance(InchesOfWaterColumnInOnePascal, pascal.InchesOfWaterColumn, InchesOfWaterColumnTolerance);
            AssertEx.EqualTolerance(KilobarsInOnePascal, pascal.Kilobars, KilobarsTolerance);
            AssertEx.EqualTolerance(KilogramsForcePerSquareCentimeterInOnePascal, pascal.KilogramsForcePerSquareCentimeter, KilogramsForcePerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(KilogramsForcePerSquareMeterInOnePascal, pascal.KilogramsForcePerSquareMeter, KilogramsForcePerSquareMeterTolerance);
            AssertEx.EqualTolerance(KilogramsForcePerSquareMillimeterInOnePascal, pascal.KilogramsForcePerSquareMillimeter, KilogramsForcePerSquareMillimeterTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerSquareCentimeterInOnePascal, pascal.KilonewtonsPerSquareCentimeter, KilonewtonsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerSquareMeterInOnePascal, pascal.KilonewtonsPerSquareMeter, KilonewtonsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerSquareMillimeterInOnePascal, pascal.KilonewtonsPerSquareMillimeter, KilonewtonsPerSquareMillimeterTolerance);
            AssertEx.EqualTolerance(KilopascalsInOnePascal, pascal.Kilopascals, KilopascalsTolerance);
            AssertEx.EqualTolerance(KilopoundsForcePerSquareFootInOnePascal, pascal.KilopoundsForcePerSquareFoot, KilopoundsForcePerSquareFootTolerance);
            AssertEx.EqualTolerance(KilopoundsForcePerSquareInchInOnePascal, pascal.KilopoundsForcePerSquareInch, KilopoundsForcePerSquareInchTolerance);
            AssertEx.EqualTolerance(KilopoundsForcePerSquareMilInOnePascal, pascal.KilopoundsForcePerSquareMil, KilopoundsForcePerSquareMilTolerance);
            AssertEx.EqualTolerance(MegabarsInOnePascal, pascal.Megabars, MegabarsTolerance);
            AssertEx.EqualTolerance(MeganewtonsPerSquareMeterInOnePascal, pascal.MeganewtonsPerSquareMeter, MeganewtonsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MegapascalsInOnePascal, pascal.Megapascals, MegapascalsTolerance);
            AssertEx.EqualTolerance(MetersOfHeadInOnePascal, pascal.MetersOfHead, MetersOfHeadTolerance);
            AssertEx.EqualTolerance(MetersOfWaterColumnInOnePascal, pascal.MetersOfWaterColumn, MetersOfWaterColumnTolerance);
            AssertEx.EqualTolerance(MicrobarsInOnePascal, pascal.Microbars, MicrobarsTolerance);
            AssertEx.EqualTolerance(MicropascalsInOnePascal, pascal.Micropascals, MicropascalsTolerance);
            AssertEx.EqualTolerance(MillibarsInOnePascal, pascal.Millibars, MillibarsTolerance);
            AssertEx.EqualTolerance(MillimetersOfMercuryInOnePascal, pascal.MillimetersOfMercury, MillimetersOfMercuryTolerance);
            AssertEx.EqualTolerance(MillimetersOfWaterColumnInOnePascal, pascal.MillimetersOfWaterColumn, MillimetersOfWaterColumnTolerance);
            AssertEx.EqualTolerance(MillipascalsInOnePascal, pascal.Millipascals, MillipascalsTolerance);
            AssertEx.EqualTolerance(NewtonsPerSquareCentimeterInOnePascal, pascal.NewtonsPerSquareCentimeter, NewtonsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(NewtonsPerSquareMeterInOnePascal, pascal.NewtonsPerSquareMeter, NewtonsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(NewtonsPerSquareMillimeterInOnePascal, pascal.NewtonsPerSquareMillimeter, NewtonsPerSquareMillimeterTolerance);
            AssertEx.EqualTolerance(PascalsInOnePascal, pascal.Pascals, PascalsTolerance);
            AssertEx.EqualTolerance(PoundsForcePerSquareFootInOnePascal, pascal.PoundsForcePerSquareFoot, PoundsForcePerSquareFootTolerance);
            AssertEx.EqualTolerance(PoundsForcePerSquareInchInOnePascal, pascal.PoundsForcePerSquareInch, PoundsForcePerSquareInchTolerance);
            AssertEx.EqualTolerance(PoundsForcePerSquareMilInOnePascal, pascal.PoundsForcePerSquareMil, PoundsForcePerSquareMilTolerance);
            AssertEx.EqualTolerance(PoundsPerInchSecondSquaredInOnePascal, pascal.PoundsPerInchSecondSquared, PoundsPerInchSecondSquaredTolerance);
            AssertEx.EqualTolerance(TechnicalAtmospheresInOnePascal, pascal.TechnicalAtmospheres, TechnicalAtmospheresTolerance);
            AssertEx.EqualTolerance(TonnesForcePerSquareCentimeterInOnePascal, pascal.TonnesForcePerSquareCentimeter, TonnesForcePerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(TonnesForcePerSquareMeterInOnePascal, pascal.TonnesForcePerSquareMeter, TonnesForcePerSquareMeterTolerance);
            AssertEx.EqualTolerance(TonnesForcePerSquareMillimeterInOnePascal, pascal.TonnesForcePerSquareMillimeter, TonnesForcePerSquareMillimeterTolerance);
            AssertEx.EqualTolerance(TorrsInOnePascal, pascal.Torrs, TorrsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Pressure.From(1, PressureUnit.Atmosphere);
            Assert.Equal(1, quantity00.Atmospheres);
            Assert.Equal(PressureUnit.Atmosphere, quantity00.Unit);

            var quantity01 = Pressure.From(1, PressureUnit.Bar);
            Assert.Equal(1, quantity01.Bars);
            Assert.Equal(PressureUnit.Bar, quantity01.Unit);

            var quantity02 = Pressure.From(1, PressureUnit.Centibar);
            Assert.Equal(1, quantity02.Centibars);
            Assert.Equal(PressureUnit.Centibar, quantity02.Unit);

            var quantity03 = Pressure.From(1, PressureUnit.CentimeterOfWaterColumn);
            Assert.Equal(1, quantity03.CentimetersOfWaterColumn);
            Assert.Equal(PressureUnit.CentimeterOfWaterColumn, quantity03.Unit);

            var quantity04 = Pressure.From(1, PressureUnit.Decapascal);
            Assert.Equal(1, quantity04.Decapascals);
            Assert.Equal(PressureUnit.Decapascal, quantity04.Unit);

            var quantity05 = Pressure.From(1, PressureUnit.Decibar);
            Assert.Equal(1, quantity05.Decibars);
            Assert.Equal(PressureUnit.Decibar, quantity05.Unit);

            var quantity06 = Pressure.From(1, PressureUnit.DynePerSquareCentimeter);
            Assert.Equal(1, quantity06.DynesPerSquareCentimeter);
            Assert.Equal(PressureUnit.DynePerSquareCentimeter, quantity06.Unit);

            var quantity07 = Pressure.From(1, PressureUnit.FootOfHead);
            Assert.Equal(1, quantity07.FeetOfHead);
            Assert.Equal(PressureUnit.FootOfHead, quantity07.Unit);

            var quantity08 = Pressure.From(1, PressureUnit.Gigapascal);
            Assert.Equal(1, quantity08.Gigapascals);
            Assert.Equal(PressureUnit.Gigapascal, quantity08.Unit);

            var quantity09 = Pressure.From(1, PressureUnit.Hectopascal);
            Assert.Equal(1, quantity09.Hectopascals);
            Assert.Equal(PressureUnit.Hectopascal, quantity09.Unit);

            var quantity10 = Pressure.From(1, PressureUnit.InchOfMercury);
            Assert.Equal(1, quantity10.InchesOfMercury);
            Assert.Equal(PressureUnit.InchOfMercury, quantity10.Unit);

            var quantity11 = Pressure.From(1, PressureUnit.InchOfWaterColumn);
            Assert.Equal(1, quantity11.InchesOfWaterColumn);
            Assert.Equal(PressureUnit.InchOfWaterColumn, quantity11.Unit);

            var quantity12 = Pressure.From(1, PressureUnit.Kilobar);
            Assert.Equal(1, quantity12.Kilobars);
            Assert.Equal(PressureUnit.Kilobar, quantity12.Unit);

            var quantity13 = Pressure.From(1, PressureUnit.KilogramForcePerSquareCentimeter);
            Assert.Equal(1, quantity13.KilogramsForcePerSquareCentimeter);
            Assert.Equal(PressureUnit.KilogramForcePerSquareCentimeter, quantity13.Unit);

            var quantity14 = Pressure.From(1, PressureUnit.KilogramForcePerSquareMeter);
            Assert.Equal(1, quantity14.KilogramsForcePerSquareMeter);
            Assert.Equal(PressureUnit.KilogramForcePerSquareMeter, quantity14.Unit);

            var quantity15 = Pressure.From(1, PressureUnit.KilogramForcePerSquareMillimeter);
            Assert.Equal(1, quantity15.KilogramsForcePerSquareMillimeter);
            Assert.Equal(PressureUnit.KilogramForcePerSquareMillimeter, quantity15.Unit);

            var quantity16 = Pressure.From(1, PressureUnit.KilonewtonPerSquareCentimeter);
            Assert.Equal(1, quantity16.KilonewtonsPerSquareCentimeter);
            Assert.Equal(PressureUnit.KilonewtonPerSquareCentimeter, quantity16.Unit);

            var quantity17 = Pressure.From(1, PressureUnit.KilonewtonPerSquareMeter);
            Assert.Equal(1, quantity17.KilonewtonsPerSquareMeter);
            Assert.Equal(PressureUnit.KilonewtonPerSquareMeter, quantity17.Unit);

            var quantity18 = Pressure.From(1, PressureUnit.KilonewtonPerSquareMillimeter);
            Assert.Equal(1, quantity18.KilonewtonsPerSquareMillimeter);
            Assert.Equal(PressureUnit.KilonewtonPerSquareMillimeter, quantity18.Unit);

            var quantity19 = Pressure.From(1, PressureUnit.Kilopascal);
            Assert.Equal(1, quantity19.Kilopascals);
            Assert.Equal(PressureUnit.Kilopascal, quantity19.Unit);

            var quantity20 = Pressure.From(1, PressureUnit.KilopoundForcePerSquareFoot);
            Assert.Equal(1, quantity20.KilopoundsForcePerSquareFoot);
            Assert.Equal(PressureUnit.KilopoundForcePerSquareFoot, quantity20.Unit);

            var quantity21 = Pressure.From(1, PressureUnit.KilopoundForcePerSquareInch);
            Assert.Equal(1, quantity21.KilopoundsForcePerSquareInch);
            Assert.Equal(PressureUnit.KilopoundForcePerSquareInch, quantity21.Unit);

            var quantity22 = Pressure.From(1, PressureUnit.KilopoundForcePerSquareMil);
            Assert.Equal(1, quantity22.KilopoundsForcePerSquareMil);
            Assert.Equal(PressureUnit.KilopoundForcePerSquareMil, quantity22.Unit);

            var quantity23 = Pressure.From(1, PressureUnit.Megabar);
            Assert.Equal(1, quantity23.Megabars);
            Assert.Equal(PressureUnit.Megabar, quantity23.Unit);

            var quantity24 = Pressure.From(1, PressureUnit.MeganewtonPerSquareMeter);
            Assert.Equal(1, quantity24.MeganewtonsPerSquareMeter);
            Assert.Equal(PressureUnit.MeganewtonPerSquareMeter, quantity24.Unit);

            var quantity25 = Pressure.From(1, PressureUnit.Megapascal);
            Assert.Equal(1, quantity25.Megapascals);
            Assert.Equal(PressureUnit.Megapascal, quantity25.Unit);

            var quantity26 = Pressure.From(1, PressureUnit.MeterOfHead);
            Assert.Equal(1, quantity26.MetersOfHead);
            Assert.Equal(PressureUnit.MeterOfHead, quantity26.Unit);

            var quantity27 = Pressure.From(1, PressureUnit.MeterOfWaterColumn);
            Assert.Equal(1, quantity27.MetersOfWaterColumn);
            Assert.Equal(PressureUnit.MeterOfWaterColumn, quantity27.Unit);

            var quantity28 = Pressure.From(1, PressureUnit.Microbar);
            Assert.Equal(1, quantity28.Microbars);
            Assert.Equal(PressureUnit.Microbar, quantity28.Unit);

            var quantity29 = Pressure.From(1, PressureUnit.Micropascal);
            Assert.Equal(1, quantity29.Micropascals);
            Assert.Equal(PressureUnit.Micropascal, quantity29.Unit);

            var quantity30 = Pressure.From(1, PressureUnit.Millibar);
            Assert.Equal(1, quantity30.Millibars);
            Assert.Equal(PressureUnit.Millibar, quantity30.Unit);

            var quantity31 = Pressure.From(1, PressureUnit.MillimeterOfMercury);
            Assert.Equal(1, quantity31.MillimetersOfMercury);
            Assert.Equal(PressureUnit.MillimeterOfMercury, quantity31.Unit);

            var quantity32 = Pressure.From(1, PressureUnit.MillimeterOfWaterColumn);
            Assert.Equal(1, quantity32.MillimetersOfWaterColumn);
            Assert.Equal(PressureUnit.MillimeterOfWaterColumn, quantity32.Unit);

            var quantity33 = Pressure.From(1, PressureUnit.Millipascal);
            Assert.Equal(1, quantity33.Millipascals);
            Assert.Equal(PressureUnit.Millipascal, quantity33.Unit);

            var quantity34 = Pressure.From(1, PressureUnit.NewtonPerSquareCentimeter);
            Assert.Equal(1, quantity34.NewtonsPerSquareCentimeter);
            Assert.Equal(PressureUnit.NewtonPerSquareCentimeter, quantity34.Unit);

            var quantity35 = Pressure.From(1, PressureUnit.NewtonPerSquareMeter);
            Assert.Equal(1, quantity35.NewtonsPerSquareMeter);
            Assert.Equal(PressureUnit.NewtonPerSquareMeter, quantity35.Unit);

            var quantity36 = Pressure.From(1, PressureUnit.NewtonPerSquareMillimeter);
            Assert.Equal(1, quantity36.NewtonsPerSquareMillimeter);
            Assert.Equal(PressureUnit.NewtonPerSquareMillimeter, quantity36.Unit);

            var quantity37 = Pressure.From(1, PressureUnit.Pascal);
            Assert.Equal(1, quantity37.Pascals);
            Assert.Equal(PressureUnit.Pascal, quantity37.Unit);

            var quantity38 = Pressure.From(1, PressureUnit.PoundForcePerSquareFoot);
            Assert.Equal(1, quantity38.PoundsForcePerSquareFoot);
            Assert.Equal(PressureUnit.PoundForcePerSquareFoot, quantity38.Unit);

            var quantity39 = Pressure.From(1, PressureUnit.PoundForcePerSquareInch);
            Assert.Equal(1, quantity39.PoundsForcePerSquareInch);
            Assert.Equal(PressureUnit.PoundForcePerSquareInch, quantity39.Unit);

            var quantity40 = Pressure.From(1, PressureUnit.PoundForcePerSquareMil);
            Assert.Equal(1, quantity40.PoundsForcePerSquareMil);
            Assert.Equal(PressureUnit.PoundForcePerSquareMil, quantity40.Unit);

            var quantity41 = Pressure.From(1, PressureUnit.PoundPerInchSecondSquared);
            Assert.Equal(1, quantity41.PoundsPerInchSecondSquared);
            Assert.Equal(PressureUnit.PoundPerInchSecondSquared, quantity41.Unit);

            var quantity42 = Pressure.From(1, PressureUnit.TechnicalAtmosphere);
            Assert.Equal(1, quantity42.TechnicalAtmospheres);
            Assert.Equal(PressureUnit.TechnicalAtmosphere, quantity42.Unit);

            var quantity43 = Pressure.From(1, PressureUnit.TonneForcePerSquareCentimeter);
            Assert.Equal(1, quantity43.TonnesForcePerSquareCentimeter);
            Assert.Equal(PressureUnit.TonneForcePerSquareCentimeter, quantity43.Unit);

            var quantity44 = Pressure.From(1, PressureUnit.TonneForcePerSquareMeter);
            Assert.Equal(1, quantity44.TonnesForcePerSquareMeter);
            Assert.Equal(PressureUnit.TonneForcePerSquareMeter, quantity44.Unit);

            var quantity45 = Pressure.From(1, PressureUnit.TonneForcePerSquareMillimeter);
            Assert.Equal(1, quantity45.TonnesForcePerSquareMillimeter);
            Assert.Equal(PressureUnit.TonneForcePerSquareMillimeter, quantity45.Unit);

            var quantity46 = Pressure.From(1, PressureUnit.Torr);
            Assert.Equal(1, quantity46.Torrs);
            Assert.Equal(PressureUnit.Torr, quantity46.Unit);

        }

        [Fact]
        public void FromPascals_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Pressure.FromPascals(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Pressure.FromPascals(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromPascals_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Pressure.FromPascals(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var pascal = Pressure.FromPascals(1);
            AssertEx.EqualTolerance(AtmospheresInOnePascal, pascal.As(PressureUnit.Atmosphere), AtmospheresTolerance);
            AssertEx.EqualTolerance(BarsInOnePascal, pascal.As(PressureUnit.Bar), BarsTolerance);
            AssertEx.EqualTolerance(CentibarsInOnePascal, pascal.As(PressureUnit.Centibar), CentibarsTolerance);
            AssertEx.EqualTolerance(CentimetersOfWaterColumnInOnePascal, pascal.As(PressureUnit.CentimeterOfWaterColumn), CentimetersOfWaterColumnTolerance);
            AssertEx.EqualTolerance(DecapascalsInOnePascal, pascal.As(PressureUnit.Decapascal), DecapascalsTolerance);
            AssertEx.EqualTolerance(DecibarsInOnePascal, pascal.As(PressureUnit.Decibar), DecibarsTolerance);
            AssertEx.EqualTolerance(DynesPerSquareCentimeterInOnePascal, pascal.As(PressureUnit.DynePerSquareCentimeter), DynesPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(FeetOfHeadInOnePascal, pascal.As(PressureUnit.FootOfHead), FeetOfHeadTolerance);
            AssertEx.EqualTolerance(GigapascalsInOnePascal, pascal.As(PressureUnit.Gigapascal), GigapascalsTolerance);
            AssertEx.EqualTolerance(HectopascalsInOnePascal, pascal.As(PressureUnit.Hectopascal), HectopascalsTolerance);
            AssertEx.EqualTolerance(InchesOfMercuryInOnePascal, pascal.As(PressureUnit.InchOfMercury), InchesOfMercuryTolerance);
            AssertEx.EqualTolerance(InchesOfWaterColumnInOnePascal, pascal.As(PressureUnit.InchOfWaterColumn), InchesOfWaterColumnTolerance);
            AssertEx.EqualTolerance(KilobarsInOnePascal, pascal.As(PressureUnit.Kilobar), KilobarsTolerance);
            AssertEx.EqualTolerance(KilogramsForcePerSquareCentimeterInOnePascal, pascal.As(PressureUnit.KilogramForcePerSquareCentimeter), KilogramsForcePerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(KilogramsForcePerSquareMeterInOnePascal, pascal.As(PressureUnit.KilogramForcePerSquareMeter), KilogramsForcePerSquareMeterTolerance);
            AssertEx.EqualTolerance(KilogramsForcePerSquareMillimeterInOnePascal, pascal.As(PressureUnit.KilogramForcePerSquareMillimeter), KilogramsForcePerSquareMillimeterTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerSquareCentimeterInOnePascal, pascal.As(PressureUnit.KilonewtonPerSquareCentimeter), KilonewtonsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerSquareMeterInOnePascal, pascal.As(PressureUnit.KilonewtonPerSquareMeter), KilonewtonsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerSquareMillimeterInOnePascal, pascal.As(PressureUnit.KilonewtonPerSquareMillimeter), KilonewtonsPerSquareMillimeterTolerance);
            AssertEx.EqualTolerance(KilopascalsInOnePascal, pascal.As(PressureUnit.Kilopascal), KilopascalsTolerance);
            AssertEx.EqualTolerance(KilopoundsForcePerSquareFootInOnePascal, pascal.As(PressureUnit.KilopoundForcePerSquareFoot), KilopoundsForcePerSquareFootTolerance);
            AssertEx.EqualTolerance(KilopoundsForcePerSquareInchInOnePascal, pascal.As(PressureUnit.KilopoundForcePerSquareInch), KilopoundsForcePerSquareInchTolerance);
            AssertEx.EqualTolerance(KilopoundsForcePerSquareMilInOnePascal, pascal.As(PressureUnit.KilopoundForcePerSquareMil), KilopoundsForcePerSquareMilTolerance);
            AssertEx.EqualTolerance(MegabarsInOnePascal, pascal.As(PressureUnit.Megabar), MegabarsTolerance);
            AssertEx.EqualTolerance(MeganewtonsPerSquareMeterInOnePascal, pascal.As(PressureUnit.MeganewtonPerSquareMeter), MeganewtonsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MegapascalsInOnePascal, pascal.As(PressureUnit.Megapascal), MegapascalsTolerance);
            AssertEx.EqualTolerance(MetersOfHeadInOnePascal, pascal.As(PressureUnit.MeterOfHead), MetersOfHeadTolerance);
            AssertEx.EqualTolerance(MetersOfWaterColumnInOnePascal, pascal.As(PressureUnit.MeterOfWaterColumn), MetersOfWaterColumnTolerance);
            AssertEx.EqualTolerance(MicrobarsInOnePascal, pascal.As(PressureUnit.Microbar), MicrobarsTolerance);
            AssertEx.EqualTolerance(MicropascalsInOnePascal, pascal.As(PressureUnit.Micropascal), MicropascalsTolerance);
            AssertEx.EqualTolerance(MillibarsInOnePascal, pascal.As(PressureUnit.Millibar), MillibarsTolerance);
            AssertEx.EqualTolerance(MillimetersOfMercuryInOnePascal, pascal.As(PressureUnit.MillimeterOfMercury), MillimetersOfMercuryTolerance);
            AssertEx.EqualTolerance(MillimetersOfWaterColumnInOnePascal, pascal.As(PressureUnit.MillimeterOfWaterColumn), MillimetersOfWaterColumnTolerance);
            AssertEx.EqualTolerance(MillipascalsInOnePascal, pascal.As(PressureUnit.Millipascal), MillipascalsTolerance);
            AssertEx.EqualTolerance(NewtonsPerSquareCentimeterInOnePascal, pascal.As(PressureUnit.NewtonPerSquareCentimeter), NewtonsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(NewtonsPerSquareMeterInOnePascal, pascal.As(PressureUnit.NewtonPerSquareMeter), NewtonsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(NewtonsPerSquareMillimeterInOnePascal, pascal.As(PressureUnit.NewtonPerSquareMillimeter), NewtonsPerSquareMillimeterTolerance);
            AssertEx.EqualTolerance(PascalsInOnePascal, pascal.As(PressureUnit.Pascal), PascalsTolerance);
            AssertEx.EqualTolerance(PoundsForcePerSquareFootInOnePascal, pascal.As(PressureUnit.PoundForcePerSquareFoot), PoundsForcePerSquareFootTolerance);
            AssertEx.EqualTolerance(PoundsForcePerSquareInchInOnePascal, pascal.As(PressureUnit.PoundForcePerSquareInch), PoundsForcePerSquareInchTolerance);
            AssertEx.EqualTolerance(PoundsForcePerSquareMilInOnePascal, pascal.As(PressureUnit.PoundForcePerSquareMil), PoundsForcePerSquareMilTolerance);
            AssertEx.EqualTolerance(PoundsPerInchSecondSquaredInOnePascal, pascal.As(PressureUnit.PoundPerInchSecondSquared), PoundsPerInchSecondSquaredTolerance);
            AssertEx.EqualTolerance(TechnicalAtmospheresInOnePascal, pascal.As(PressureUnit.TechnicalAtmosphere), TechnicalAtmospheresTolerance);
            AssertEx.EqualTolerance(TonnesForcePerSquareCentimeterInOnePascal, pascal.As(PressureUnit.TonneForcePerSquareCentimeter), TonnesForcePerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(TonnesForcePerSquareMeterInOnePascal, pascal.As(PressureUnit.TonneForcePerSquareMeter), TonnesForcePerSquareMeterTolerance);
            AssertEx.EqualTolerance(TonnesForcePerSquareMillimeterInOnePascal, pascal.As(PressureUnit.TonneForcePerSquareMillimeter), TonnesForcePerSquareMillimeterTolerance);
            AssertEx.EqualTolerance(TorrsInOnePascal, pascal.As(PressureUnit.Torr), TorrsTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Pressure(value: 1, unit: Pressure.BaseUnit);
            if (SupportsSIUnitSystem)
            {
                Assert.Equal(1, quantity.As(UnitSystem.SI));
            }
            else
            {
                Assert.Throws<ArgumentException>(() => quantity.As(UnitSystem.SI));
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = Pressure.Parse("1 atm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Atmospheres);
                Assert.Equal(PressureUnit.Atmosphere, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 атм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Atmospheres);
                Assert.Equal(PressureUnit.Atmosphere, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 bar", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Bars);
                Assert.Equal(PressureUnit.Bar, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 бар", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Bars);
                Assert.Equal(PressureUnit.Bar, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 cbar", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Centibars);
                Assert.Equal(PressureUnit.Centibar, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 сбар", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Centibars);
                Assert.Equal(PressureUnit.Centibar, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 cmH₂O", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.CentimetersOfWaterColumn);
                Assert.Equal(PressureUnit.CentimeterOfWaterColumn, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 cmH2O", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.CentimetersOfWaterColumn);
                Assert.Equal(PressureUnit.CentimeterOfWaterColumn, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 cm wc", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.CentimetersOfWaterColumn);
                Assert.Equal(PressureUnit.CentimeterOfWaterColumn, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 cm wg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.CentimetersOfWaterColumn);
                Assert.Equal(PressureUnit.CentimeterOfWaterColumn, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 daPa", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Decapascals);
                Assert.Equal(PressureUnit.Decapascal, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 даПа", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Decapascals);
                Assert.Equal(PressureUnit.Decapascal, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 dbar", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Decibars);
                Assert.Equal(PressureUnit.Decibar, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 дбар", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Decibars);
                Assert.Equal(PressureUnit.Decibar, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 dyn/cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.DynesPerSquareCentimeter);
                Assert.Equal(PressureUnit.DynePerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 ft of head", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.FeetOfHead);
                Assert.Equal(PressureUnit.FootOfHead, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 GPa", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Gigapascals);
                Assert.Equal(PressureUnit.Gigapascal, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 ГПа", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Gigapascals);
                Assert.Equal(PressureUnit.Gigapascal, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 hPa", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Hectopascals);
                Assert.Equal(PressureUnit.Hectopascal, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 гПа", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Hectopascals);
                Assert.Equal(PressureUnit.Hectopascal, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 inHg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.InchesOfMercury);
                Assert.Equal(PressureUnit.InchOfMercury, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 inH2O", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.InchesOfWaterColumn);
                Assert.Equal(PressureUnit.InchOfWaterColumn, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 inch wc", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.InchesOfWaterColumn);
                Assert.Equal(PressureUnit.InchOfWaterColumn, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 wc", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.InchesOfWaterColumn);
                Assert.Equal(PressureUnit.InchOfWaterColumn, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 kbar", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Kilobars);
                Assert.Equal(PressureUnit.Kilobar, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 кбар", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Kilobars);
                Assert.Equal(PressureUnit.Kilobar, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 kgf/cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilogramsForcePerSquareCentimeter);
                Assert.Equal(PressureUnit.KilogramForcePerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 кгс/см²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.KilogramsForcePerSquareCentimeter);
                Assert.Equal(PressureUnit.KilogramForcePerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 kgf/m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilogramsForcePerSquareMeter);
                Assert.Equal(PressureUnit.KilogramForcePerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 кгс/м²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.KilogramsForcePerSquareMeter);
                Assert.Equal(PressureUnit.KilogramForcePerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 kgf/mm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilogramsForcePerSquareMillimeter);
                Assert.Equal(PressureUnit.KilogramForcePerSquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 кгс/мм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.KilogramsForcePerSquareMillimeter);
                Assert.Equal(PressureUnit.KilogramForcePerSquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 kN/cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilonewtonsPerSquareCentimeter);
                Assert.Equal(PressureUnit.KilonewtonPerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 кН/см²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.KilonewtonsPerSquareCentimeter);
                Assert.Equal(PressureUnit.KilonewtonPerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 kN/m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilonewtonsPerSquareMeter);
                Assert.Equal(PressureUnit.KilonewtonPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 кН/м²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.KilonewtonsPerSquareMeter);
                Assert.Equal(PressureUnit.KilonewtonPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 kN/mm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilonewtonsPerSquareMillimeter);
                Assert.Equal(PressureUnit.KilonewtonPerSquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 кН/мм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.KilonewtonsPerSquareMillimeter);
                Assert.Equal(PressureUnit.KilonewtonPerSquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 kPa", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Kilopascals);
                Assert.Equal(PressureUnit.Kilopascal, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 кПа", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Kilopascals);
                Assert.Equal(PressureUnit.Kilopascal, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 kipf/ft²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilopoundsForcePerSquareFoot);
                Assert.Equal(PressureUnit.KilopoundForcePerSquareFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 ksi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilopoundsForcePerSquareInch);
                Assert.Equal(PressureUnit.KilopoundForcePerSquareInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 kipf/in²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilopoundsForcePerSquareInch);
                Assert.Equal(PressureUnit.KilopoundForcePerSquareInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 ksi", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.KilopoundsForcePerSquareInch);
                Assert.Equal(PressureUnit.KilopoundForcePerSquareInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 kipf/in²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.KilopoundsForcePerSquareInch);
                Assert.Equal(PressureUnit.KilopoundForcePerSquareInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 kipf/mil²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilopoundsForcePerSquareMil);
                Assert.Equal(PressureUnit.KilopoundForcePerSquareMil, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 Mbar", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Megabars);
                Assert.Equal(PressureUnit.Megabar, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 Мбар", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Megabars);
                Assert.Equal(PressureUnit.Megabar, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 MN/m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MeganewtonsPerSquareMeter);
                Assert.Equal(PressureUnit.MeganewtonPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 МН/м²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.MeganewtonsPerSquareMeter);
                Assert.Equal(PressureUnit.MeganewtonPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 MPa", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Megapascals);
                Assert.Equal(PressureUnit.Megapascal, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 МПа", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Megapascals);
                Assert.Equal(PressureUnit.Megapascal, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 m of head", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MetersOfHead);
                Assert.Equal(PressureUnit.MeterOfHead, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 mH₂O", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MetersOfWaterColumn);
                Assert.Equal(PressureUnit.MeterOfWaterColumn, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 mH2O", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MetersOfWaterColumn);
                Assert.Equal(PressureUnit.MeterOfWaterColumn, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 m wc", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MetersOfWaterColumn);
                Assert.Equal(PressureUnit.MeterOfWaterColumn, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 m wg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MetersOfWaterColumn);
                Assert.Equal(PressureUnit.MeterOfWaterColumn, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 µbar", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Microbars);
                Assert.Equal(PressureUnit.Microbar, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 мкбар", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Microbars);
                Assert.Equal(PressureUnit.Microbar, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 µPa", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Micropascals);
                Assert.Equal(PressureUnit.Micropascal, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 мкПа", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Micropascals);
                Assert.Equal(PressureUnit.Micropascal, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 mbar", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Millibars);
                Assert.Equal(PressureUnit.Millibar, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 мбар", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Millibars);
                Assert.Equal(PressureUnit.Millibar, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 mmHg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MillimetersOfMercury);
                Assert.Equal(PressureUnit.MillimeterOfMercury, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 мм рт.ст.", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.MillimetersOfMercury);
                Assert.Equal(PressureUnit.MillimeterOfMercury, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 mmH₂O", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MillimetersOfWaterColumn);
                Assert.Equal(PressureUnit.MillimeterOfWaterColumn, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 mmH2O", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MillimetersOfWaterColumn);
                Assert.Equal(PressureUnit.MillimeterOfWaterColumn, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 mm wc", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MillimetersOfWaterColumn);
                Assert.Equal(PressureUnit.MillimeterOfWaterColumn, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 mm wg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MillimetersOfWaterColumn);
                Assert.Equal(PressureUnit.MillimeterOfWaterColumn, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 mPa", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Millipascals);
                Assert.Equal(PressureUnit.Millipascal, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 мПа", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Millipascals);
                Assert.Equal(PressureUnit.Millipascal, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 N/cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.NewtonsPerSquareCentimeter);
                Assert.Equal(PressureUnit.NewtonPerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 Н/см²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.NewtonsPerSquareCentimeter);
                Assert.Equal(PressureUnit.NewtonPerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 N/m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.NewtonsPerSquareMeter);
                Assert.Equal(PressureUnit.NewtonPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 Н/м²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.NewtonsPerSquareMeter);
                Assert.Equal(PressureUnit.NewtonPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 N/mm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.NewtonsPerSquareMillimeter);
                Assert.Equal(PressureUnit.NewtonPerSquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 Н/мм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.NewtonsPerSquareMillimeter);
                Assert.Equal(PressureUnit.NewtonPerSquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 Pa", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Pascals);
                Assert.Equal(PressureUnit.Pascal, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 Па", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Pascals);
                Assert.Equal(PressureUnit.Pascal, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 lb/ft²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PoundsForcePerSquareFoot);
                Assert.Equal(PressureUnit.PoundForcePerSquareFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 psi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PoundsForcePerSquareInch);
                Assert.Equal(PressureUnit.PoundForcePerSquareInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 lb/in²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PoundsForcePerSquareInch);
                Assert.Equal(PressureUnit.PoundForcePerSquareInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 psi", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.PoundsForcePerSquareInch);
                Assert.Equal(PressureUnit.PoundForcePerSquareInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 lb/in²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.PoundsForcePerSquareInch);
                Assert.Equal(PressureUnit.PoundForcePerSquareInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 lb/mil²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PoundsForcePerSquareMil);
                Assert.Equal(PressureUnit.PoundForcePerSquareMil, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 lbs/mil²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PoundsForcePerSquareMil);
                Assert.Equal(PressureUnit.PoundForcePerSquareMil, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 lbm/(in·s²)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PoundsPerInchSecondSquared);
                Assert.Equal(PressureUnit.PoundPerInchSecondSquared, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 lb/(in·s²)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PoundsPerInchSecondSquared);
                Assert.Equal(PressureUnit.PoundPerInchSecondSquared, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 at", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.TechnicalAtmospheres);
                Assert.Equal(PressureUnit.TechnicalAtmosphere, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 ат", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.TechnicalAtmospheres);
                Assert.Equal(PressureUnit.TechnicalAtmosphere, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 tf/cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.TonnesForcePerSquareCentimeter);
                Assert.Equal(PressureUnit.TonneForcePerSquareCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 tf/m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.TonnesForcePerSquareMeter);
                Assert.Equal(PressureUnit.TonneForcePerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 tf/mm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.TonnesForcePerSquareMillimeter);
                Assert.Equal(PressureUnit.TonneForcePerSquareMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 torr", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Torrs);
                Assert.Equal(PressureUnit.Torr, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Pressure.Parse("1 торр", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Torrs);
                Assert.Equal(PressureUnit.Torr, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(Pressure.TryParse("1 atm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Atmospheres);
                Assert.Equal(PressureUnit.Atmosphere, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 атм", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Atmospheres);
                Assert.Equal(PressureUnit.Atmosphere, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 bar", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Bars);
                Assert.Equal(PressureUnit.Bar, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 бар", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Bars);
                Assert.Equal(PressureUnit.Bar, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 cbar", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Centibars);
                Assert.Equal(PressureUnit.Centibar, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 сбар", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Centibars);
                Assert.Equal(PressureUnit.Centibar, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 cmH₂O", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.CentimetersOfWaterColumn);
                Assert.Equal(PressureUnit.CentimeterOfWaterColumn, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 cmH2O", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.CentimetersOfWaterColumn);
                Assert.Equal(PressureUnit.CentimeterOfWaterColumn, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 cm wc", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.CentimetersOfWaterColumn);
                Assert.Equal(PressureUnit.CentimeterOfWaterColumn, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 cm wg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.CentimetersOfWaterColumn);
                Assert.Equal(PressureUnit.CentimeterOfWaterColumn, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 daPa", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Decapascals);
                Assert.Equal(PressureUnit.Decapascal, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 даПа", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Decapascals);
                Assert.Equal(PressureUnit.Decapascal, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 dbar", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Decibars);
                Assert.Equal(PressureUnit.Decibar, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 дбар", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Decibars);
                Assert.Equal(PressureUnit.Decibar, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 dyn/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.DynesPerSquareCentimeter);
                Assert.Equal(PressureUnit.DynePerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 ft of head", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.FeetOfHead);
                Assert.Equal(PressureUnit.FootOfHead, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 GPa", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Gigapascals);
                Assert.Equal(PressureUnit.Gigapascal, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 hPa", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Hectopascals);
                Assert.Equal(PressureUnit.Hectopascal, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 inHg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.InchesOfMercury);
                Assert.Equal(PressureUnit.InchOfMercury, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 inH2O", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.InchesOfWaterColumn);
                Assert.Equal(PressureUnit.InchOfWaterColumn, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 inch wc", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.InchesOfWaterColumn);
                Assert.Equal(PressureUnit.InchOfWaterColumn, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 wc", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.InchesOfWaterColumn);
                Assert.Equal(PressureUnit.InchOfWaterColumn, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 kbar", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Kilobars);
                Assert.Equal(PressureUnit.Kilobar, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 кбар", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Kilobars);
                Assert.Equal(PressureUnit.Kilobar, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 kgf/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilogramsForcePerSquareCentimeter);
                Assert.Equal(PressureUnit.KilogramForcePerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 кгс/см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.KilogramsForcePerSquareCentimeter);
                Assert.Equal(PressureUnit.KilogramForcePerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 kgf/m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilogramsForcePerSquareMeter);
                Assert.Equal(PressureUnit.KilogramForcePerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 кгс/м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.KilogramsForcePerSquareMeter);
                Assert.Equal(PressureUnit.KilogramForcePerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 kgf/mm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilogramsForcePerSquareMillimeter);
                Assert.Equal(PressureUnit.KilogramForcePerSquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 кгс/мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.KilogramsForcePerSquareMillimeter);
                Assert.Equal(PressureUnit.KilogramForcePerSquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 kN/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilonewtonsPerSquareCentimeter);
                Assert.Equal(PressureUnit.KilonewtonPerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 кН/см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.KilonewtonsPerSquareCentimeter);
                Assert.Equal(PressureUnit.KilonewtonPerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 kN/m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilonewtonsPerSquareMeter);
                Assert.Equal(PressureUnit.KilonewtonPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 кН/м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.KilonewtonsPerSquareMeter);
                Assert.Equal(PressureUnit.KilonewtonPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 kN/mm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilonewtonsPerSquareMillimeter);
                Assert.Equal(PressureUnit.KilonewtonPerSquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 кН/мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.KilonewtonsPerSquareMillimeter);
                Assert.Equal(PressureUnit.KilonewtonPerSquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 kPa", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Kilopascals);
                Assert.Equal(PressureUnit.Kilopascal, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 кПа", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Kilopascals);
                Assert.Equal(PressureUnit.Kilopascal, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 kipf/ft²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilopoundsForcePerSquareFoot);
                Assert.Equal(PressureUnit.KilopoundForcePerSquareFoot, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 ksi", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilopoundsForcePerSquareInch);
                Assert.Equal(PressureUnit.KilopoundForcePerSquareInch, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 kipf/in²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilopoundsForcePerSquareInch);
                Assert.Equal(PressureUnit.KilopoundForcePerSquareInch, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 ksi", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.KilopoundsForcePerSquareInch);
                Assert.Equal(PressureUnit.KilopoundForcePerSquareInch, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 kipf/in²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.KilopoundsForcePerSquareInch);
                Assert.Equal(PressureUnit.KilopoundForcePerSquareInch, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 kipf/mil²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilopoundsForcePerSquareMil);
                Assert.Equal(PressureUnit.KilopoundForcePerSquareMil, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 MN/m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MeganewtonsPerSquareMeter);
                Assert.Equal(PressureUnit.MeganewtonPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 МН/м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.MeganewtonsPerSquareMeter);
                Assert.Equal(PressureUnit.MeganewtonPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 m of head", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MetersOfHead);
                Assert.Equal(PressureUnit.MeterOfHead, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 mH₂O", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MetersOfWaterColumn);
                Assert.Equal(PressureUnit.MeterOfWaterColumn, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 mH2O", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MetersOfWaterColumn);
                Assert.Equal(PressureUnit.MeterOfWaterColumn, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 m wc", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MetersOfWaterColumn);
                Assert.Equal(PressureUnit.MeterOfWaterColumn, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 m wg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MetersOfWaterColumn);
                Assert.Equal(PressureUnit.MeterOfWaterColumn, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 µbar", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Microbars);
                Assert.Equal(PressureUnit.Microbar, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 мкбар", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Microbars);
                Assert.Equal(PressureUnit.Microbar, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 µPa", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Micropascals);
                Assert.Equal(PressureUnit.Micropascal, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 мкПа", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Micropascals);
                Assert.Equal(PressureUnit.Micropascal, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 mmHg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MillimetersOfMercury);
                Assert.Equal(PressureUnit.MillimeterOfMercury, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 мм рт.ст.", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.MillimetersOfMercury);
                Assert.Equal(PressureUnit.MillimeterOfMercury, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 mmH₂O", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MillimetersOfWaterColumn);
                Assert.Equal(PressureUnit.MillimeterOfWaterColumn, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 mmH2O", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MillimetersOfWaterColumn);
                Assert.Equal(PressureUnit.MillimeterOfWaterColumn, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 mm wc", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MillimetersOfWaterColumn);
                Assert.Equal(PressureUnit.MillimeterOfWaterColumn, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 mm wg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MillimetersOfWaterColumn);
                Assert.Equal(PressureUnit.MillimeterOfWaterColumn, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 N/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.NewtonsPerSquareCentimeter);
                Assert.Equal(PressureUnit.NewtonPerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 Н/см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.NewtonsPerSquareCentimeter);
                Assert.Equal(PressureUnit.NewtonPerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 N/m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.NewtonsPerSquareMeter);
                Assert.Equal(PressureUnit.NewtonPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 Н/м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.NewtonsPerSquareMeter);
                Assert.Equal(PressureUnit.NewtonPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 N/mm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.NewtonsPerSquareMillimeter);
                Assert.Equal(PressureUnit.NewtonPerSquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 Н/мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.NewtonsPerSquareMillimeter);
                Assert.Equal(PressureUnit.NewtonPerSquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 Pa", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Pascals);
                Assert.Equal(PressureUnit.Pascal, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 Па", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Pascals);
                Assert.Equal(PressureUnit.Pascal, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 lb/ft²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PoundsForcePerSquareFoot);
                Assert.Equal(PressureUnit.PoundForcePerSquareFoot, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 psi", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PoundsForcePerSquareInch);
                Assert.Equal(PressureUnit.PoundForcePerSquareInch, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 lb/in²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PoundsForcePerSquareInch);
                Assert.Equal(PressureUnit.PoundForcePerSquareInch, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 psi", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.PoundsForcePerSquareInch);
                Assert.Equal(PressureUnit.PoundForcePerSquareInch, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 lb/in²", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.PoundsForcePerSquareInch);
                Assert.Equal(PressureUnit.PoundForcePerSquareInch, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 lb/mil²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PoundsForcePerSquareMil);
                Assert.Equal(PressureUnit.PoundForcePerSquareMil, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 lbs/mil²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PoundsForcePerSquareMil);
                Assert.Equal(PressureUnit.PoundForcePerSquareMil, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 lbm/(in·s²)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PoundsPerInchSecondSquared);
                Assert.Equal(PressureUnit.PoundPerInchSecondSquared, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 lb/(in·s²)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PoundsPerInchSecondSquared);
                Assert.Equal(PressureUnit.PoundPerInchSecondSquared, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 at", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.TechnicalAtmospheres);
                Assert.Equal(PressureUnit.TechnicalAtmosphere, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 ат", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.TechnicalAtmospheres);
                Assert.Equal(PressureUnit.TechnicalAtmosphere, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 tf/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.TonnesForcePerSquareCentimeter);
                Assert.Equal(PressureUnit.TonneForcePerSquareCentimeter, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 tf/m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.TonnesForcePerSquareMeter);
                Assert.Equal(PressureUnit.TonneForcePerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 tf/mm²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.TonnesForcePerSquareMillimeter);
                Assert.Equal(PressureUnit.TonneForcePerSquareMillimeter, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 torr", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Torrs);
                Assert.Equal(PressureUnit.Torr, parsed.Unit);
            }

            {
                Assert.True(Pressure.TryParse("1 торр", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Torrs);
                Assert.Equal(PressureUnit.Torr, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = Pressure.ParseUnit("atm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.Atmosphere, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("атм", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.Atmosphere, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("bar", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.Bar, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("бар", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.Bar, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("cbar", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.Centibar, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("сбар", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.Centibar, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("cmH₂O", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.CentimeterOfWaterColumn, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("cmH2O", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.CentimeterOfWaterColumn, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("cm wc", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.CentimeterOfWaterColumn, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("cm wg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.CentimeterOfWaterColumn, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("daPa", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.Decapascal, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("даПа", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.Decapascal, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("dbar", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.Decibar, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("дбар", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.Decibar, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("dyn/cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.DynePerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("ft of head", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.FootOfHead, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("GPa", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.Gigapascal, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("ГПа", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.Gigapascal, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("hPa", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.Hectopascal, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("гПа", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.Hectopascal, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("inHg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.InchOfMercury, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("inH2O", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.InchOfWaterColumn, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("inch wc", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.InchOfWaterColumn, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("wc", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.InchOfWaterColumn, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("kbar", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.Kilobar, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("кбар", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.Kilobar, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("kgf/cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.KilogramForcePerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("кгс/см²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.KilogramForcePerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("kgf/m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.KilogramForcePerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("кгс/м²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.KilogramForcePerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("kgf/mm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.KilogramForcePerSquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("кгс/мм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.KilogramForcePerSquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("kN/cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.KilonewtonPerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("кН/см²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.KilonewtonPerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("kN/m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.KilonewtonPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("кН/м²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.KilonewtonPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("kN/mm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.KilonewtonPerSquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("кН/мм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.KilonewtonPerSquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("kPa", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.Kilopascal, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("кПа", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.Kilopascal, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("kipf/ft²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.KilopoundForcePerSquareFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("ksi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.KilopoundForcePerSquareInch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("kipf/in²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.KilopoundForcePerSquareInch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("ksi", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.KilopoundForcePerSquareInch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("kipf/in²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.KilopoundForcePerSquareInch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("kipf/mil²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.KilopoundForcePerSquareMil, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("Mbar", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.Megabar, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("Мбар", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.Megabar, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("MN/m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.MeganewtonPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("МН/м²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.MeganewtonPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("MPa", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.Megapascal, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("МПа", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.Megapascal, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("m of head", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.MeterOfHead, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("mH₂O", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.MeterOfWaterColumn, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("mH2O", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.MeterOfWaterColumn, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("m wc", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.MeterOfWaterColumn, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("m wg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.MeterOfWaterColumn, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("µbar", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.Microbar, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("мкбар", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.Microbar, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("µPa", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.Micropascal, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("мкПа", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.Micropascal, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("mbar", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.Millibar, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("мбар", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.Millibar, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("mmHg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.MillimeterOfMercury, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("мм рт.ст.", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.MillimeterOfMercury, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("mmH₂O", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.MillimeterOfWaterColumn, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("mmH2O", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.MillimeterOfWaterColumn, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("mm wc", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.MillimeterOfWaterColumn, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("mm wg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.MillimeterOfWaterColumn, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("mPa", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.Millipascal, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("мПа", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.Millipascal, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("N/cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.NewtonPerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("Н/см²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.NewtonPerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("N/m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.NewtonPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("Н/м²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.NewtonPerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("N/mm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.NewtonPerSquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("Н/мм²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.NewtonPerSquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("Pa", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.Pascal, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("Па", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.Pascal, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("lb/ft²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.PoundForcePerSquareFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("psi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.PoundForcePerSquareInch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("lb/in²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.PoundForcePerSquareInch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("psi", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.PoundForcePerSquareInch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("lb/in²", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.PoundForcePerSquareInch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("lb/mil²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.PoundForcePerSquareMil, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("lbs/mil²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.PoundForcePerSquareMil, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("lbm/(in·s²)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.PoundPerInchSecondSquared, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("lb/(in·s²)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.PoundPerInchSecondSquared, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("at", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.TechnicalAtmosphere, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("ат", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.TechnicalAtmosphere, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("tf/cm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.TonneForcePerSquareCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("tf/m²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.TonneForcePerSquareMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("tf/mm²", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.TonneForcePerSquareMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("torr", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(PressureUnit.Torr, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Pressure.ParseUnit("торр", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(PressureUnit.Torr, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(Pressure.TryParseUnit("atm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.Atmosphere, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("атм", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.Atmosphere, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("bar", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.Bar, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("бар", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.Bar, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("cbar", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.Centibar, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("сбар", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.Centibar, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("cmH₂O", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.CentimeterOfWaterColumn, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("cmH2O", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.CentimeterOfWaterColumn, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("cm wc", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.CentimeterOfWaterColumn, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("cm wg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.CentimeterOfWaterColumn, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("daPa", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.Decapascal, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("даПа", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.Decapascal, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("dbar", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.Decibar, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("дбар", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.Decibar, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("dyn/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.DynePerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("ft of head", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.FootOfHead, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("GPa", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.Gigapascal, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("hPa", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.Hectopascal, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("inHg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.InchOfMercury, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("inH2O", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.InchOfWaterColumn, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("inch wc", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.InchOfWaterColumn, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("wc", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.InchOfWaterColumn, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("kbar", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.Kilobar, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("кбар", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.Kilobar, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("kgf/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.KilogramForcePerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("кгс/см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.KilogramForcePerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("kgf/m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.KilogramForcePerSquareMeter, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("кгс/м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.KilogramForcePerSquareMeter, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("kgf/mm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.KilogramForcePerSquareMillimeter, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("кгс/мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.KilogramForcePerSquareMillimeter, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("kN/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.KilonewtonPerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("кН/см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.KilonewtonPerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("kN/m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.KilonewtonPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("кН/м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.KilonewtonPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("kN/mm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.KilonewtonPerSquareMillimeter, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("кН/мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.KilonewtonPerSquareMillimeter, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("kPa", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.Kilopascal, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("кПа", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.Kilopascal, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("kipf/ft²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.KilopoundForcePerSquareFoot, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("ksi", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.KilopoundForcePerSquareInch, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("kipf/in²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.KilopoundForcePerSquareInch, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("ksi", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.KilopoundForcePerSquareInch, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("kipf/in²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.KilopoundForcePerSquareInch, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("kipf/mil²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.KilopoundForcePerSquareMil, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("MN/m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.MeganewtonPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("МН/м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.MeganewtonPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("m of head", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.MeterOfHead, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("mH₂O", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.MeterOfWaterColumn, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("mH2O", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.MeterOfWaterColumn, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("m wc", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.MeterOfWaterColumn, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("m wg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.MeterOfWaterColumn, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("µbar", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.Microbar, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("мкбар", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.Microbar, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("µPa", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.Micropascal, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("мкПа", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.Micropascal, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("mmHg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.MillimeterOfMercury, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("мм рт.ст.", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.MillimeterOfMercury, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("mmH₂O", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.MillimeterOfWaterColumn, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("mmH2O", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.MillimeterOfWaterColumn, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("mm wc", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.MillimeterOfWaterColumn, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("mm wg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.MillimeterOfWaterColumn, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("N/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.NewtonPerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("Н/см²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.NewtonPerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("N/m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.NewtonPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("Н/м²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.NewtonPerSquareMeter, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("N/mm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.NewtonPerSquareMillimeter, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("Н/мм²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.NewtonPerSquareMillimeter, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("Pa", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.Pascal, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("Па", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.Pascal, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("lb/ft²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.PoundForcePerSquareFoot, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("psi", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.PoundForcePerSquareInch, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("lb/in²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.PoundForcePerSquareInch, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("psi", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.PoundForcePerSquareInch, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("lb/in²", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.PoundForcePerSquareInch, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("lb/mil²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.PoundForcePerSquareMil, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("lbs/mil²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.PoundForcePerSquareMil, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("lbm/(in·s²)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.PoundPerInchSecondSquared, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("lb/(in·s²)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.PoundPerInchSecondSquared, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("at", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.TechnicalAtmosphere, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("ат", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.TechnicalAtmosphere, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("tf/cm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.TonneForcePerSquareCentimeter, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("tf/m²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.TonneForcePerSquareMeter, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("tf/mm²", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.TonneForcePerSquareMillimeter, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("torr", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(PressureUnit.Torr, parsedUnit);
            }

            {
                Assert.True(Pressure.TryParseUnit("торр", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(PressureUnit.Torr, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(PressureUnit unit)
        {
            var inBaseUnits = Pressure.From(1.0, Pressure.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(PressureUnit unit)
        {
            var quantity = Pressure.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(PressureUnit unit)
        {
            // See if there is a unit available that is not the base unit, fallback to base unit if it has only a single unit.
            var fromUnit = Pressure.Units.First(u => u != Pressure.BaseUnit);

            var quantity = Pressure.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(PressureUnit unit)
        {
            var quantity = default(Pressure);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Pressure pascal = Pressure.FromPascals(1);
            Assert.Equal(1, Pressure.FromAtmospheres(pascal.Atmospheres).Pascals);
            Assert.Equal(1, Pressure.FromBars(pascal.Bars).Pascals);
            Assert.Equal(1, Pressure.FromCentibars(pascal.Centibars).Pascals);
            Assert.Equal(1, Pressure.FromCentimetersOfWaterColumn(pascal.CentimetersOfWaterColumn).Pascals);
            Assert.Equal(1, Pressure.FromDecapascals(pascal.Decapascals).Pascals);
            Assert.Equal(1, Pressure.FromDecibars(pascal.Decibars).Pascals);
            Assert.Equal(1, Pressure.FromDynesPerSquareCentimeter(pascal.DynesPerSquareCentimeter).Pascals);
            Assert.Equal(1, Pressure.FromFeetOfHead(pascal.FeetOfHead).Pascals);
            Assert.Equal(1, Pressure.FromGigapascals(pascal.Gigapascals).Pascals);
            Assert.Equal(1, Pressure.FromHectopascals(pascal.Hectopascals).Pascals);
            Assert.Equal(1, Pressure.FromInchesOfMercury(pascal.InchesOfMercury).Pascals);
            Assert.Equal(1, Pressure.FromInchesOfWaterColumn(pascal.InchesOfWaterColumn).Pascals);
            Assert.Equal(1, Pressure.FromKilobars(pascal.Kilobars).Pascals);
            Assert.Equal(1, Pressure.FromKilogramsForcePerSquareCentimeter(pascal.KilogramsForcePerSquareCentimeter).Pascals);
            Assert.Equal(1, Pressure.FromKilogramsForcePerSquareMeter(pascal.KilogramsForcePerSquareMeter).Pascals);
            Assert.Equal(1, Pressure.FromKilogramsForcePerSquareMillimeter(pascal.KilogramsForcePerSquareMillimeter).Pascals);
            Assert.Equal(1, Pressure.FromKilonewtonsPerSquareCentimeter(pascal.KilonewtonsPerSquareCentimeter).Pascals);
            Assert.Equal(1, Pressure.FromKilonewtonsPerSquareMeter(pascal.KilonewtonsPerSquareMeter).Pascals);
            Assert.Equal(1, Pressure.FromKilonewtonsPerSquareMillimeter(pascal.KilonewtonsPerSquareMillimeter).Pascals);
            Assert.Equal(1, Pressure.FromKilopascals(pascal.Kilopascals).Pascals);
            Assert.Equal(1, Pressure.FromKilopoundsForcePerSquareFoot(pascal.KilopoundsForcePerSquareFoot).Pascals);
            Assert.Equal(1, Pressure.FromKilopoundsForcePerSquareInch(pascal.KilopoundsForcePerSquareInch).Pascals);
            Assert.Equal(1, Pressure.FromKilopoundsForcePerSquareMil(pascal.KilopoundsForcePerSquareMil).Pascals);
            Assert.Equal(1, Pressure.FromMegabars(pascal.Megabars).Pascals);
            Assert.Equal(1, Pressure.FromMeganewtonsPerSquareMeter(pascal.MeganewtonsPerSquareMeter).Pascals);
            Assert.Equal(1, Pressure.FromMegapascals(pascal.Megapascals).Pascals);
            Assert.Equal(1, Pressure.FromMetersOfHead(pascal.MetersOfHead).Pascals);
            Assert.Equal(1, Pressure.FromMetersOfWaterColumn(pascal.MetersOfWaterColumn).Pascals);
            Assert.Equal(1, Pressure.FromMicrobars(pascal.Microbars).Pascals);
            Assert.Equal(1, Pressure.FromMicropascals(pascal.Micropascals).Pascals);
            Assert.Equal(1, Pressure.FromMillibars(pascal.Millibars).Pascals);
            Assert.Equal(1, Pressure.FromMillimetersOfMercury(pascal.MillimetersOfMercury).Pascals);
            Assert.Equal(1, Pressure.FromMillimetersOfWaterColumn(pascal.MillimetersOfWaterColumn).Pascals);
            Assert.Equal(1, Pressure.FromMillipascals(pascal.Millipascals).Pascals);
            Assert.Equal(1, Pressure.FromNewtonsPerSquareCentimeter(pascal.NewtonsPerSquareCentimeter).Pascals);
            Assert.Equal(1, Pressure.FromNewtonsPerSquareMeter(pascal.NewtonsPerSquareMeter).Pascals);
            Assert.Equal(1, Pressure.FromNewtonsPerSquareMillimeter(pascal.NewtonsPerSquareMillimeter).Pascals);
            Assert.Equal(1, Pressure.FromPascals(pascal.Pascals).Pascals);
            Assert.Equal(1, Pressure.FromPoundsForcePerSquareFoot(pascal.PoundsForcePerSquareFoot).Pascals);
            Assert.Equal(1, Pressure.FromPoundsForcePerSquareInch(pascal.PoundsForcePerSquareInch).Pascals);
            Assert.Equal(1, Pressure.FromPoundsForcePerSquareMil(pascal.PoundsForcePerSquareMil).Pascals);
            Assert.Equal(1, Pressure.FromPoundsPerInchSecondSquared(pascal.PoundsPerInchSecondSquared).Pascals);
            Assert.Equal(1, Pressure.FromTechnicalAtmospheres(pascal.TechnicalAtmospheres).Pascals);
            Assert.Equal(1, Pressure.FromTonnesForcePerSquareCentimeter(pascal.TonnesForcePerSquareCentimeter).Pascals);
            Assert.Equal(1, Pressure.FromTonnesForcePerSquareMeter(pascal.TonnesForcePerSquareMeter).Pascals);
            Assert.Equal(1, Pressure.FromTonnesForcePerSquareMillimeter(pascal.TonnesForcePerSquareMillimeter).Pascals);
            Assert.Equal(1, Pressure.FromTorrs(pascal.Torrs).Pascals);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Pressure v = Pressure.FromPascals(1);
            Assert.Equal(-1, -v.Pascals);
            Assert.Equal(2, (Pressure.FromPascals(3) - v).Pascals);
            Assert.Equal(2, (v + v).Pascals);
            Assert.Equal(10, (v * 10).Pascals);
            Assert.Equal(10, (10 * v).Pascals);
            Assert.Equal(2, (Pressure.FromPascals(10) / 5).Pascals);
            Assert.Equal(2, Pressure.FromPascals(10) / Pressure.FromPascals(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            Pressure onePascal = Pressure.FromPascals(1);
            Pressure twoPascals = Pressure.FromPascals(2);

            Assert.True(onePascal < twoPascals);
            Assert.True(onePascal <= twoPascals);
            Assert.True(twoPascals > onePascal);
            Assert.True(twoPascals >= onePascal);

            Assert.False(onePascal > twoPascals);
            Assert.False(onePascal >= twoPascals);
            Assert.False(twoPascals < onePascal);
            Assert.False(twoPascals <= onePascal);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Pressure pascal = Pressure.FromPascals(1);
            Assert.Equal(0, pascal.CompareTo(pascal));
            Assert.True(pascal.CompareTo(Pressure.Zero) > 0);
            Assert.True(Pressure.Zero.CompareTo(pascal) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Pressure pascal = Pressure.FromPascals(1);
            Assert.Throws<ArgumentException>(() => pascal.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Pressure pascal = Pressure.FromPascals(1);
            Assert.Throws<ArgumentNullException>(() => pascal.CompareTo(null));
        }

        [Theory]
        [InlineData(1, PressureUnit.Pascal, 1, PressureUnit.Pascal, true)]  // Same value and unit.
        [InlineData(1, PressureUnit.Pascal, 2, PressureUnit.Pascal, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, PressureUnit unitA, double valueB, PressureUnit unitB, bool expectEqual)
        {
            var a = new Pressure(valueA, unitA);
            var b = new Pressure(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Pressure.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_WithTolerance_IsImplemented()
        {
            var v = Pressure.FromPascals(1);
            Assert.True(v.Equals(Pressure.FromPascals(1), Pressure.FromPascals(0)));
            Assert.True(v.Equals(Pressure.FromPascals(1), Pressure.FromPascals(0.001m)));
            Assert.True(v.Equals(Pressure.FromPascals(0.9999), Pressure.FromPascals(0.001m)));
            Assert.False(v.Equals(Pressure.FromPascals(0.99), Pressure.FromPascals(0.001m)));
            Assert.False(v.Equals(Pressure.Zero, Pressure.FromPascals(0.001m)));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Pressure.FromPascals(1);
            var negativeTolerance = Pressure.FromPascals(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Pressure.FromPascals(1), negativeTolerance));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Pressure pascal = Pressure.FromPascals(1);
            Assert.False(pascal.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Pressure pascal = Pressure.FromPascals(1);
            Assert.False(pascal.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(PressureUnit)).Cast<PressureUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Pressure.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentCulture;
            Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 atm", new Pressure(1, PressureUnit.Atmosphere).ToString());
                Assert.Equal("1 bar", new Pressure(1, PressureUnit.Bar).ToString());
                Assert.Equal("1 cbar", new Pressure(1, PressureUnit.Centibar).ToString());
                Assert.Equal("1 cmH₂O", new Pressure(1, PressureUnit.CentimeterOfWaterColumn).ToString());
                Assert.Equal("1 daPa", new Pressure(1, PressureUnit.Decapascal).ToString());
                Assert.Equal("1 dbar", new Pressure(1, PressureUnit.Decibar).ToString());
                Assert.Equal("1 dyn/cm²", new Pressure(1, PressureUnit.DynePerSquareCentimeter).ToString());
                Assert.Equal("1 ft of head", new Pressure(1, PressureUnit.FootOfHead).ToString());
                Assert.Equal("1 GPa", new Pressure(1, PressureUnit.Gigapascal).ToString());
                Assert.Equal("1 hPa", new Pressure(1, PressureUnit.Hectopascal).ToString());
                Assert.Equal("1 inHg", new Pressure(1, PressureUnit.InchOfMercury).ToString());
                Assert.Equal("1 inH2O", new Pressure(1, PressureUnit.InchOfWaterColumn).ToString());
                Assert.Equal("1 kbar", new Pressure(1, PressureUnit.Kilobar).ToString());
                Assert.Equal("1 kgf/cm²", new Pressure(1, PressureUnit.KilogramForcePerSquareCentimeter).ToString());
                Assert.Equal("1 kgf/m²", new Pressure(1, PressureUnit.KilogramForcePerSquareMeter).ToString());
                Assert.Equal("1 kgf/mm²", new Pressure(1, PressureUnit.KilogramForcePerSquareMillimeter).ToString());
                Assert.Equal("1 kN/cm²", new Pressure(1, PressureUnit.KilonewtonPerSquareCentimeter).ToString());
                Assert.Equal("1 kN/m²", new Pressure(1, PressureUnit.KilonewtonPerSquareMeter).ToString());
                Assert.Equal("1 kN/mm²", new Pressure(1, PressureUnit.KilonewtonPerSquareMillimeter).ToString());
                Assert.Equal("1 kPa", new Pressure(1, PressureUnit.Kilopascal).ToString());
                Assert.Equal("1 kipf/ft²", new Pressure(1, PressureUnit.KilopoundForcePerSquareFoot).ToString());
                Assert.Equal("1 ksi", new Pressure(1, PressureUnit.KilopoundForcePerSquareInch).ToString());
                Assert.Equal("1 kipf/mil²", new Pressure(1, PressureUnit.KilopoundForcePerSquareMil).ToString());
                Assert.Equal("1 Mbar", new Pressure(1, PressureUnit.Megabar).ToString());
                Assert.Equal("1 MN/m²", new Pressure(1, PressureUnit.MeganewtonPerSquareMeter).ToString());
                Assert.Equal("1 MPa", new Pressure(1, PressureUnit.Megapascal).ToString());
                Assert.Equal("1 m of head", new Pressure(1, PressureUnit.MeterOfHead).ToString());
                Assert.Equal("1 mH₂O", new Pressure(1, PressureUnit.MeterOfWaterColumn).ToString());
                Assert.Equal("1 µbar", new Pressure(1, PressureUnit.Microbar).ToString());
                Assert.Equal("1 µPa", new Pressure(1, PressureUnit.Micropascal).ToString());
                Assert.Equal("1 mbar", new Pressure(1, PressureUnit.Millibar).ToString());
                Assert.Equal("1 mmHg", new Pressure(1, PressureUnit.MillimeterOfMercury).ToString());
                Assert.Equal("1 mmH₂O", new Pressure(1, PressureUnit.MillimeterOfWaterColumn).ToString());
                Assert.Equal("1 mPa", new Pressure(1, PressureUnit.Millipascal).ToString());
                Assert.Equal("1 N/cm²", new Pressure(1, PressureUnit.NewtonPerSquareCentimeter).ToString());
                Assert.Equal("1 N/m²", new Pressure(1, PressureUnit.NewtonPerSquareMeter).ToString());
                Assert.Equal("1 N/mm²", new Pressure(1, PressureUnit.NewtonPerSquareMillimeter).ToString());
                Assert.Equal("1 Pa", new Pressure(1, PressureUnit.Pascal).ToString());
                Assert.Equal("1 lb/ft²", new Pressure(1, PressureUnit.PoundForcePerSquareFoot).ToString());
                Assert.Equal("1 psi", new Pressure(1, PressureUnit.PoundForcePerSquareInch).ToString());
                Assert.Equal("1 lb/mil²", new Pressure(1, PressureUnit.PoundForcePerSquareMil).ToString());
                Assert.Equal("1 lbm/(in·s²)", new Pressure(1, PressureUnit.PoundPerInchSecondSquared).ToString());
                Assert.Equal("1 at", new Pressure(1, PressureUnit.TechnicalAtmosphere).ToString());
                Assert.Equal("1 tf/cm²", new Pressure(1, PressureUnit.TonneForcePerSquareCentimeter).ToString());
                Assert.Equal("1 tf/m²", new Pressure(1, PressureUnit.TonneForcePerSquareMeter).ToString());
                Assert.Equal("1 tf/mm²", new Pressure(1, PressureUnit.TonneForcePerSquareMillimeter).ToString());
                Assert.Equal("1 torr", new Pressure(1, PressureUnit.Torr).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 atm", new Pressure(1, PressureUnit.Atmosphere).ToString(swedishCulture));
            Assert.Equal("1 bar", new Pressure(1, PressureUnit.Bar).ToString(swedishCulture));
            Assert.Equal("1 cbar", new Pressure(1, PressureUnit.Centibar).ToString(swedishCulture));
            Assert.Equal("1 cmH₂O", new Pressure(1, PressureUnit.CentimeterOfWaterColumn).ToString(swedishCulture));
            Assert.Equal("1 daPa", new Pressure(1, PressureUnit.Decapascal).ToString(swedishCulture));
            Assert.Equal("1 dbar", new Pressure(1, PressureUnit.Decibar).ToString(swedishCulture));
            Assert.Equal("1 dyn/cm²", new Pressure(1, PressureUnit.DynePerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 ft of head", new Pressure(1, PressureUnit.FootOfHead).ToString(swedishCulture));
            Assert.Equal("1 GPa", new Pressure(1, PressureUnit.Gigapascal).ToString(swedishCulture));
            Assert.Equal("1 hPa", new Pressure(1, PressureUnit.Hectopascal).ToString(swedishCulture));
            Assert.Equal("1 inHg", new Pressure(1, PressureUnit.InchOfMercury).ToString(swedishCulture));
            Assert.Equal("1 inH2O", new Pressure(1, PressureUnit.InchOfWaterColumn).ToString(swedishCulture));
            Assert.Equal("1 kbar", new Pressure(1, PressureUnit.Kilobar).ToString(swedishCulture));
            Assert.Equal("1 kgf/cm²", new Pressure(1, PressureUnit.KilogramForcePerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kgf/m²", new Pressure(1, PressureUnit.KilogramForcePerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 kgf/mm²", new Pressure(1, PressureUnit.KilogramForcePerSquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kN/cm²", new Pressure(1, PressureUnit.KilonewtonPerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kN/m²", new Pressure(1, PressureUnit.KilonewtonPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 kN/mm²", new Pressure(1, PressureUnit.KilonewtonPerSquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kPa", new Pressure(1, PressureUnit.Kilopascal).ToString(swedishCulture));
            Assert.Equal("1 kipf/ft²", new Pressure(1, PressureUnit.KilopoundForcePerSquareFoot).ToString(swedishCulture));
            Assert.Equal("1 ksi", new Pressure(1, PressureUnit.KilopoundForcePerSquareInch).ToString(swedishCulture));
            Assert.Equal("1 kipf/mil²", new Pressure(1, PressureUnit.KilopoundForcePerSquareMil).ToString(swedishCulture));
            Assert.Equal("1 Mbar", new Pressure(1, PressureUnit.Megabar).ToString(swedishCulture));
            Assert.Equal("1 MN/m²", new Pressure(1, PressureUnit.MeganewtonPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 MPa", new Pressure(1, PressureUnit.Megapascal).ToString(swedishCulture));
            Assert.Equal("1 m of head", new Pressure(1, PressureUnit.MeterOfHead).ToString(swedishCulture));
            Assert.Equal("1 mH₂O", new Pressure(1, PressureUnit.MeterOfWaterColumn).ToString(swedishCulture));
            Assert.Equal("1 µbar", new Pressure(1, PressureUnit.Microbar).ToString(swedishCulture));
            Assert.Equal("1 µPa", new Pressure(1, PressureUnit.Micropascal).ToString(swedishCulture));
            Assert.Equal("1 mbar", new Pressure(1, PressureUnit.Millibar).ToString(swedishCulture));
            Assert.Equal("1 mmHg", new Pressure(1, PressureUnit.MillimeterOfMercury).ToString(swedishCulture));
            Assert.Equal("1 mmH₂O", new Pressure(1, PressureUnit.MillimeterOfWaterColumn).ToString(swedishCulture));
            Assert.Equal("1 mPa", new Pressure(1, PressureUnit.Millipascal).ToString(swedishCulture));
            Assert.Equal("1 N/cm²", new Pressure(1, PressureUnit.NewtonPerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 N/m²", new Pressure(1, PressureUnit.NewtonPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 N/mm²", new Pressure(1, PressureUnit.NewtonPerSquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 Pa", new Pressure(1, PressureUnit.Pascal).ToString(swedishCulture));
            Assert.Equal("1 lb/ft²", new Pressure(1, PressureUnit.PoundForcePerSquareFoot).ToString(swedishCulture));
            Assert.Equal("1 psi", new Pressure(1, PressureUnit.PoundForcePerSquareInch).ToString(swedishCulture));
            Assert.Equal("1 lb/mil²", new Pressure(1, PressureUnit.PoundForcePerSquareMil).ToString(swedishCulture));
            Assert.Equal("1 lbm/(in·s²)", new Pressure(1, PressureUnit.PoundPerInchSecondSquared).ToString(swedishCulture));
            Assert.Equal("1 at", new Pressure(1, PressureUnit.TechnicalAtmosphere).ToString(swedishCulture));
            Assert.Equal("1 tf/cm²", new Pressure(1, PressureUnit.TonneForcePerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 tf/m²", new Pressure(1, PressureUnit.TonneForcePerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 tf/mm²", new Pressure(1, PressureUnit.TonneForcePerSquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 torr", new Pressure(1, PressureUnit.Torr).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentCulture;
            try
            {
                CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 Pa", new Pressure(0.123456, PressureUnit.Pascal).ToString("s1"));
                Assert.Equal("0.12 Pa", new Pressure(0.123456, PressureUnit.Pascal).ToString("s2"));
                Assert.Equal("0.123 Pa", new Pressure(0.123456, PressureUnit.Pascal).ToString("s3"));
                Assert.Equal("0.1235 Pa", new Pressure(0.123456, PressureUnit.Pascal).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentCulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 Pa", new Pressure(0.123456, PressureUnit.Pascal).ToString("s1", culture));
            Assert.Equal("0.12 Pa", new Pressure(0.123456, PressureUnit.Pascal).ToString("s2", culture));
            Assert.Equal("0.123 Pa", new Pressure(0.123456, PressureUnit.Pascal).ToString("s3", culture));
            Assert.Equal("0.1235 Pa", new Pressure(0.123456, PressureUnit.Pascal).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Pressure.FromPascals(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("g", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Pressure.FromPascals(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = Pressure.FromPascals(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = Pressure.FromPascals(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = Pressure.FromPascals(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = Pressure.FromPascals(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = Pressure.FromPascals(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = Pressure.FromPascals(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = Pressure.FromPascals(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = Pressure.FromPascals(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = Pressure.FromPascals(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = Pressure.FromPascals(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = Pressure.FromPascals(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = Pressure.FromPascals(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = Pressure.FromPascals(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = Pressure.FromPascals(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = Pressure.FromPascals(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = Pressure.FromPascals(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(Pressure)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = Pressure.FromPascals(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(PressureUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = Pressure.FromPascals(1.0);
            Assert.Equal(Pressure.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = Pressure.FromPascals(1.0);
            Assert.Equal(Pressure.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = Pressure.FromPascals(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Pressure.FromPascals(1.0);
            #if NET7_0_OR_GREATER
            var expected = HashCode.Combine(Pressure.Info.Name, quantity.Pascals);
            #else
            var expected = new {Pressure.Info.Name, valueInBaseUnit = quantity.Pascals}.GetHashCode();
            #endif
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Pressure.FromPascals(value);
            Assert.Equal(Pressure.FromPascals(-value), -quantity);
        }
    }
}
