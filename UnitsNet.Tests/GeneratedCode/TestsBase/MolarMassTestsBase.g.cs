//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of MolarMass.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class MolarMassTestsBase : QuantityTestsBase
    {
        protected abstract double CentigramsPerMoleInOneKilogramPerMole { get; }
        protected abstract double DecagramsPerMoleInOneKilogramPerMole { get; }
        protected abstract double DecigramsPerMoleInOneKilogramPerMole { get; }
        protected abstract double GramsPerMoleInOneKilogramPerMole { get; }
        protected abstract double HectogramsPerMoleInOneKilogramPerMole { get; }
        protected abstract double KilogramsPerKilomoleInOneKilogramPerMole { get; }
        protected abstract double KilogramsPerMoleInOneKilogramPerMole { get; }
        protected abstract double KilopoundsPerMoleInOneKilogramPerMole { get; }
        protected abstract double MegapoundsPerMoleInOneKilogramPerMole { get; }
        protected abstract double MicrogramsPerMoleInOneKilogramPerMole { get; }
        protected abstract double MilligramsPerMoleInOneKilogramPerMole { get; }
        protected abstract double NanogramsPerMoleInOneKilogramPerMole { get; }
        protected abstract double PoundsPerMoleInOneKilogramPerMole { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentigramsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double DecagramsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double DecigramsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double GramsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double HectogramsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerKilomoleTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double MegapoundsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double NanogramsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerMoleTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(MolarMassUnit unit)
        {
            return unit switch
            {
                MolarMassUnit.CentigramPerMole => (CentigramsPerMoleInOneKilogramPerMole, CentigramsPerMoleTolerance),
                MolarMassUnit.DecagramPerMole => (DecagramsPerMoleInOneKilogramPerMole, DecagramsPerMoleTolerance),
                MolarMassUnit.DecigramPerMole => (DecigramsPerMoleInOneKilogramPerMole, DecigramsPerMoleTolerance),
                MolarMassUnit.GramPerMole => (GramsPerMoleInOneKilogramPerMole, GramsPerMoleTolerance),
                MolarMassUnit.HectogramPerMole => (HectogramsPerMoleInOneKilogramPerMole, HectogramsPerMoleTolerance),
                MolarMassUnit.KilogramPerKilomole => (KilogramsPerKilomoleInOneKilogramPerMole, KilogramsPerKilomoleTolerance),
                MolarMassUnit.KilogramPerMole => (KilogramsPerMoleInOneKilogramPerMole, KilogramsPerMoleTolerance),
                MolarMassUnit.KilopoundPerMole => (KilopoundsPerMoleInOneKilogramPerMole, KilopoundsPerMoleTolerance),
                MolarMassUnit.MegapoundPerMole => (MegapoundsPerMoleInOneKilogramPerMole, MegapoundsPerMoleTolerance),
                MolarMassUnit.MicrogramPerMole => (MicrogramsPerMoleInOneKilogramPerMole, MicrogramsPerMoleTolerance),
                MolarMassUnit.MilligramPerMole => (MilligramsPerMoleInOneKilogramPerMole, MilligramsPerMoleTolerance),
                MolarMassUnit.NanogramPerMole => (NanogramsPerMoleInOneKilogramPerMole, NanogramsPerMoleTolerance),
                MolarMassUnit.PoundPerMole => (PoundsPerMoleInOneKilogramPerMole, PoundsPerMoleTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { MolarMassUnit.CentigramPerMole },
            new object[] { MolarMassUnit.DecagramPerMole },
            new object[] { MolarMassUnit.DecigramPerMole },
            new object[] { MolarMassUnit.GramPerMole },
            new object[] { MolarMassUnit.HectogramPerMole },
            new object[] { MolarMassUnit.KilogramPerKilomole },
            new object[] { MolarMassUnit.KilogramPerMole },
            new object[] { MolarMassUnit.KilopoundPerMole },
            new object[] { MolarMassUnit.MegapoundPerMole },
            new object[] { MolarMassUnit.MicrogramPerMole },
            new object[] { MolarMassUnit.MilligramPerMole },
            new object[] { MolarMassUnit.NanogramPerMole },
            new object[] { MolarMassUnit.PoundPerMole },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new MolarMass();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(MolarMassUnit.KilogramPerMole, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new MolarMass(double.PositiveInfinity, MolarMassUnit.KilogramPerMole));
            var exception2 = Record.Exception(() => new MolarMass(double.NegativeInfinity, MolarMassUnit.KilogramPerMole));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new MolarMass(double.NaN, MolarMassUnit.KilogramPerMole));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new MolarMass(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            if (SupportsSIUnitSystem)
            {
                var quantity = new MolarMass(value: 1, unitSystem: UnitSystem.SI);
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(() => new MolarMass(value: 1, unitSystem: UnitSystem.SI));
            }
        }

        [Fact]
        public void MolarMass_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new MolarMass(1, MolarMassUnit.KilogramPerMole);

            QuantityInfo<MolarMassUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(MolarMass.Zero, quantityInfo.Zero);
            Assert.Equal("MolarMass", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<MolarMassUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void KilogramPerMoleToMolarMassUnits()
        {
            MolarMass kilogrampermole = MolarMass.FromKilogramsPerMole(1);
            AssertEx.EqualTolerance(CentigramsPerMoleInOneKilogramPerMole, kilogrampermole.CentigramsPerMole, CentigramsPerMoleTolerance);
            AssertEx.EqualTolerance(DecagramsPerMoleInOneKilogramPerMole, kilogrampermole.DecagramsPerMole, DecagramsPerMoleTolerance);
            AssertEx.EqualTolerance(DecigramsPerMoleInOneKilogramPerMole, kilogrampermole.DecigramsPerMole, DecigramsPerMoleTolerance);
            AssertEx.EqualTolerance(GramsPerMoleInOneKilogramPerMole, kilogrampermole.GramsPerMole, GramsPerMoleTolerance);
            AssertEx.EqualTolerance(HectogramsPerMoleInOneKilogramPerMole, kilogrampermole.HectogramsPerMole, HectogramsPerMoleTolerance);
            AssertEx.EqualTolerance(KilogramsPerKilomoleInOneKilogramPerMole, kilogrampermole.KilogramsPerKilomole, KilogramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(KilogramsPerMoleInOneKilogramPerMole, kilogrampermole.KilogramsPerMole, KilogramsPerMoleTolerance);
            AssertEx.EqualTolerance(KilopoundsPerMoleInOneKilogramPerMole, kilogrampermole.KilopoundsPerMole, KilopoundsPerMoleTolerance);
            AssertEx.EqualTolerance(MegapoundsPerMoleInOneKilogramPerMole, kilogrampermole.MegapoundsPerMole, MegapoundsPerMoleTolerance);
            AssertEx.EqualTolerance(MicrogramsPerMoleInOneKilogramPerMole, kilogrampermole.MicrogramsPerMole, MicrogramsPerMoleTolerance);
            AssertEx.EqualTolerance(MilligramsPerMoleInOneKilogramPerMole, kilogrampermole.MilligramsPerMole, MilligramsPerMoleTolerance);
            AssertEx.EqualTolerance(NanogramsPerMoleInOneKilogramPerMole, kilogrampermole.NanogramsPerMole, NanogramsPerMoleTolerance);
            AssertEx.EqualTolerance(PoundsPerMoleInOneKilogramPerMole, kilogrampermole.PoundsPerMole, PoundsPerMoleTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = MolarMass.From(1, MolarMassUnit.CentigramPerMole);
            Assert.Equal(1, quantity00.CentigramsPerMole);
            Assert.Equal(MolarMassUnit.CentigramPerMole, quantity00.Unit);

            var quantity01 = MolarMass.From(1, MolarMassUnit.DecagramPerMole);
            Assert.Equal(1, quantity01.DecagramsPerMole);
            Assert.Equal(MolarMassUnit.DecagramPerMole, quantity01.Unit);

            var quantity02 = MolarMass.From(1, MolarMassUnit.DecigramPerMole);
            Assert.Equal(1, quantity02.DecigramsPerMole);
            Assert.Equal(MolarMassUnit.DecigramPerMole, quantity02.Unit);

            var quantity03 = MolarMass.From(1, MolarMassUnit.GramPerMole);
            Assert.Equal(1, quantity03.GramsPerMole);
            Assert.Equal(MolarMassUnit.GramPerMole, quantity03.Unit);

            var quantity04 = MolarMass.From(1, MolarMassUnit.HectogramPerMole);
            Assert.Equal(1, quantity04.HectogramsPerMole);
            Assert.Equal(MolarMassUnit.HectogramPerMole, quantity04.Unit);

            var quantity05 = MolarMass.From(1, MolarMassUnit.KilogramPerKilomole);
            Assert.Equal(1, quantity05.KilogramsPerKilomole);
            Assert.Equal(MolarMassUnit.KilogramPerKilomole, quantity05.Unit);

            var quantity06 = MolarMass.From(1, MolarMassUnit.KilogramPerMole);
            Assert.Equal(1, quantity06.KilogramsPerMole);
            Assert.Equal(MolarMassUnit.KilogramPerMole, quantity06.Unit);

            var quantity07 = MolarMass.From(1, MolarMassUnit.KilopoundPerMole);
            Assert.Equal(1, quantity07.KilopoundsPerMole);
            Assert.Equal(MolarMassUnit.KilopoundPerMole, quantity07.Unit);

            var quantity08 = MolarMass.From(1, MolarMassUnit.MegapoundPerMole);
            Assert.Equal(1, quantity08.MegapoundsPerMole);
            Assert.Equal(MolarMassUnit.MegapoundPerMole, quantity08.Unit);

            var quantity09 = MolarMass.From(1, MolarMassUnit.MicrogramPerMole);
            Assert.Equal(1, quantity09.MicrogramsPerMole);
            Assert.Equal(MolarMassUnit.MicrogramPerMole, quantity09.Unit);

            var quantity10 = MolarMass.From(1, MolarMassUnit.MilligramPerMole);
            Assert.Equal(1, quantity10.MilligramsPerMole);
            Assert.Equal(MolarMassUnit.MilligramPerMole, quantity10.Unit);

            var quantity11 = MolarMass.From(1, MolarMassUnit.NanogramPerMole);
            Assert.Equal(1, quantity11.NanogramsPerMole);
            Assert.Equal(MolarMassUnit.NanogramPerMole, quantity11.Unit);

            var quantity12 = MolarMass.From(1, MolarMassUnit.PoundPerMole);
            Assert.Equal(1, quantity12.PoundsPerMole);
            Assert.Equal(MolarMassUnit.PoundPerMole, quantity12.Unit);

        }

        [Fact]
        public void FromKilogramsPerMole_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => MolarMass.FromKilogramsPerMole(double.PositiveInfinity));
            var exception2 = Record.Exception(() => MolarMass.FromKilogramsPerMole(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromKilogramsPerMole_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => MolarMass.FromKilogramsPerMole(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var kilogrampermole = MolarMass.FromKilogramsPerMole(1);
            AssertEx.EqualTolerance(CentigramsPerMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.CentigramPerMole), CentigramsPerMoleTolerance);
            AssertEx.EqualTolerance(DecagramsPerMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.DecagramPerMole), DecagramsPerMoleTolerance);
            AssertEx.EqualTolerance(DecigramsPerMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.DecigramPerMole), DecigramsPerMoleTolerance);
            AssertEx.EqualTolerance(GramsPerMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.GramPerMole), GramsPerMoleTolerance);
            AssertEx.EqualTolerance(HectogramsPerMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.HectogramPerMole), HectogramsPerMoleTolerance);
            AssertEx.EqualTolerance(KilogramsPerKilomoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.KilogramPerKilomole), KilogramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(KilogramsPerMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.KilogramPerMole), KilogramsPerMoleTolerance);
            AssertEx.EqualTolerance(KilopoundsPerMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.KilopoundPerMole), KilopoundsPerMoleTolerance);
            AssertEx.EqualTolerance(MegapoundsPerMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.MegapoundPerMole), MegapoundsPerMoleTolerance);
            AssertEx.EqualTolerance(MicrogramsPerMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.MicrogramPerMole), MicrogramsPerMoleTolerance);
            AssertEx.EqualTolerance(MilligramsPerMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.MilligramPerMole), MilligramsPerMoleTolerance);
            AssertEx.EqualTolerance(NanogramsPerMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.NanogramPerMole), NanogramsPerMoleTolerance);
            AssertEx.EqualTolerance(PoundsPerMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.PoundPerMole), PoundsPerMoleTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new MolarMass(value: 1, unit: MolarMass.BaseUnit);
            if (SupportsSIUnitSystem)
            {
                Assert.Equal(1, quantity.As(UnitSystem.SI));
            }
            else
            {
                Assert.Throws<ArgumentException>(() => quantity.As(UnitSystem.SI));
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = MolarMass.Parse("1 cg/mol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.CentigramsPerMole);
                Assert.Equal(MolarMassUnit.CentigramPerMole, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MolarMass.Parse("1 сг/моль", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.CentigramsPerMole);
                Assert.Equal(MolarMassUnit.CentigramPerMole, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MolarMass.Parse("1 dag/mol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.DecagramsPerMole);
                Assert.Equal(MolarMassUnit.DecagramPerMole, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MolarMass.Parse("1 даг/моль", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.DecagramsPerMole);
                Assert.Equal(MolarMassUnit.DecagramPerMole, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MolarMass.Parse("1 dg/mol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.DecigramsPerMole);
                Assert.Equal(MolarMassUnit.DecigramPerMole, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MolarMass.Parse("1 дг/моль", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.DecigramsPerMole);
                Assert.Equal(MolarMassUnit.DecigramPerMole, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MolarMass.Parse("1 g/mol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.GramsPerMole);
                Assert.Equal(MolarMassUnit.GramPerMole, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MolarMass.Parse("1 г/моль", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.GramsPerMole);
                Assert.Equal(MolarMassUnit.GramPerMole, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MolarMass.Parse("1 hg/mol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.HectogramsPerMole);
                Assert.Equal(MolarMassUnit.HectogramPerMole, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MolarMass.Parse("1 гг/моль", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.HectogramsPerMole);
                Assert.Equal(MolarMassUnit.HectogramPerMole, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MolarMass.Parse("1 kg/kmol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilogramsPerKilomole);
                Assert.Equal(MolarMassUnit.KilogramPerKilomole, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MolarMass.Parse("1 kg/mol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilogramsPerMole);
                Assert.Equal(MolarMassUnit.KilogramPerMole, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MolarMass.Parse("1 кг/моль", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.KilogramsPerMole);
                Assert.Equal(MolarMassUnit.KilogramPerMole, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MolarMass.Parse("1 klb/mol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilopoundsPerMole);
                Assert.Equal(MolarMassUnit.KilopoundPerMole, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MolarMass.Parse("1 кфунт/моль", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.KilopoundsPerMole);
                Assert.Equal(MolarMassUnit.KilopoundPerMole, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MolarMass.Parse("1 Mlb/mol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MegapoundsPerMole);
                Assert.Equal(MolarMassUnit.MegapoundPerMole, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MolarMass.Parse("1 Мфунт/моль", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.MegapoundsPerMole);
                Assert.Equal(MolarMassUnit.MegapoundPerMole, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MolarMass.Parse("1 µg/mol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MicrogramsPerMole);
                Assert.Equal(MolarMassUnit.MicrogramPerMole, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MolarMass.Parse("1 мкг/моль", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.MicrogramsPerMole);
                Assert.Equal(MolarMassUnit.MicrogramPerMole, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MolarMass.Parse("1 mg/mol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MilligramsPerMole);
                Assert.Equal(MolarMassUnit.MilligramPerMole, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MolarMass.Parse("1 мг/моль", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.MilligramsPerMole);
                Assert.Equal(MolarMassUnit.MilligramPerMole, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MolarMass.Parse("1 ng/mol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.NanogramsPerMole);
                Assert.Equal(MolarMassUnit.NanogramPerMole, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MolarMass.Parse("1 нг/моль", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.NanogramsPerMole);
                Assert.Equal(MolarMassUnit.NanogramPerMole, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MolarMass.Parse("1 lb/mol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PoundsPerMole);
                Assert.Equal(MolarMassUnit.PoundPerMole, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MolarMass.Parse("1 фунт/моль", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.PoundsPerMole);
                Assert.Equal(MolarMassUnit.PoundPerMole, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(MolarMass.TryParse("1 cg/mol", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.CentigramsPerMole);
                Assert.Equal(MolarMassUnit.CentigramPerMole, parsed.Unit);
            }

            {
                Assert.True(MolarMass.TryParse("1 сг/моль", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.CentigramsPerMole);
                Assert.Equal(MolarMassUnit.CentigramPerMole, parsed.Unit);
            }

            {
                Assert.True(MolarMass.TryParse("1 dag/mol", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.DecagramsPerMole);
                Assert.Equal(MolarMassUnit.DecagramPerMole, parsed.Unit);
            }

            {
                Assert.True(MolarMass.TryParse("1 даг/моль", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.DecagramsPerMole);
                Assert.Equal(MolarMassUnit.DecagramPerMole, parsed.Unit);
            }

            {
                Assert.True(MolarMass.TryParse("1 dg/mol", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.DecigramsPerMole);
                Assert.Equal(MolarMassUnit.DecigramPerMole, parsed.Unit);
            }

            {
                Assert.True(MolarMass.TryParse("1 дг/моль", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.DecigramsPerMole);
                Assert.Equal(MolarMassUnit.DecigramPerMole, parsed.Unit);
            }

            {
                Assert.True(MolarMass.TryParse("1 g/mol", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.GramsPerMole);
                Assert.Equal(MolarMassUnit.GramPerMole, parsed.Unit);
            }

            {
                Assert.True(MolarMass.TryParse("1 г/моль", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.GramsPerMole);
                Assert.Equal(MolarMassUnit.GramPerMole, parsed.Unit);
            }

            {
                Assert.True(MolarMass.TryParse("1 hg/mol", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.HectogramsPerMole);
                Assert.Equal(MolarMassUnit.HectogramPerMole, parsed.Unit);
            }

            {
                Assert.True(MolarMass.TryParse("1 гг/моль", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.HectogramsPerMole);
                Assert.Equal(MolarMassUnit.HectogramPerMole, parsed.Unit);
            }

            {
                Assert.True(MolarMass.TryParse("1 kg/kmol", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilogramsPerKilomole);
                Assert.Equal(MolarMassUnit.KilogramPerKilomole, parsed.Unit);
            }

            {
                Assert.True(MolarMass.TryParse("1 kg/mol", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilogramsPerMole);
                Assert.Equal(MolarMassUnit.KilogramPerMole, parsed.Unit);
            }

            {
                Assert.True(MolarMass.TryParse("1 кг/моль", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.KilogramsPerMole);
                Assert.Equal(MolarMassUnit.KilogramPerMole, parsed.Unit);
            }

            {
                Assert.True(MolarMass.TryParse("1 klb/mol", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilopoundsPerMole);
                Assert.Equal(MolarMassUnit.KilopoundPerMole, parsed.Unit);
            }

            {
                Assert.True(MolarMass.TryParse("1 кфунт/моль", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.KilopoundsPerMole);
                Assert.Equal(MolarMassUnit.KilopoundPerMole, parsed.Unit);
            }

            {
                Assert.True(MolarMass.TryParse("1 Mlb/mol", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MegapoundsPerMole);
                Assert.Equal(MolarMassUnit.MegapoundPerMole, parsed.Unit);
            }

            {
                Assert.True(MolarMass.TryParse("1 Мфунт/моль", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.MegapoundsPerMole);
                Assert.Equal(MolarMassUnit.MegapoundPerMole, parsed.Unit);
            }

            {
                Assert.True(MolarMass.TryParse("1 µg/mol", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MicrogramsPerMole);
                Assert.Equal(MolarMassUnit.MicrogramPerMole, parsed.Unit);
            }

            {
                Assert.True(MolarMass.TryParse("1 мкг/моль", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.MicrogramsPerMole);
                Assert.Equal(MolarMassUnit.MicrogramPerMole, parsed.Unit);
            }

            {
                Assert.True(MolarMass.TryParse("1 mg/mol", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MilligramsPerMole);
                Assert.Equal(MolarMassUnit.MilligramPerMole, parsed.Unit);
            }

            {
                Assert.True(MolarMass.TryParse("1 мг/моль", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.MilligramsPerMole);
                Assert.Equal(MolarMassUnit.MilligramPerMole, parsed.Unit);
            }

            {
                Assert.True(MolarMass.TryParse("1 ng/mol", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.NanogramsPerMole);
                Assert.Equal(MolarMassUnit.NanogramPerMole, parsed.Unit);
            }

            {
                Assert.True(MolarMass.TryParse("1 нг/моль", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.NanogramsPerMole);
                Assert.Equal(MolarMassUnit.NanogramPerMole, parsed.Unit);
            }

            {
                Assert.True(MolarMass.TryParse("1 lb/mol", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PoundsPerMole);
                Assert.Equal(MolarMassUnit.PoundPerMole, parsed.Unit);
            }

            {
                Assert.True(MolarMass.TryParse("1 фунт/моль", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.PoundsPerMole);
                Assert.Equal(MolarMassUnit.PoundPerMole, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = MolarMass.ParseUnit("cg/mol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarMassUnit.CentigramPerMole, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MolarMass.ParseUnit("сг/моль", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MolarMassUnit.CentigramPerMole, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MolarMass.ParseUnit("dag/mol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarMassUnit.DecagramPerMole, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MolarMass.ParseUnit("даг/моль", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MolarMassUnit.DecagramPerMole, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MolarMass.ParseUnit("dg/mol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarMassUnit.DecigramPerMole, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MolarMass.ParseUnit("дг/моль", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MolarMassUnit.DecigramPerMole, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MolarMass.ParseUnit("g/mol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarMassUnit.GramPerMole, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MolarMass.ParseUnit("г/моль", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MolarMassUnit.GramPerMole, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MolarMass.ParseUnit("hg/mol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarMassUnit.HectogramPerMole, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MolarMass.ParseUnit("гг/моль", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MolarMassUnit.HectogramPerMole, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MolarMass.ParseUnit("kg/kmol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarMassUnit.KilogramPerKilomole, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MolarMass.ParseUnit("kg/mol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarMassUnit.KilogramPerMole, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MolarMass.ParseUnit("кг/моль", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MolarMassUnit.KilogramPerMole, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MolarMass.ParseUnit("klb/mol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarMassUnit.KilopoundPerMole, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MolarMass.ParseUnit("кфунт/моль", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MolarMassUnit.KilopoundPerMole, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MolarMass.ParseUnit("Mlb/mol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarMassUnit.MegapoundPerMole, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MolarMass.ParseUnit("Мфунт/моль", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MolarMassUnit.MegapoundPerMole, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MolarMass.ParseUnit("µg/mol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarMassUnit.MicrogramPerMole, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MolarMass.ParseUnit("мкг/моль", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MolarMassUnit.MicrogramPerMole, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MolarMass.ParseUnit("mg/mol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarMassUnit.MilligramPerMole, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MolarMass.ParseUnit("мг/моль", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MolarMassUnit.MilligramPerMole, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MolarMass.ParseUnit("ng/mol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarMassUnit.NanogramPerMole, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MolarMass.ParseUnit("нг/моль", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MolarMassUnit.NanogramPerMole, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MolarMass.ParseUnit("lb/mol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarMassUnit.PoundPerMole, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MolarMass.ParseUnit("фунт/моль", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(MolarMassUnit.PoundPerMole, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(MolarMass.TryParseUnit("cg/mol", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarMassUnit.CentigramPerMole, parsedUnit);
            }

            {
                Assert.True(MolarMass.TryParseUnit("сг/моль", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MolarMassUnit.CentigramPerMole, parsedUnit);
            }

            {
                Assert.True(MolarMass.TryParseUnit("dag/mol", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarMassUnit.DecagramPerMole, parsedUnit);
            }

            {
                Assert.True(MolarMass.TryParseUnit("даг/моль", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MolarMassUnit.DecagramPerMole, parsedUnit);
            }

            {
                Assert.True(MolarMass.TryParseUnit("dg/mol", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarMassUnit.DecigramPerMole, parsedUnit);
            }

            {
                Assert.True(MolarMass.TryParseUnit("дг/моль", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MolarMassUnit.DecigramPerMole, parsedUnit);
            }

            {
                Assert.True(MolarMass.TryParseUnit("g/mol", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarMassUnit.GramPerMole, parsedUnit);
            }

            {
                Assert.True(MolarMass.TryParseUnit("г/моль", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MolarMassUnit.GramPerMole, parsedUnit);
            }

            {
                Assert.True(MolarMass.TryParseUnit("hg/mol", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarMassUnit.HectogramPerMole, parsedUnit);
            }

            {
                Assert.True(MolarMass.TryParseUnit("гг/моль", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MolarMassUnit.HectogramPerMole, parsedUnit);
            }

            {
                Assert.True(MolarMass.TryParseUnit("kg/kmol", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarMassUnit.KilogramPerKilomole, parsedUnit);
            }

            {
                Assert.True(MolarMass.TryParseUnit("kg/mol", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarMassUnit.KilogramPerMole, parsedUnit);
            }

            {
                Assert.True(MolarMass.TryParseUnit("кг/моль", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MolarMassUnit.KilogramPerMole, parsedUnit);
            }

            {
                Assert.True(MolarMass.TryParseUnit("klb/mol", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarMassUnit.KilopoundPerMole, parsedUnit);
            }

            {
                Assert.True(MolarMass.TryParseUnit("кфунт/моль", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MolarMassUnit.KilopoundPerMole, parsedUnit);
            }

            {
                Assert.True(MolarMass.TryParseUnit("Mlb/mol", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarMassUnit.MegapoundPerMole, parsedUnit);
            }

            {
                Assert.True(MolarMass.TryParseUnit("Мфунт/моль", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MolarMassUnit.MegapoundPerMole, parsedUnit);
            }

            {
                Assert.True(MolarMass.TryParseUnit("µg/mol", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarMassUnit.MicrogramPerMole, parsedUnit);
            }

            {
                Assert.True(MolarMass.TryParseUnit("мкг/моль", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MolarMassUnit.MicrogramPerMole, parsedUnit);
            }

            {
                Assert.True(MolarMass.TryParseUnit("mg/mol", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarMassUnit.MilligramPerMole, parsedUnit);
            }

            {
                Assert.True(MolarMass.TryParseUnit("мг/моль", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MolarMassUnit.MilligramPerMole, parsedUnit);
            }

            {
                Assert.True(MolarMass.TryParseUnit("ng/mol", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarMassUnit.NanogramPerMole, parsedUnit);
            }

            {
                Assert.True(MolarMass.TryParseUnit("нг/моль", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MolarMassUnit.NanogramPerMole, parsedUnit);
            }

            {
                Assert.True(MolarMass.TryParseUnit("lb/mol", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarMassUnit.PoundPerMole, parsedUnit);
            }

            {
                Assert.True(MolarMass.TryParseUnit("фунт/моль", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(MolarMassUnit.PoundPerMole, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(MolarMassUnit unit)
        {
            var inBaseUnits = MolarMass.From(1.0, MolarMass.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(MolarMassUnit unit)
        {
            var quantity = MolarMass.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(MolarMassUnit unit)
        {
            // See if there is a unit available that is not the base unit, fallback to base unit if it has only a single unit.
            var fromUnit = MolarMass.Units.First(u => u != MolarMass.BaseUnit);

            var quantity = MolarMass.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(MolarMassUnit unit)
        {
            var quantity = default(MolarMass);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            MolarMass kilogrampermole = MolarMass.FromKilogramsPerMole(1);
            Assert.Equal(1, MolarMass.FromCentigramsPerMole(kilogrampermole.CentigramsPerMole).KilogramsPerMole);
            Assert.Equal(1, MolarMass.FromDecagramsPerMole(kilogrampermole.DecagramsPerMole).KilogramsPerMole);
            Assert.Equal(1, MolarMass.FromDecigramsPerMole(kilogrampermole.DecigramsPerMole).KilogramsPerMole);
            Assert.Equal(1, MolarMass.FromGramsPerMole(kilogrampermole.GramsPerMole).KilogramsPerMole);
            Assert.Equal(1, MolarMass.FromHectogramsPerMole(kilogrampermole.HectogramsPerMole).KilogramsPerMole);
            Assert.Equal(1, MolarMass.FromKilogramsPerKilomole(kilogrampermole.KilogramsPerKilomole).KilogramsPerMole);
            Assert.Equal(1, MolarMass.FromKilogramsPerMole(kilogrampermole.KilogramsPerMole).KilogramsPerMole);
            Assert.Equal(1, MolarMass.FromKilopoundsPerMole(kilogrampermole.KilopoundsPerMole).KilogramsPerMole);
            Assert.Equal(1, MolarMass.FromMegapoundsPerMole(kilogrampermole.MegapoundsPerMole).KilogramsPerMole);
            Assert.Equal(1, MolarMass.FromMicrogramsPerMole(kilogrampermole.MicrogramsPerMole).KilogramsPerMole);
            Assert.Equal(1, MolarMass.FromMilligramsPerMole(kilogrampermole.MilligramsPerMole).KilogramsPerMole);
            Assert.Equal(1, MolarMass.FromNanogramsPerMole(kilogrampermole.NanogramsPerMole).KilogramsPerMole);
            Assert.Equal(1, MolarMass.FromPoundsPerMole(kilogrampermole.PoundsPerMole).KilogramsPerMole);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            MolarMass v = MolarMass.FromKilogramsPerMole(1);
            Assert.Equal(-1, -v.KilogramsPerMole);
            Assert.Equal(2, (MolarMass.FromKilogramsPerMole(3) - v).KilogramsPerMole);
            Assert.Equal(2, (v + v).KilogramsPerMole);
            Assert.Equal(10, (v * 10).KilogramsPerMole);
            Assert.Equal(10, (10 * v).KilogramsPerMole);
            Assert.Equal(2, (MolarMass.FromKilogramsPerMole(10) / 5).KilogramsPerMole);
            Assert.Equal(2, MolarMass.FromKilogramsPerMole(10) / MolarMass.FromKilogramsPerMole(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            MolarMass oneKilogramPerMole = MolarMass.FromKilogramsPerMole(1);
            MolarMass twoKilogramsPerMole = MolarMass.FromKilogramsPerMole(2);

            Assert.True(oneKilogramPerMole < twoKilogramsPerMole);
            Assert.True(oneKilogramPerMole <= twoKilogramsPerMole);
            Assert.True(twoKilogramsPerMole > oneKilogramPerMole);
            Assert.True(twoKilogramsPerMole >= oneKilogramPerMole);

            Assert.False(oneKilogramPerMole > twoKilogramsPerMole);
            Assert.False(oneKilogramPerMole >= twoKilogramsPerMole);
            Assert.False(twoKilogramsPerMole < oneKilogramPerMole);
            Assert.False(twoKilogramsPerMole <= oneKilogramPerMole);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            MolarMass kilogrampermole = MolarMass.FromKilogramsPerMole(1);
            Assert.Equal(0, kilogrampermole.CompareTo(kilogrampermole));
            Assert.True(kilogrampermole.CompareTo(MolarMass.Zero) > 0);
            Assert.True(MolarMass.Zero.CompareTo(kilogrampermole) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            MolarMass kilogrampermole = MolarMass.FromKilogramsPerMole(1);
            Assert.Throws<ArgumentException>(() => kilogrampermole.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            MolarMass kilogrampermole = MolarMass.FromKilogramsPerMole(1);
            Assert.Throws<ArgumentNullException>(() => kilogrampermole.CompareTo(null));
        }

        [Theory]
        [InlineData(1, MolarMassUnit.KilogramPerMole, 1, MolarMassUnit.KilogramPerMole, true)]  // Same value and unit.
        [InlineData(1, MolarMassUnit.KilogramPerMole, 2, MolarMassUnit.KilogramPerMole, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, MolarMassUnit unitA, double valueB, MolarMassUnit unitB, bool expectEqual)
        {
            var a = new MolarMass(valueA, unitA);
            var b = new MolarMass(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = MolarMass.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_WithTolerance_IsImplemented()
        {
            var v = MolarMass.FromKilogramsPerMole(1);
            Assert.True(v.Equals(MolarMass.FromKilogramsPerMole(1), MolarMass.FromKilogramsPerMole(0)));
            Assert.True(v.Equals(MolarMass.FromKilogramsPerMole(1), MolarMass.FromKilogramsPerMole(0.001m)));
            Assert.True(v.Equals(MolarMass.FromKilogramsPerMole(0.9999), MolarMass.FromKilogramsPerMole(0.001m)));
            Assert.False(v.Equals(MolarMass.FromKilogramsPerMole(0.99), MolarMass.FromKilogramsPerMole(0.001m)));
            Assert.False(v.Equals(MolarMass.Zero, MolarMass.FromKilogramsPerMole(0.001m)));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = MolarMass.FromKilogramsPerMole(1);
            var negativeTolerance = MolarMass.FromKilogramsPerMole(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(MolarMass.FromKilogramsPerMole(1), negativeTolerance));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            MolarMass kilogrampermole = MolarMass.FromKilogramsPerMole(1);
            Assert.False(kilogrampermole.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            MolarMass kilogrampermole = MolarMass.FromKilogramsPerMole(1);
            Assert.False(kilogrampermole.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(MolarMassUnit)).Cast<MolarMassUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(MolarMass.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentCulture;
            Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 cg/mol", new MolarMass(1, MolarMassUnit.CentigramPerMole).ToString());
                Assert.Equal("1 dag/mol", new MolarMass(1, MolarMassUnit.DecagramPerMole).ToString());
                Assert.Equal("1 dg/mol", new MolarMass(1, MolarMassUnit.DecigramPerMole).ToString());
                Assert.Equal("1 g/mol", new MolarMass(1, MolarMassUnit.GramPerMole).ToString());
                Assert.Equal("1 hg/mol", new MolarMass(1, MolarMassUnit.HectogramPerMole).ToString());
                Assert.Equal("1 kg/kmol", new MolarMass(1, MolarMassUnit.KilogramPerKilomole).ToString());
                Assert.Equal("1 kg/mol", new MolarMass(1, MolarMassUnit.KilogramPerMole).ToString());
                Assert.Equal("1 klb/mol", new MolarMass(1, MolarMassUnit.KilopoundPerMole).ToString());
                Assert.Equal("1 Mlb/mol", new MolarMass(1, MolarMassUnit.MegapoundPerMole).ToString());
                Assert.Equal("1 µg/mol", new MolarMass(1, MolarMassUnit.MicrogramPerMole).ToString());
                Assert.Equal("1 mg/mol", new MolarMass(1, MolarMassUnit.MilligramPerMole).ToString());
                Assert.Equal("1 ng/mol", new MolarMass(1, MolarMassUnit.NanogramPerMole).ToString());
                Assert.Equal("1 lb/mol", new MolarMass(1, MolarMassUnit.PoundPerMole).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cg/mol", new MolarMass(1, MolarMassUnit.CentigramPerMole).ToString(swedishCulture));
            Assert.Equal("1 dag/mol", new MolarMass(1, MolarMassUnit.DecagramPerMole).ToString(swedishCulture));
            Assert.Equal("1 dg/mol", new MolarMass(1, MolarMassUnit.DecigramPerMole).ToString(swedishCulture));
            Assert.Equal("1 g/mol", new MolarMass(1, MolarMassUnit.GramPerMole).ToString(swedishCulture));
            Assert.Equal("1 hg/mol", new MolarMass(1, MolarMassUnit.HectogramPerMole).ToString(swedishCulture));
            Assert.Equal("1 kg/kmol", new MolarMass(1, MolarMassUnit.KilogramPerKilomole).ToString(swedishCulture));
            Assert.Equal("1 kg/mol", new MolarMass(1, MolarMassUnit.KilogramPerMole).ToString(swedishCulture));
            Assert.Equal("1 klb/mol", new MolarMass(1, MolarMassUnit.KilopoundPerMole).ToString(swedishCulture));
            Assert.Equal("1 Mlb/mol", new MolarMass(1, MolarMassUnit.MegapoundPerMole).ToString(swedishCulture));
            Assert.Equal("1 µg/mol", new MolarMass(1, MolarMassUnit.MicrogramPerMole).ToString(swedishCulture));
            Assert.Equal("1 mg/mol", new MolarMass(1, MolarMassUnit.MilligramPerMole).ToString(swedishCulture));
            Assert.Equal("1 ng/mol", new MolarMass(1, MolarMassUnit.NanogramPerMole).ToString(swedishCulture));
            Assert.Equal("1 lb/mol", new MolarMass(1, MolarMassUnit.PoundPerMole).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentCulture;
            try
            {
                CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 kg/mol", new MolarMass(0.123456, MolarMassUnit.KilogramPerMole).ToString("s1"));
                Assert.Equal("0.12 kg/mol", new MolarMass(0.123456, MolarMassUnit.KilogramPerMole).ToString("s2"));
                Assert.Equal("0.123 kg/mol", new MolarMass(0.123456, MolarMassUnit.KilogramPerMole).ToString("s3"));
                Assert.Equal("0.1235 kg/mol", new MolarMass(0.123456, MolarMassUnit.KilogramPerMole).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentCulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 kg/mol", new MolarMass(0.123456, MolarMassUnit.KilogramPerMole).ToString("s1", culture));
            Assert.Equal("0.12 kg/mol", new MolarMass(0.123456, MolarMassUnit.KilogramPerMole).ToString("s2", culture));
            Assert.Equal("0.123 kg/mol", new MolarMass(0.123456, MolarMassUnit.KilogramPerMole).ToString("s3", culture));
            Assert.Equal("0.1235 kg/mol", new MolarMass(0.123456, MolarMassUnit.KilogramPerMole).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("g", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(MolarMass)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(MolarMassUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal(MolarMass.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal(MolarMass.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            #if NET7_0_OR_GREATER
            var expected = HashCode.Combine(MolarMass.Info.Name, quantity.KilogramsPerMole);
            #else
            var expected = new {MolarMass.Info.Name, valueInBaseUnit = quantity.KilogramsPerMole}.GetHashCode();
            #endif
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = MolarMass.FromKilogramsPerMole(value);
            Assert.Equal(MolarMass.FromKilogramsPerMole(-value), -quantity);
        }
    }
}
