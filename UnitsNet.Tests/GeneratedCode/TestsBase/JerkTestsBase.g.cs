//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Jerk.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class JerkTestsBase : QuantityTestsBase
    {
        protected abstract double CentimetersPerSecondCubedInOneMeterPerSecondCubed { get; }
        protected abstract double DecimetersPerSecondCubedInOneMeterPerSecondCubed { get; }
        protected abstract double FeetPerSecondCubedInOneMeterPerSecondCubed { get; }
        protected abstract double InchesPerSecondCubedInOneMeterPerSecondCubed { get; }
        protected abstract double KilometersPerSecondCubedInOneMeterPerSecondCubed { get; }
        protected abstract double MetersPerSecondCubedInOneMeterPerSecondCubed { get; }
        protected abstract double MicrometersPerSecondCubedInOneMeterPerSecondCubed { get; }
        protected abstract double MillimetersPerSecondCubedInOneMeterPerSecondCubed { get; }
        protected abstract double MillistandardGravitiesPerSecondInOneMeterPerSecondCubed { get; }
        protected abstract double NanometersPerSecondCubedInOneMeterPerSecondCubed { get; }
        protected abstract double StandardGravitiesPerSecondInOneMeterPerSecondCubed { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentimetersPerSecondCubedTolerance { get { return 1e-5; } }
        protected virtual double DecimetersPerSecondCubedTolerance { get { return 1e-5; } }
        protected virtual double FeetPerSecondCubedTolerance { get { return 1e-5; } }
        protected virtual double InchesPerSecondCubedTolerance { get { return 1e-5; } }
        protected virtual double KilometersPerSecondCubedTolerance { get { return 1e-5; } }
        protected virtual double MetersPerSecondCubedTolerance { get { return 1e-5; } }
        protected virtual double MicrometersPerSecondCubedTolerance { get { return 1e-5; } }
        protected virtual double MillimetersPerSecondCubedTolerance { get { return 1e-5; } }
        protected virtual double MillistandardGravitiesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double NanometersPerSecondCubedTolerance { get { return 1e-5; } }
        protected virtual double StandardGravitiesPerSecondTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(JerkUnit unit)
        {
            return unit switch
            {
                JerkUnit.CentimeterPerSecondCubed => (CentimetersPerSecondCubedInOneMeterPerSecondCubed, CentimetersPerSecondCubedTolerance),
                JerkUnit.DecimeterPerSecondCubed => (DecimetersPerSecondCubedInOneMeterPerSecondCubed, DecimetersPerSecondCubedTolerance),
                JerkUnit.FootPerSecondCubed => (FeetPerSecondCubedInOneMeterPerSecondCubed, FeetPerSecondCubedTolerance),
                JerkUnit.InchPerSecondCubed => (InchesPerSecondCubedInOneMeterPerSecondCubed, InchesPerSecondCubedTolerance),
                JerkUnit.KilometerPerSecondCubed => (KilometersPerSecondCubedInOneMeterPerSecondCubed, KilometersPerSecondCubedTolerance),
                JerkUnit.MeterPerSecondCubed => (MetersPerSecondCubedInOneMeterPerSecondCubed, MetersPerSecondCubedTolerance),
                JerkUnit.MicrometerPerSecondCubed => (MicrometersPerSecondCubedInOneMeterPerSecondCubed, MicrometersPerSecondCubedTolerance),
                JerkUnit.MillimeterPerSecondCubed => (MillimetersPerSecondCubedInOneMeterPerSecondCubed, MillimetersPerSecondCubedTolerance),
                JerkUnit.MillistandardGravitiesPerSecond => (MillistandardGravitiesPerSecondInOneMeterPerSecondCubed, MillistandardGravitiesPerSecondTolerance),
                JerkUnit.NanometerPerSecondCubed => (NanometersPerSecondCubedInOneMeterPerSecondCubed, NanometersPerSecondCubedTolerance),
                JerkUnit.StandardGravitiesPerSecond => (StandardGravitiesPerSecondInOneMeterPerSecondCubed, StandardGravitiesPerSecondTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { JerkUnit.CentimeterPerSecondCubed },
            new object[] { JerkUnit.DecimeterPerSecondCubed },
            new object[] { JerkUnit.FootPerSecondCubed },
            new object[] { JerkUnit.InchPerSecondCubed },
            new object[] { JerkUnit.KilometerPerSecondCubed },
            new object[] { JerkUnit.MeterPerSecondCubed },
            new object[] { JerkUnit.MicrometerPerSecondCubed },
            new object[] { JerkUnit.MillimeterPerSecondCubed },
            new object[] { JerkUnit.MillistandardGravitiesPerSecond },
            new object[] { JerkUnit.NanometerPerSecondCubed },
            new object[] { JerkUnit.StandardGravitiesPerSecond },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Jerk();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(JerkUnit.MeterPerSecondCubed, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Jerk(double.PositiveInfinity, JerkUnit.MeterPerSecondCubed));
            var exception2 = Record.Exception(() => new Jerk(double.NegativeInfinity, JerkUnit.MeterPerSecondCubed));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Jerk(double.NaN, JerkUnit.MeterPerSecondCubed));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Jerk(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            if (SupportsSIUnitSystem)
            {
                var quantity = new Jerk(value: 1, unitSystem: UnitSystem.SI);
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(() => new Jerk(value: 1, unitSystem: UnitSystem.SI));
            }
        }

        [Fact]
        public void Jerk_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Jerk(1, JerkUnit.MeterPerSecondCubed);

            QuantityInfo<JerkUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Jerk.Zero, quantityInfo.Zero);
            Assert.Equal("Jerk", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<JerkUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void MeterPerSecondCubedToJerkUnits()
        {
            Jerk meterpersecondcubed = Jerk.FromMetersPerSecondCubed(1);
            AssertEx.EqualTolerance(CentimetersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.CentimetersPerSecondCubed, CentimetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(DecimetersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.DecimetersPerSecondCubed, DecimetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(FeetPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.FeetPerSecondCubed, FeetPerSecondCubedTolerance);
            AssertEx.EqualTolerance(InchesPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.InchesPerSecondCubed, InchesPerSecondCubedTolerance);
            AssertEx.EqualTolerance(KilometersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.KilometersPerSecondCubed, KilometersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(MetersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.MetersPerSecondCubed, MetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(MicrometersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.MicrometersPerSecondCubed, MicrometersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(MillimetersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.MillimetersPerSecondCubed, MillimetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(MillistandardGravitiesPerSecondInOneMeterPerSecondCubed, meterpersecondcubed.MillistandardGravitiesPerSecond, MillistandardGravitiesPerSecondTolerance);
            AssertEx.EqualTolerance(NanometersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.NanometersPerSecondCubed, NanometersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(StandardGravitiesPerSecondInOneMeterPerSecondCubed, meterpersecondcubed.StandardGravitiesPerSecond, StandardGravitiesPerSecondTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Jerk.From(1, JerkUnit.CentimeterPerSecondCubed);
            Assert.Equal(1, quantity00.CentimetersPerSecondCubed);
            Assert.Equal(JerkUnit.CentimeterPerSecondCubed, quantity00.Unit);

            var quantity01 = Jerk.From(1, JerkUnit.DecimeterPerSecondCubed);
            Assert.Equal(1, quantity01.DecimetersPerSecondCubed);
            Assert.Equal(JerkUnit.DecimeterPerSecondCubed, quantity01.Unit);

            var quantity02 = Jerk.From(1, JerkUnit.FootPerSecondCubed);
            Assert.Equal(1, quantity02.FeetPerSecondCubed);
            Assert.Equal(JerkUnit.FootPerSecondCubed, quantity02.Unit);

            var quantity03 = Jerk.From(1, JerkUnit.InchPerSecondCubed);
            Assert.Equal(1, quantity03.InchesPerSecondCubed);
            Assert.Equal(JerkUnit.InchPerSecondCubed, quantity03.Unit);

            var quantity04 = Jerk.From(1, JerkUnit.KilometerPerSecondCubed);
            Assert.Equal(1, quantity04.KilometersPerSecondCubed);
            Assert.Equal(JerkUnit.KilometerPerSecondCubed, quantity04.Unit);

            var quantity05 = Jerk.From(1, JerkUnit.MeterPerSecondCubed);
            Assert.Equal(1, quantity05.MetersPerSecondCubed);
            Assert.Equal(JerkUnit.MeterPerSecondCubed, quantity05.Unit);

            var quantity06 = Jerk.From(1, JerkUnit.MicrometerPerSecondCubed);
            Assert.Equal(1, quantity06.MicrometersPerSecondCubed);
            Assert.Equal(JerkUnit.MicrometerPerSecondCubed, quantity06.Unit);

            var quantity07 = Jerk.From(1, JerkUnit.MillimeterPerSecondCubed);
            Assert.Equal(1, quantity07.MillimetersPerSecondCubed);
            Assert.Equal(JerkUnit.MillimeterPerSecondCubed, quantity07.Unit);

            var quantity08 = Jerk.From(1, JerkUnit.MillistandardGravitiesPerSecond);
            Assert.Equal(1, quantity08.MillistandardGravitiesPerSecond);
            Assert.Equal(JerkUnit.MillistandardGravitiesPerSecond, quantity08.Unit);

            var quantity09 = Jerk.From(1, JerkUnit.NanometerPerSecondCubed);
            Assert.Equal(1, quantity09.NanometersPerSecondCubed);
            Assert.Equal(JerkUnit.NanometerPerSecondCubed, quantity09.Unit);

            var quantity10 = Jerk.From(1, JerkUnit.StandardGravitiesPerSecond);
            Assert.Equal(1, quantity10.StandardGravitiesPerSecond);
            Assert.Equal(JerkUnit.StandardGravitiesPerSecond, quantity10.Unit);

        }

        [Fact]
        public void FromMetersPerSecondCubed_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Jerk.FromMetersPerSecondCubed(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Jerk.FromMetersPerSecondCubed(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromMetersPerSecondCubed_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Jerk.FromMetersPerSecondCubed(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var meterpersecondcubed = Jerk.FromMetersPerSecondCubed(1);
            AssertEx.EqualTolerance(CentimetersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.As(JerkUnit.CentimeterPerSecondCubed), CentimetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(DecimetersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.As(JerkUnit.DecimeterPerSecondCubed), DecimetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(FeetPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.As(JerkUnit.FootPerSecondCubed), FeetPerSecondCubedTolerance);
            AssertEx.EqualTolerance(InchesPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.As(JerkUnit.InchPerSecondCubed), InchesPerSecondCubedTolerance);
            AssertEx.EqualTolerance(KilometersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.As(JerkUnit.KilometerPerSecondCubed), KilometersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(MetersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.As(JerkUnit.MeterPerSecondCubed), MetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(MicrometersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.As(JerkUnit.MicrometerPerSecondCubed), MicrometersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(MillimetersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.As(JerkUnit.MillimeterPerSecondCubed), MillimetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(MillistandardGravitiesPerSecondInOneMeterPerSecondCubed, meterpersecondcubed.As(JerkUnit.MillistandardGravitiesPerSecond), MillistandardGravitiesPerSecondTolerance);
            AssertEx.EqualTolerance(NanometersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.As(JerkUnit.NanometerPerSecondCubed), NanometersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(StandardGravitiesPerSecondInOneMeterPerSecondCubed, meterpersecondcubed.As(JerkUnit.StandardGravitiesPerSecond), StandardGravitiesPerSecondTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Jerk(value: 1, unit: Jerk.BaseUnit);
            if (SupportsSIUnitSystem)
            {
                Assert.Equal(1, quantity.As(UnitSystem.SI));
            }
            else
            {
                Assert.Throws<ArgumentException>(() => quantity.As(UnitSystem.SI));
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = Jerk.Parse("1 cm/s³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.CentimetersPerSecondCubed);
                Assert.Equal(JerkUnit.CentimeterPerSecondCubed, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Jerk.Parse("1 см/с³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.CentimetersPerSecondCubed);
                Assert.Equal(JerkUnit.CentimeterPerSecondCubed, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Jerk.Parse("1 dm/s³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.DecimetersPerSecondCubed);
                Assert.Equal(JerkUnit.DecimeterPerSecondCubed, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Jerk.Parse("1 дм/с³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.DecimetersPerSecondCubed);
                Assert.Equal(JerkUnit.DecimeterPerSecondCubed, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Jerk.Parse("1 ft/s³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.FeetPerSecondCubed);
                Assert.Equal(JerkUnit.FootPerSecondCubed, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Jerk.Parse("1 фут/с³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.FeetPerSecondCubed);
                Assert.Equal(JerkUnit.FootPerSecondCubed, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Jerk.Parse("1 in/s³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.InchesPerSecondCubed);
                Assert.Equal(JerkUnit.InchPerSecondCubed, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Jerk.Parse("1 дюйм/с³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.InchesPerSecondCubed);
                Assert.Equal(JerkUnit.InchPerSecondCubed, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Jerk.Parse("1 km/s³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilometersPerSecondCubed);
                Assert.Equal(JerkUnit.KilometerPerSecondCubed, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Jerk.Parse("1 км/с³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.KilometersPerSecondCubed);
                Assert.Equal(JerkUnit.KilometerPerSecondCubed, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Jerk.Parse("1 m/s³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MetersPerSecondCubed);
                Assert.Equal(JerkUnit.MeterPerSecondCubed, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Jerk.Parse("1 м/с³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.MetersPerSecondCubed);
                Assert.Equal(JerkUnit.MeterPerSecondCubed, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Jerk.Parse("1 µm/s³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MicrometersPerSecondCubed);
                Assert.Equal(JerkUnit.MicrometerPerSecondCubed, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Jerk.Parse("1 мкм/с³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.MicrometersPerSecondCubed);
                Assert.Equal(JerkUnit.MicrometerPerSecondCubed, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Jerk.Parse("1 mm/s³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MillimetersPerSecondCubed);
                Assert.Equal(JerkUnit.MillimeterPerSecondCubed, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Jerk.Parse("1 мм/с³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.MillimetersPerSecondCubed);
                Assert.Equal(JerkUnit.MillimeterPerSecondCubed, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Jerk.Parse("1 mg/s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MillistandardGravitiesPerSecond);
                Assert.Equal(JerkUnit.MillistandardGravitiesPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Jerk.Parse("1 мg/s", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.MillistandardGravitiesPerSecond);
                Assert.Equal(JerkUnit.MillistandardGravitiesPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Jerk.Parse("1 nm/s³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.NanometersPerSecondCubed);
                Assert.Equal(JerkUnit.NanometerPerSecondCubed, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Jerk.Parse("1 нм/с³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.NanometersPerSecondCubed);
                Assert.Equal(JerkUnit.NanometerPerSecondCubed, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Jerk.Parse("1 g/s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.StandardGravitiesPerSecond);
                Assert.Equal(JerkUnit.StandardGravitiesPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Jerk.Parse("1 g/s", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.StandardGravitiesPerSecond);
                Assert.Equal(JerkUnit.StandardGravitiesPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(Jerk.TryParse("1 cm/s³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.CentimetersPerSecondCubed);
                Assert.Equal(JerkUnit.CentimeterPerSecondCubed, parsed.Unit);
            }

            {
                Assert.True(Jerk.TryParse("1 см/с³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.CentimetersPerSecondCubed);
                Assert.Equal(JerkUnit.CentimeterPerSecondCubed, parsed.Unit);
            }

            {
                Assert.True(Jerk.TryParse("1 dm/s³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.DecimetersPerSecondCubed);
                Assert.Equal(JerkUnit.DecimeterPerSecondCubed, parsed.Unit);
            }

            {
                Assert.True(Jerk.TryParse("1 дм/с³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.DecimetersPerSecondCubed);
                Assert.Equal(JerkUnit.DecimeterPerSecondCubed, parsed.Unit);
            }

            {
                Assert.True(Jerk.TryParse("1 ft/s³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.FeetPerSecondCubed);
                Assert.Equal(JerkUnit.FootPerSecondCubed, parsed.Unit);
            }

            {
                Assert.True(Jerk.TryParse("1 фут/с³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.FeetPerSecondCubed);
                Assert.Equal(JerkUnit.FootPerSecondCubed, parsed.Unit);
            }

            {
                Assert.True(Jerk.TryParse("1 in/s³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.InchesPerSecondCubed);
                Assert.Equal(JerkUnit.InchPerSecondCubed, parsed.Unit);
            }

            {
                Assert.True(Jerk.TryParse("1 дюйм/с³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.InchesPerSecondCubed);
                Assert.Equal(JerkUnit.InchPerSecondCubed, parsed.Unit);
            }

            {
                Assert.True(Jerk.TryParse("1 km/s³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilometersPerSecondCubed);
                Assert.Equal(JerkUnit.KilometerPerSecondCubed, parsed.Unit);
            }

            {
                Assert.True(Jerk.TryParse("1 км/с³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.KilometersPerSecondCubed);
                Assert.Equal(JerkUnit.KilometerPerSecondCubed, parsed.Unit);
            }

            {
                Assert.True(Jerk.TryParse("1 m/s³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MetersPerSecondCubed);
                Assert.Equal(JerkUnit.MeterPerSecondCubed, parsed.Unit);
            }

            {
                Assert.True(Jerk.TryParse("1 м/с³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.MetersPerSecondCubed);
                Assert.Equal(JerkUnit.MeterPerSecondCubed, parsed.Unit);
            }

            {
                Assert.True(Jerk.TryParse("1 µm/s³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MicrometersPerSecondCubed);
                Assert.Equal(JerkUnit.MicrometerPerSecondCubed, parsed.Unit);
            }

            {
                Assert.True(Jerk.TryParse("1 мкм/с³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.MicrometersPerSecondCubed);
                Assert.Equal(JerkUnit.MicrometerPerSecondCubed, parsed.Unit);
            }

            {
                Assert.True(Jerk.TryParse("1 mm/s³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MillimetersPerSecondCubed);
                Assert.Equal(JerkUnit.MillimeterPerSecondCubed, parsed.Unit);
            }

            {
                Assert.True(Jerk.TryParse("1 мм/с³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.MillimetersPerSecondCubed);
                Assert.Equal(JerkUnit.MillimeterPerSecondCubed, parsed.Unit);
            }

            {
                Assert.True(Jerk.TryParse("1 mg/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MillistandardGravitiesPerSecond);
                Assert.Equal(JerkUnit.MillistandardGravitiesPerSecond, parsed.Unit);
            }

            {
                Assert.True(Jerk.TryParse("1 мg/s", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.MillistandardGravitiesPerSecond);
                Assert.Equal(JerkUnit.MillistandardGravitiesPerSecond, parsed.Unit);
            }

            {
                Assert.True(Jerk.TryParse("1 nm/s³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.NanometersPerSecondCubed);
                Assert.Equal(JerkUnit.NanometerPerSecondCubed, parsed.Unit);
            }

            {
                Assert.True(Jerk.TryParse("1 нм/с³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.NanometersPerSecondCubed);
                Assert.Equal(JerkUnit.NanometerPerSecondCubed, parsed.Unit);
            }

            {
                Assert.True(Jerk.TryParse("1 g/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.StandardGravitiesPerSecond);
                Assert.Equal(JerkUnit.StandardGravitiesPerSecond, parsed.Unit);
            }

            {
                Assert.True(Jerk.TryParse("1 g/s", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.StandardGravitiesPerSecond);
                Assert.Equal(JerkUnit.StandardGravitiesPerSecond, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = Jerk.ParseUnit("cm/s³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(JerkUnit.CentimeterPerSecondCubed, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Jerk.ParseUnit("см/с³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(JerkUnit.CentimeterPerSecondCubed, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Jerk.ParseUnit("dm/s³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(JerkUnit.DecimeterPerSecondCubed, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Jerk.ParseUnit("дм/с³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(JerkUnit.DecimeterPerSecondCubed, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Jerk.ParseUnit("ft/s³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(JerkUnit.FootPerSecondCubed, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Jerk.ParseUnit("фут/с³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(JerkUnit.FootPerSecondCubed, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Jerk.ParseUnit("in/s³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(JerkUnit.InchPerSecondCubed, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Jerk.ParseUnit("дюйм/с³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(JerkUnit.InchPerSecondCubed, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Jerk.ParseUnit("km/s³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(JerkUnit.KilometerPerSecondCubed, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Jerk.ParseUnit("км/с³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(JerkUnit.KilometerPerSecondCubed, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Jerk.ParseUnit("m/s³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(JerkUnit.MeterPerSecondCubed, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Jerk.ParseUnit("м/с³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(JerkUnit.MeterPerSecondCubed, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Jerk.ParseUnit("µm/s³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(JerkUnit.MicrometerPerSecondCubed, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Jerk.ParseUnit("мкм/с³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(JerkUnit.MicrometerPerSecondCubed, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Jerk.ParseUnit("mm/s³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(JerkUnit.MillimeterPerSecondCubed, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Jerk.ParseUnit("мм/с³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(JerkUnit.MillimeterPerSecondCubed, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Jerk.ParseUnit("mg/s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(JerkUnit.MillistandardGravitiesPerSecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Jerk.ParseUnit("мg/s", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(JerkUnit.MillistandardGravitiesPerSecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Jerk.ParseUnit("nm/s³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(JerkUnit.NanometerPerSecondCubed, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Jerk.ParseUnit("нм/с³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(JerkUnit.NanometerPerSecondCubed, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Jerk.ParseUnit("g/s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(JerkUnit.StandardGravitiesPerSecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Jerk.ParseUnit("g/s", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(JerkUnit.StandardGravitiesPerSecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(Jerk.TryParseUnit("cm/s³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(JerkUnit.CentimeterPerSecondCubed, parsedUnit);
            }

            {
                Assert.True(Jerk.TryParseUnit("см/с³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(JerkUnit.CentimeterPerSecondCubed, parsedUnit);
            }

            {
                Assert.True(Jerk.TryParseUnit("dm/s³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(JerkUnit.DecimeterPerSecondCubed, parsedUnit);
            }

            {
                Assert.True(Jerk.TryParseUnit("дм/с³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(JerkUnit.DecimeterPerSecondCubed, parsedUnit);
            }

            {
                Assert.True(Jerk.TryParseUnit("ft/s³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(JerkUnit.FootPerSecondCubed, parsedUnit);
            }

            {
                Assert.True(Jerk.TryParseUnit("фут/с³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(JerkUnit.FootPerSecondCubed, parsedUnit);
            }

            {
                Assert.True(Jerk.TryParseUnit("in/s³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(JerkUnit.InchPerSecondCubed, parsedUnit);
            }

            {
                Assert.True(Jerk.TryParseUnit("дюйм/с³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(JerkUnit.InchPerSecondCubed, parsedUnit);
            }

            {
                Assert.True(Jerk.TryParseUnit("km/s³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(JerkUnit.KilometerPerSecondCubed, parsedUnit);
            }

            {
                Assert.True(Jerk.TryParseUnit("км/с³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(JerkUnit.KilometerPerSecondCubed, parsedUnit);
            }

            {
                Assert.True(Jerk.TryParseUnit("m/s³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(JerkUnit.MeterPerSecondCubed, parsedUnit);
            }

            {
                Assert.True(Jerk.TryParseUnit("м/с³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(JerkUnit.MeterPerSecondCubed, parsedUnit);
            }

            {
                Assert.True(Jerk.TryParseUnit("µm/s³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(JerkUnit.MicrometerPerSecondCubed, parsedUnit);
            }

            {
                Assert.True(Jerk.TryParseUnit("мкм/с³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(JerkUnit.MicrometerPerSecondCubed, parsedUnit);
            }

            {
                Assert.True(Jerk.TryParseUnit("mm/s³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(JerkUnit.MillimeterPerSecondCubed, parsedUnit);
            }

            {
                Assert.True(Jerk.TryParseUnit("мм/с³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(JerkUnit.MillimeterPerSecondCubed, parsedUnit);
            }

            {
                Assert.True(Jerk.TryParseUnit("mg/s", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(JerkUnit.MillistandardGravitiesPerSecond, parsedUnit);
            }

            {
                Assert.True(Jerk.TryParseUnit("мg/s", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(JerkUnit.MillistandardGravitiesPerSecond, parsedUnit);
            }

            {
                Assert.True(Jerk.TryParseUnit("nm/s³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(JerkUnit.NanometerPerSecondCubed, parsedUnit);
            }

            {
                Assert.True(Jerk.TryParseUnit("нм/с³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(JerkUnit.NanometerPerSecondCubed, parsedUnit);
            }

            {
                Assert.True(Jerk.TryParseUnit("g/s", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(JerkUnit.StandardGravitiesPerSecond, parsedUnit);
            }

            {
                Assert.True(Jerk.TryParseUnit("g/s", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(JerkUnit.StandardGravitiesPerSecond, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(JerkUnit unit)
        {
            var inBaseUnits = Jerk.From(1.0, Jerk.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(JerkUnit unit)
        {
            var quantity = Jerk.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(JerkUnit unit)
        {
            // See if there is a unit available that is not the base unit, fallback to base unit if it has only a single unit.
            var fromUnit = Jerk.Units.First(u => u != Jerk.BaseUnit);

            var quantity = Jerk.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(JerkUnit unit)
        {
            var quantity = default(Jerk);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Jerk meterpersecondcubed = Jerk.FromMetersPerSecondCubed(1);
            Assert.Equal(1, Jerk.FromCentimetersPerSecondCubed(meterpersecondcubed.CentimetersPerSecondCubed).MetersPerSecondCubed);
            Assert.Equal(1, Jerk.FromDecimetersPerSecondCubed(meterpersecondcubed.DecimetersPerSecondCubed).MetersPerSecondCubed);
            Assert.Equal(1, Jerk.FromFeetPerSecondCubed(meterpersecondcubed.FeetPerSecondCubed).MetersPerSecondCubed);
            Assert.Equal(1, Jerk.FromInchesPerSecondCubed(meterpersecondcubed.InchesPerSecondCubed).MetersPerSecondCubed);
            Assert.Equal(1, Jerk.FromKilometersPerSecondCubed(meterpersecondcubed.KilometersPerSecondCubed).MetersPerSecondCubed);
            Assert.Equal(1, Jerk.FromMetersPerSecondCubed(meterpersecondcubed.MetersPerSecondCubed).MetersPerSecondCubed);
            Assert.Equal(1, Jerk.FromMicrometersPerSecondCubed(meterpersecondcubed.MicrometersPerSecondCubed).MetersPerSecondCubed);
            Assert.Equal(1, Jerk.FromMillimetersPerSecondCubed(meterpersecondcubed.MillimetersPerSecondCubed).MetersPerSecondCubed);
            Assert.Equal(1, Jerk.FromMillistandardGravitiesPerSecond(meterpersecondcubed.MillistandardGravitiesPerSecond).MetersPerSecondCubed);
            Assert.Equal(1, Jerk.FromNanometersPerSecondCubed(meterpersecondcubed.NanometersPerSecondCubed).MetersPerSecondCubed);
            Assert.Equal(1, Jerk.FromStandardGravitiesPerSecond(meterpersecondcubed.StandardGravitiesPerSecond).MetersPerSecondCubed);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Jerk v = Jerk.FromMetersPerSecondCubed(1);
            Assert.Equal(-1, -v.MetersPerSecondCubed);
            Assert.Equal(2, (Jerk.FromMetersPerSecondCubed(3) - v).MetersPerSecondCubed);
            Assert.Equal(2, (v + v).MetersPerSecondCubed);
            Assert.Equal(10, (v * 10).MetersPerSecondCubed);
            Assert.Equal(10, (10 * v).MetersPerSecondCubed);
            Assert.Equal(2, (Jerk.FromMetersPerSecondCubed(10) / 5).MetersPerSecondCubed);
            Assert.Equal(2, Jerk.FromMetersPerSecondCubed(10) / Jerk.FromMetersPerSecondCubed(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            Jerk oneMeterPerSecondCubed = Jerk.FromMetersPerSecondCubed(1);
            Jerk twoMetersPerSecondCubed = Jerk.FromMetersPerSecondCubed(2);

            Assert.True(oneMeterPerSecondCubed < twoMetersPerSecondCubed);
            Assert.True(oneMeterPerSecondCubed <= twoMetersPerSecondCubed);
            Assert.True(twoMetersPerSecondCubed > oneMeterPerSecondCubed);
            Assert.True(twoMetersPerSecondCubed >= oneMeterPerSecondCubed);

            Assert.False(oneMeterPerSecondCubed > twoMetersPerSecondCubed);
            Assert.False(oneMeterPerSecondCubed >= twoMetersPerSecondCubed);
            Assert.False(twoMetersPerSecondCubed < oneMeterPerSecondCubed);
            Assert.False(twoMetersPerSecondCubed <= oneMeterPerSecondCubed);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Jerk meterpersecondcubed = Jerk.FromMetersPerSecondCubed(1);
            Assert.Equal(0, meterpersecondcubed.CompareTo(meterpersecondcubed));
            Assert.True(meterpersecondcubed.CompareTo(Jerk.Zero) > 0);
            Assert.True(Jerk.Zero.CompareTo(meterpersecondcubed) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Jerk meterpersecondcubed = Jerk.FromMetersPerSecondCubed(1);
            Assert.Throws<ArgumentException>(() => meterpersecondcubed.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Jerk meterpersecondcubed = Jerk.FromMetersPerSecondCubed(1);
            Assert.Throws<ArgumentNullException>(() => meterpersecondcubed.CompareTo(null));
        }

        [Theory]
        [InlineData(1, JerkUnit.MeterPerSecondCubed, 1, JerkUnit.MeterPerSecondCubed, true)]  // Same value and unit.
        [InlineData(1, JerkUnit.MeterPerSecondCubed, 2, JerkUnit.MeterPerSecondCubed, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, JerkUnit unitA, double valueB, JerkUnit unitB, bool expectEqual)
        {
            var a = new Jerk(valueA, unitA);
            var b = new Jerk(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Jerk.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_WithTolerance_IsImplemented()
        {
            var v = Jerk.FromMetersPerSecondCubed(1);
            Assert.True(v.Equals(Jerk.FromMetersPerSecondCubed(1), Jerk.FromMetersPerSecondCubed(0)));
            Assert.True(v.Equals(Jerk.FromMetersPerSecondCubed(1), Jerk.FromMetersPerSecondCubed(0.001m)));
            Assert.True(v.Equals(Jerk.FromMetersPerSecondCubed(0.9999), Jerk.FromMetersPerSecondCubed(0.001m)));
            Assert.False(v.Equals(Jerk.FromMetersPerSecondCubed(0.99), Jerk.FromMetersPerSecondCubed(0.001m)));
            Assert.False(v.Equals(Jerk.Zero, Jerk.FromMetersPerSecondCubed(0.001m)));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Jerk.FromMetersPerSecondCubed(1);
            var negativeTolerance = Jerk.FromMetersPerSecondCubed(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Jerk.FromMetersPerSecondCubed(1), negativeTolerance));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Jerk meterpersecondcubed = Jerk.FromMetersPerSecondCubed(1);
            Assert.False(meterpersecondcubed.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Jerk meterpersecondcubed = Jerk.FromMetersPerSecondCubed(1);
            Assert.False(meterpersecondcubed.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(JerkUnit)).Cast<JerkUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Jerk.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentCulture;
            Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 cm/s³", new Jerk(1, JerkUnit.CentimeterPerSecondCubed).ToString());
                Assert.Equal("1 dm/s³", new Jerk(1, JerkUnit.DecimeterPerSecondCubed).ToString());
                Assert.Equal("1 ft/s³", new Jerk(1, JerkUnit.FootPerSecondCubed).ToString());
                Assert.Equal("1 in/s³", new Jerk(1, JerkUnit.InchPerSecondCubed).ToString());
                Assert.Equal("1 km/s³", new Jerk(1, JerkUnit.KilometerPerSecondCubed).ToString());
                Assert.Equal("1 m/s³", new Jerk(1, JerkUnit.MeterPerSecondCubed).ToString());
                Assert.Equal("1 µm/s³", new Jerk(1, JerkUnit.MicrometerPerSecondCubed).ToString());
                Assert.Equal("1 mm/s³", new Jerk(1, JerkUnit.MillimeterPerSecondCubed).ToString());
                Assert.Equal("1 mg/s", new Jerk(1, JerkUnit.MillistandardGravitiesPerSecond).ToString());
                Assert.Equal("1 nm/s³", new Jerk(1, JerkUnit.NanometerPerSecondCubed).ToString());
                Assert.Equal("1 g/s", new Jerk(1, JerkUnit.StandardGravitiesPerSecond).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cm/s³", new Jerk(1, JerkUnit.CentimeterPerSecondCubed).ToString(swedishCulture));
            Assert.Equal("1 dm/s³", new Jerk(1, JerkUnit.DecimeterPerSecondCubed).ToString(swedishCulture));
            Assert.Equal("1 ft/s³", new Jerk(1, JerkUnit.FootPerSecondCubed).ToString(swedishCulture));
            Assert.Equal("1 in/s³", new Jerk(1, JerkUnit.InchPerSecondCubed).ToString(swedishCulture));
            Assert.Equal("1 km/s³", new Jerk(1, JerkUnit.KilometerPerSecondCubed).ToString(swedishCulture));
            Assert.Equal("1 m/s³", new Jerk(1, JerkUnit.MeterPerSecondCubed).ToString(swedishCulture));
            Assert.Equal("1 µm/s³", new Jerk(1, JerkUnit.MicrometerPerSecondCubed).ToString(swedishCulture));
            Assert.Equal("1 mm/s³", new Jerk(1, JerkUnit.MillimeterPerSecondCubed).ToString(swedishCulture));
            Assert.Equal("1 mg/s", new Jerk(1, JerkUnit.MillistandardGravitiesPerSecond).ToString(swedishCulture));
            Assert.Equal("1 nm/s³", new Jerk(1, JerkUnit.NanometerPerSecondCubed).ToString(swedishCulture));
            Assert.Equal("1 g/s", new Jerk(1, JerkUnit.StandardGravitiesPerSecond).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentCulture;
            try
            {
                CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 m/s³", new Jerk(0.123456, JerkUnit.MeterPerSecondCubed).ToString("s1"));
                Assert.Equal("0.12 m/s³", new Jerk(0.123456, JerkUnit.MeterPerSecondCubed).ToString("s2"));
                Assert.Equal("0.123 m/s³", new Jerk(0.123456, JerkUnit.MeterPerSecondCubed).ToString("s3"));
                Assert.Equal("0.1235 m/s³", new Jerk(0.123456, JerkUnit.MeterPerSecondCubed).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentCulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 m/s³", new Jerk(0.123456, JerkUnit.MeterPerSecondCubed).ToString("s1", culture));
            Assert.Equal("0.12 m/s³", new Jerk(0.123456, JerkUnit.MeterPerSecondCubed).ToString("s2", culture));
            Assert.Equal("0.123 m/s³", new Jerk(0.123456, JerkUnit.MeterPerSecondCubed).ToString("s3", culture));
            Assert.Equal("0.1235 m/s³", new Jerk(0.123456, JerkUnit.MeterPerSecondCubed).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Jerk.FromMetersPerSecondCubed(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("g", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Jerk.FromMetersPerSecondCubed(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = Jerk.FromMetersPerSecondCubed(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = Jerk.FromMetersPerSecondCubed(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = Jerk.FromMetersPerSecondCubed(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = Jerk.FromMetersPerSecondCubed(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = Jerk.FromMetersPerSecondCubed(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = Jerk.FromMetersPerSecondCubed(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = Jerk.FromMetersPerSecondCubed(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = Jerk.FromMetersPerSecondCubed(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = Jerk.FromMetersPerSecondCubed(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = Jerk.FromMetersPerSecondCubed(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = Jerk.FromMetersPerSecondCubed(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = Jerk.FromMetersPerSecondCubed(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = Jerk.FromMetersPerSecondCubed(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = Jerk.FromMetersPerSecondCubed(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = Jerk.FromMetersPerSecondCubed(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = Jerk.FromMetersPerSecondCubed(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(Jerk)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = Jerk.FromMetersPerSecondCubed(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(JerkUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = Jerk.FromMetersPerSecondCubed(1.0);
            Assert.Equal(Jerk.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = Jerk.FromMetersPerSecondCubed(1.0);
            Assert.Equal(Jerk.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = Jerk.FromMetersPerSecondCubed(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Jerk.FromMetersPerSecondCubed(1.0);
            #if NET7_0_OR_GREATER
            var expected = HashCode.Combine(Jerk.Info.Name, quantity.MetersPerSecondCubed);
            #else
            var expected = new {Jerk.Info.Name, valueInBaseUnit = quantity.MetersPerSecondCubed}.GetHashCode();
            #endif
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Jerk.FromMetersPerSecondCubed(value);
            Assert.Equal(Jerk.FromMetersPerSecondCubed(-value), -quantity);
        }
    }
}
