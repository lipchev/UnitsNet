//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Duration.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class DurationTestsBase : QuantityTestsBase
    {
        protected abstract double DaysInOneSecond { get; }
        protected abstract double HoursInOneSecond { get; }
        protected abstract double JulianYearsInOneSecond { get; }
        protected abstract double MicrosecondsInOneSecond { get; }
        protected abstract double MillisecondsInOneSecond { get; }
        protected abstract double MinutesInOneSecond { get; }
        protected abstract double Months30InOneSecond { get; }
        protected abstract double NanosecondsInOneSecond { get; }
        protected abstract double SecondsInOneSecond { get; }
        protected abstract double SolsInOneSecond { get; }
        protected abstract double WeeksInOneSecond { get; }
        protected abstract double Years365InOneSecond { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double DaysTolerance { get { return 1e-5; } }
        protected virtual double HoursTolerance { get { return 1e-5; } }
        protected virtual double JulianYearsTolerance { get { return 1e-5; } }
        protected virtual double MicrosecondsTolerance { get { return 1e-5; } }
        protected virtual double MillisecondsTolerance { get { return 1e-5; } }
        protected virtual double MinutesTolerance { get { return 1e-5; } }
        protected virtual double Months30Tolerance { get { return 1e-5; } }
        protected virtual double NanosecondsTolerance { get { return 1e-5; } }
        protected virtual double SecondsTolerance { get { return 1e-5; } }
        protected virtual double SolsTolerance { get { return 1e-5; } }
        protected virtual double WeeksTolerance { get { return 1e-5; } }
        protected virtual double Years365Tolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(DurationUnit unit)
        {
            return unit switch
            {
                DurationUnit.Day => (DaysInOneSecond, DaysTolerance),
                DurationUnit.Hour => (HoursInOneSecond, HoursTolerance),
                DurationUnit.JulianYear => (JulianYearsInOneSecond, JulianYearsTolerance),
                DurationUnit.Microsecond => (MicrosecondsInOneSecond, MicrosecondsTolerance),
                DurationUnit.Millisecond => (MillisecondsInOneSecond, MillisecondsTolerance),
                DurationUnit.Minute => (MinutesInOneSecond, MinutesTolerance),
                DurationUnit.Month30 => (Months30InOneSecond, Months30Tolerance),
                DurationUnit.Nanosecond => (NanosecondsInOneSecond, NanosecondsTolerance),
                DurationUnit.Second => (SecondsInOneSecond, SecondsTolerance),
                DurationUnit.Sol => (SolsInOneSecond, SolsTolerance),
                DurationUnit.Week => (WeeksInOneSecond, WeeksTolerance),
                DurationUnit.Year365 => (Years365InOneSecond, Years365Tolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { DurationUnit.Day },
            new object[] { DurationUnit.Hour },
            new object[] { DurationUnit.JulianYear },
            new object[] { DurationUnit.Microsecond },
            new object[] { DurationUnit.Millisecond },
            new object[] { DurationUnit.Minute },
            new object[] { DurationUnit.Month30 },
            new object[] { DurationUnit.Nanosecond },
            new object[] { DurationUnit.Second },
            new object[] { DurationUnit.Sol },
            new object[] { DurationUnit.Week },
            new object[] { DurationUnit.Year365 },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Duration();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(DurationUnit.Second, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Duration(double.PositiveInfinity, DurationUnit.Second));
            var exception2 = Record.Exception(() => new Duration(double.NegativeInfinity, DurationUnit.Second));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Duration(double.NaN, DurationUnit.Second));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Duration(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            if (SupportsSIUnitSystem)
            {
                var quantity = new Duration(value: 1, unitSystem: UnitSystem.SI);
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(() => new Duration(value: 1, unitSystem: UnitSystem.SI));
            }
        }

        [Fact]
        public void Duration_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Duration(1, DurationUnit.Second);

            QuantityInfo<DurationUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Duration.Zero, quantityInfo.Zero);
            Assert.Equal("Duration", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<DurationUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void SecondToDurationUnits()
        {
            Duration second = Duration.FromSeconds(1);
            AssertEx.EqualTolerance(DaysInOneSecond, second.Days, DaysTolerance);
            AssertEx.EqualTolerance(HoursInOneSecond, second.Hours, HoursTolerance);
            AssertEx.EqualTolerance(JulianYearsInOneSecond, second.JulianYears, JulianYearsTolerance);
            AssertEx.EqualTolerance(MicrosecondsInOneSecond, second.Microseconds, MicrosecondsTolerance);
            AssertEx.EqualTolerance(MillisecondsInOneSecond, second.Milliseconds, MillisecondsTolerance);
            AssertEx.EqualTolerance(MinutesInOneSecond, second.Minutes, MinutesTolerance);
            AssertEx.EqualTolerance(Months30InOneSecond, second.Months30, Months30Tolerance);
            AssertEx.EqualTolerance(NanosecondsInOneSecond, second.Nanoseconds, NanosecondsTolerance);
            AssertEx.EqualTolerance(SecondsInOneSecond, second.Seconds, SecondsTolerance);
            AssertEx.EqualTolerance(SolsInOneSecond, second.Sols, SolsTolerance);
            AssertEx.EqualTolerance(WeeksInOneSecond, second.Weeks, WeeksTolerance);
            AssertEx.EqualTolerance(Years365InOneSecond, second.Years365, Years365Tolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Duration.From(1, DurationUnit.Day);
            Assert.Equal(1, quantity00.Days);
            Assert.Equal(DurationUnit.Day, quantity00.Unit);

            var quantity01 = Duration.From(1, DurationUnit.Hour);
            Assert.Equal(1, quantity01.Hours);
            Assert.Equal(DurationUnit.Hour, quantity01.Unit);

            var quantity02 = Duration.From(1, DurationUnit.JulianYear);
            Assert.Equal(1, quantity02.JulianYears);
            Assert.Equal(DurationUnit.JulianYear, quantity02.Unit);

            var quantity03 = Duration.From(1, DurationUnit.Microsecond);
            Assert.Equal(1, quantity03.Microseconds);
            Assert.Equal(DurationUnit.Microsecond, quantity03.Unit);

            var quantity04 = Duration.From(1, DurationUnit.Millisecond);
            Assert.Equal(1, quantity04.Milliseconds);
            Assert.Equal(DurationUnit.Millisecond, quantity04.Unit);

            var quantity05 = Duration.From(1, DurationUnit.Minute);
            Assert.Equal(1, quantity05.Minutes);
            Assert.Equal(DurationUnit.Minute, quantity05.Unit);

            var quantity06 = Duration.From(1, DurationUnit.Month30);
            Assert.Equal(1, quantity06.Months30);
            Assert.Equal(DurationUnit.Month30, quantity06.Unit);

            var quantity07 = Duration.From(1, DurationUnit.Nanosecond);
            Assert.Equal(1, quantity07.Nanoseconds);
            Assert.Equal(DurationUnit.Nanosecond, quantity07.Unit);

            var quantity08 = Duration.From(1, DurationUnit.Second);
            Assert.Equal(1, quantity08.Seconds);
            Assert.Equal(DurationUnit.Second, quantity08.Unit);

            var quantity09 = Duration.From(1, DurationUnit.Sol);
            Assert.Equal(1, quantity09.Sols);
            Assert.Equal(DurationUnit.Sol, quantity09.Unit);

            var quantity10 = Duration.From(1, DurationUnit.Week);
            Assert.Equal(1, quantity10.Weeks);
            Assert.Equal(DurationUnit.Week, quantity10.Unit);

            var quantity11 = Duration.From(1, DurationUnit.Year365);
            Assert.Equal(1, quantity11.Years365);
            Assert.Equal(DurationUnit.Year365, quantity11.Unit);

        }

        [Fact]
        public void FromSeconds_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Duration.FromSeconds(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Duration.FromSeconds(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromSeconds_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Duration.FromSeconds(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var second = Duration.FromSeconds(1);
            AssertEx.EqualTolerance(DaysInOneSecond, second.As(DurationUnit.Day), DaysTolerance);
            AssertEx.EqualTolerance(HoursInOneSecond, second.As(DurationUnit.Hour), HoursTolerance);
            AssertEx.EqualTolerance(JulianYearsInOneSecond, second.As(DurationUnit.JulianYear), JulianYearsTolerance);
            AssertEx.EqualTolerance(MicrosecondsInOneSecond, second.As(DurationUnit.Microsecond), MicrosecondsTolerance);
            AssertEx.EqualTolerance(MillisecondsInOneSecond, second.As(DurationUnit.Millisecond), MillisecondsTolerance);
            AssertEx.EqualTolerance(MinutesInOneSecond, second.As(DurationUnit.Minute), MinutesTolerance);
            AssertEx.EqualTolerance(Months30InOneSecond, second.As(DurationUnit.Month30), Months30Tolerance);
            AssertEx.EqualTolerance(NanosecondsInOneSecond, second.As(DurationUnit.Nanosecond), NanosecondsTolerance);
            AssertEx.EqualTolerance(SecondsInOneSecond, second.As(DurationUnit.Second), SecondsTolerance);
            AssertEx.EqualTolerance(SolsInOneSecond, second.As(DurationUnit.Sol), SolsTolerance);
            AssertEx.EqualTolerance(WeeksInOneSecond, second.As(DurationUnit.Week), WeeksTolerance);
            AssertEx.EqualTolerance(Years365InOneSecond, second.As(DurationUnit.Year365), Years365Tolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Duration(value: 1, unit: Duration.BaseUnit);
            if (SupportsSIUnitSystem)
            {
                Assert.Equal(1, quantity.As(UnitSystem.SI));
            }
            else
            {
                Assert.Throws<ArgumentException>(() => quantity.As(UnitSystem.SI));
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = Duration.Parse("1 d", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Days);
                Assert.Equal(DurationUnit.Day, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 day", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Days);
                Assert.Equal(DurationUnit.Day, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 days", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Days);
                Assert.Equal(DurationUnit.Day, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 сут", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Days);
                Assert.Equal(DurationUnit.Day, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 д", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Days);
                Assert.Equal(DurationUnit.Day, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 h", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Hours);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 hr", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Hours);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 hrs", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Hours);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 hour", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Hours);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 hours", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Hours);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 ч", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Hours);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 час", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Hours);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 jyr", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.JulianYears);
                Assert.Equal(DurationUnit.JulianYear, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 jyear", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.JulianYears);
                Assert.Equal(DurationUnit.JulianYear, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 jyears", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.JulianYears);
                Assert.Equal(DurationUnit.JulianYear, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 µs", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Microseconds);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 µsec", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Microseconds);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 µsecs", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Microseconds);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 µsecond", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Microseconds);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 µseconds", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Microseconds);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 мксек", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Microseconds);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 мкс", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Microseconds);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 ms", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Milliseconds);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 msec", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Milliseconds);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 msecs", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Milliseconds);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 msecond", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Milliseconds);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 mseconds", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Milliseconds);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 мсек", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Milliseconds);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 мс", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Milliseconds);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Minutes);
                Assert.Equal(DurationUnit.Minute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 min", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Minutes);
                Assert.Equal(DurationUnit.Minute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 minute", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Minutes);
                Assert.Equal(DurationUnit.Minute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 minutes", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Minutes);
                Assert.Equal(DurationUnit.Minute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 мин", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Minutes);
                Assert.Equal(DurationUnit.Minute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 mo", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Months30);
                Assert.Equal(DurationUnit.Month30, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 month", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Months30);
                Assert.Equal(DurationUnit.Month30, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 months", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Months30);
                Assert.Equal(DurationUnit.Month30, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 месяц", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Months30);
                Assert.Equal(DurationUnit.Month30, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 ns", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Nanoseconds);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 nsec", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Nanoseconds);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 nsecs", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Nanoseconds);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 nsecond", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Nanoseconds);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 nseconds", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Nanoseconds);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 нсек", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Nanoseconds);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 нс", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Nanoseconds);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Seconds);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 sec", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Seconds);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 secs", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Seconds);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 second", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Seconds);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 seconds", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Seconds);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 сек", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Seconds);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 с", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Seconds);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 sol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Sols);
                Assert.Equal(DurationUnit.Sol, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 wk", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Weeks);
                Assert.Equal(DurationUnit.Week, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 week", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Weeks);
                Assert.Equal(DurationUnit.Week, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 weeks", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Weeks);
                Assert.Equal(DurationUnit.Week, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 нед", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Weeks);
                Assert.Equal(DurationUnit.Week, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 yr", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Years365);
                Assert.Equal(DurationUnit.Year365, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 year", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Years365);
                Assert.Equal(DurationUnit.Year365, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 years", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Years365);
                Assert.Equal(DurationUnit.Year365, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 год", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Years365);
                Assert.Equal(DurationUnit.Year365, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(Duration.TryParse("1 d", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Days);
                Assert.Equal(DurationUnit.Day, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 day", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Days);
                Assert.Equal(DurationUnit.Day, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 days", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Days);
                Assert.Equal(DurationUnit.Day, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 сут", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Days);
                Assert.Equal(DurationUnit.Day, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 д", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Days);
                Assert.Equal(DurationUnit.Day, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Hours);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 hr", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Hours);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 hrs", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Hours);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 hour", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Hours);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 hours", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Hours);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 ч", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Hours);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 час", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Hours);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 jyr", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.JulianYears);
                Assert.Equal(DurationUnit.JulianYear, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 jyear", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.JulianYears);
                Assert.Equal(DurationUnit.JulianYear, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 jyears", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.JulianYears);
                Assert.Equal(DurationUnit.JulianYear, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 µs", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Microseconds);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 µsec", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Microseconds);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 µsecs", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Microseconds);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 µsecond", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Microseconds);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 µseconds", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Microseconds);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 мксек", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Microseconds);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 мкс", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Microseconds);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 ms", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Milliseconds);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 msec", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Milliseconds);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 msecs", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Milliseconds);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 msecond", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Milliseconds);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 mseconds", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Milliseconds);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 мсек", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Milliseconds);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 мс", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Milliseconds);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Minutes);
                Assert.Equal(DurationUnit.Minute, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 min", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Minutes);
                Assert.Equal(DurationUnit.Minute, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 minute", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Minutes);
                Assert.Equal(DurationUnit.Minute, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 minutes", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Minutes);
                Assert.Equal(DurationUnit.Minute, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 мин", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Minutes);
                Assert.Equal(DurationUnit.Minute, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 mo", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Months30);
                Assert.Equal(DurationUnit.Month30, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 month", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Months30);
                Assert.Equal(DurationUnit.Month30, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 months", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Months30);
                Assert.Equal(DurationUnit.Month30, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 месяц", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Months30);
                Assert.Equal(DurationUnit.Month30, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 ns", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Nanoseconds);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 nsec", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Nanoseconds);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 nsecs", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Nanoseconds);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 nsecond", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Nanoseconds);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 nseconds", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Nanoseconds);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 нсек", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Nanoseconds);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 нс", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Nanoseconds);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Seconds);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 sec", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Seconds);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 secs", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Seconds);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 second", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Seconds);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 seconds", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Seconds);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 сек", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Seconds);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 с", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Seconds);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 sol", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Sols);
                Assert.Equal(DurationUnit.Sol, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 wk", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Weeks);
                Assert.Equal(DurationUnit.Week, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 week", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Weeks);
                Assert.Equal(DurationUnit.Week, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 weeks", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Weeks);
                Assert.Equal(DurationUnit.Week, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 нед", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Weeks);
                Assert.Equal(DurationUnit.Week, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 yr", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Years365);
                Assert.Equal(DurationUnit.Year365, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 year", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Years365);
                Assert.Equal(DurationUnit.Year365, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 years", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Years365);
                Assert.Equal(DurationUnit.Year365, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 год", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Years365);
                Assert.Equal(DurationUnit.Year365, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = Duration.ParseUnit("d", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Day, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("day", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Day, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("days", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Day, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("сут", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DurationUnit.Day, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("д", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DurationUnit.Day, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("h", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Hour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("hr", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Hour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("hrs", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Hour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("hour", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Hour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("hours", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Hour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("ч", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DurationUnit.Hour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("час", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DurationUnit.Hour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("jyr", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.JulianYear, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("jyear", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.JulianYear, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("jyears", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.JulianYear, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("µs", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Microsecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("µsec", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Microsecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("µsecs", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Microsecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("µsecond", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Microsecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("µseconds", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Microsecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("мксек", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DurationUnit.Microsecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("мкс", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DurationUnit.Microsecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("ms", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Millisecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("msec", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Millisecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("msecs", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Millisecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("msecond", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Millisecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("mseconds", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Millisecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("мсек", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DurationUnit.Millisecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("мс", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DurationUnit.Millisecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Minute, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("min", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Minute, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("minute", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Minute, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("minutes", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Minute, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("мин", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DurationUnit.Minute, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("mo", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Month30, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("month", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Month30, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("months", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Month30, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("месяц", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DurationUnit.Month30, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("ns", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Nanosecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("nsec", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Nanosecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("nsecs", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Nanosecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("nsecond", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Nanosecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("nseconds", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Nanosecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("нсек", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DurationUnit.Nanosecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("нс", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DurationUnit.Nanosecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Second, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("sec", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Second, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("secs", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Second, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("second", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Second, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("seconds", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Second, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("сек", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DurationUnit.Second, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("с", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DurationUnit.Second, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("sol", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Sol, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("wk", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Week, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("week", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Week, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("weeks", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Week, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("нед", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DurationUnit.Week, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("yr", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Year365, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("year", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Year365, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("years", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(DurationUnit.Year365, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Duration.ParseUnit("год", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(DurationUnit.Year365, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(Duration.TryParseUnit("d", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Day, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("day", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Day, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("days", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Day, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("сут", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DurationUnit.Day, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("д", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DurationUnit.Day, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("h", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Hour, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("hr", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Hour, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("hrs", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Hour, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("hour", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Hour, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("hours", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Hour, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("ч", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DurationUnit.Hour, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("час", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DurationUnit.Hour, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("jyr", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.JulianYear, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("jyear", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.JulianYear, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("jyears", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.JulianYear, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("µs", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Microsecond, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("µsec", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Microsecond, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("µsecs", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Microsecond, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("µsecond", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Microsecond, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("µseconds", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Microsecond, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("мксек", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DurationUnit.Microsecond, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("мкс", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DurationUnit.Microsecond, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("ms", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Millisecond, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("msec", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Millisecond, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("msecs", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Millisecond, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("msecond", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Millisecond, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("mseconds", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Millisecond, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("мсек", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DurationUnit.Millisecond, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("мс", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DurationUnit.Millisecond, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Minute, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("min", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Minute, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("minute", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Minute, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("minutes", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Minute, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("мин", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DurationUnit.Minute, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("mo", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Month30, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("month", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Month30, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("months", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Month30, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("месяц", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DurationUnit.Month30, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("ns", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Nanosecond, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("nsec", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Nanosecond, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("nsecs", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Nanosecond, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("nsecond", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Nanosecond, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("nseconds", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Nanosecond, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("нсек", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DurationUnit.Nanosecond, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("нс", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DurationUnit.Nanosecond, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("s", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Second, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("sec", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Second, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("secs", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Second, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("second", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Second, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("seconds", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Second, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("сек", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DurationUnit.Second, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("с", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DurationUnit.Second, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("sol", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Sol, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("wk", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Week, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("week", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Week, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("weeks", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Week, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("нед", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DurationUnit.Week, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("yr", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Year365, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("year", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Year365, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("years", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(DurationUnit.Year365, parsedUnit);
            }

            {
                Assert.True(Duration.TryParseUnit("год", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(DurationUnit.Year365, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(DurationUnit unit)
        {
            var inBaseUnits = Duration.From(1.0, Duration.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(DurationUnit unit)
        {
            var quantity = Duration.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(DurationUnit unit)
        {
            // See if there is a unit available that is not the base unit, fallback to base unit if it has only a single unit.
            var fromUnit = Duration.Units.First(u => u != Duration.BaseUnit);

            var quantity = Duration.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(DurationUnit unit)
        {
            var quantity = default(Duration);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Duration second = Duration.FromSeconds(1);
            Assert.Equal(1, Duration.FromDays(second.Days).Seconds);
            Assert.Equal(1, Duration.FromHours(second.Hours).Seconds);
            Assert.Equal(1, Duration.FromJulianYears(second.JulianYears).Seconds);
            Assert.Equal(1, Duration.FromMicroseconds(second.Microseconds).Seconds);
            Assert.Equal(1, Duration.FromMilliseconds(second.Milliseconds).Seconds);
            Assert.Equal(1, Duration.FromMinutes(second.Minutes).Seconds);
            Assert.Equal(1, Duration.FromMonths30(second.Months30).Seconds);
            Assert.Equal(1, Duration.FromNanoseconds(second.Nanoseconds).Seconds);
            Assert.Equal(1, Duration.FromSeconds(second.Seconds).Seconds);
            Assert.Equal(1, Duration.FromSols(second.Sols).Seconds);
            Assert.Equal(1, Duration.FromWeeks(second.Weeks).Seconds);
            Assert.Equal(1, Duration.FromYears365(second.Years365).Seconds);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Duration v = Duration.FromSeconds(1);
            Assert.Equal(-1, -v.Seconds);
            Assert.Equal(2, (Duration.FromSeconds(3) - v).Seconds);
            Assert.Equal(2, (v + v).Seconds);
            Assert.Equal(10, (v * 10).Seconds);
            Assert.Equal(10, (10 * v).Seconds);
            Assert.Equal(2, (Duration.FromSeconds(10) / 5).Seconds);
            Assert.Equal(2, Duration.FromSeconds(10) / Duration.FromSeconds(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            Duration oneSecond = Duration.FromSeconds(1);
            Duration twoSeconds = Duration.FromSeconds(2);

            Assert.True(oneSecond < twoSeconds);
            Assert.True(oneSecond <= twoSeconds);
            Assert.True(twoSeconds > oneSecond);
            Assert.True(twoSeconds >= oneSecond);

            Assert.False(oneSecond > twoSeconds);
            Assert.False(oneSecond >= twoSeconds);
            Assert.False(twoSeconds < oneSecond);
            Assert.False(twoSeconds <= oneSecond);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Duration second = Duration.FromSeconds(1);
            Assert.Equal(0, second.CompareTo(second));
            Assert.True(second.CompareTo(Duration.Zero) > 0);
            Assert.True(Duration.Zero.CompareTo(second) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Duration second = Duration.FromSeconds(1);
            Assert.Throws<ArgumentException>(() => second.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Duration second = Duration.FromSeconds(1);
            Assert.Throws<ArgumentNullException>(() => second.CompareTo(null));
        }

        [Theory]
        [InlineData(1, DurationUnit.Second, 1, DurationUnit.Second, true)]  // Same value and unit.
        [InlineData(1, DurationUnit.Second, 2, DurationUnit.Second, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, DurationUnit unitA, double valueB, DurationUnit unitB, bool expectEqual)
        {
            var a = new Duration(valueA, unitA);
            var b = new Duration(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Duration.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_WithTolerance_IsImplemented()
        {
            var v = Duration.FromSeconds(1);
            Assert.True(v.Equals(Duration.FromSeconds(1), Duration.FromSeconds(0)));
            Assert.True(v.Equals(Duration.FromSeconds(1), Duration.FromSeconds(0.001m)));
            Assert.True(v.Equals(Duration.FromSeconds(0.9999), Duration.FromSeconds(0.001m)));
            Assert.False(v.Equals(Duration.FromSeconds(0.99), Duration.FromSeconds(0.001m)));
            Assert.False(v.Equals(Duration.Zero, Duration.FromSeconds(0.001m)));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Duration.FromSeconds(1);
            var negativeTolerance = Duration.FromSeconds(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Duration.FromSeconds(1), negativeTolerance));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Duration second = Duration.FromSeconds(1);
            Assert.False(second.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Duration second = Duration.FromSeconds(1);
            Assert.False(second.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(DurationUnit)).Cast<DurationUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Duration.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentCulture;
            Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 d", new Duration(1, DurationUnit.Day).ToString());
                Assert.Equal("1 h", new Duration(1, DurationUnit.Hour).ToString());
                Assert.Equal("1 jyr", new Duration(1, DurationUnit.JulianYear).ToString());
                Assert.Equal("1 µs", new Duration(1, DurationUnit.Microsecond).ToString());
                Assert.Equal("1 ms", new Duration(1, DurationUnit.Millisecond).ToString());
                Assert.Equal("1 m", new Duration(1, DurationUnit.Minute).ToString());
                Assert.Equal("1 mo", new Duration(1, DurationUnit.Month30).ToString());
                Assert.Equal("1 ns", new Duration(1, DurationUnit.Nanosecond).ToString());
                Assert.Equal("1 s", new Duration(1, DurationUnit.Second).ToString());
                Assert.Equal("1 sol", new Duration(1, DurationUnit.Sol).ToString());
                Assert.Equal("1 wk", new Duration(1, DurationUnit.Week).ToString());
                Assert.Equal("1 yr", new Duration(1, DurationUnit.Year365).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 d", new Duration(1, DurationUnit.Day).ToString(swedishCulture));
            Assert.Equal("1 h", new Duration(1, DurationUnit.Hour).ToString(swedishCulture));
            Assert.Equal("1 jyr", new Duration(1, DurationUnit.JulianYear).ToString(swedishCulture));
            Assert.Equal("1 µs", new Duration(1, DurationUnit.Microsecond).ToString(swedishCulture));
            Assert.Equal("1 ms", new Duration(1, DurationUnit.Millisecond).ToString(swedishCulture));
            Assert.Equal("1 m", new Duration(1, DurationUnit.Minute).ToString(swedishCulture));
            Assert.Equal("1 mo", new Duration(1, DurationUnit.Month30).ToString(swedishCulture));
            Assert.Equal("1 ns", new Duration(1, DurationUnit.Nanosecond).ToString(swedishCulture));
            Assert.Equal("1 s", new Duration(1, DurationUnit.Second).ToString(swedishCulture));
            Assert.Equal("1 sol", new Duration(1, DurationUnit.Sol).ToString(swedishCulture));
            Assert.Equal("1 wk", new Duration(1, DurationUnit.Week).ToString(swedishCulture));
            Assert.Equal("1 yr", new Duration(1, DurationUnit.Year365).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentCulture;
            try
            {
                CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 s", new Duration(0.123456, DurationUnit.Second).ToString("s1"));
                Assert.Equal("0.12 s", new Duration(0.123456, DurationUnit.Second).ToString("s2"));
                Assert.Equal("0.123 s", new Duration(0.123456, DurationUnit.Second).ToString("s3"));
                Assert.Equal("0.1235 s", new Duration(0.123456, DurationUnit.Second).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentCulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 s", new Duration(0.123456, DurationUnit.Second).ToString("s1", culture));
            Assert.Equal("0.12 s", new Duration(0.123456, DurationUnit.Second).ToString("s2", culture));
            Assert.Equal("0.123 s", new Duration(0.123456, DurationUnit.Second).ToString("s3", culture));
            Assert.Equal("0.1235 s", new Duration(0.123456, DurationUnit.Second).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Duration.FromSeconds(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("g", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Duration.FromSeconds(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = Duration.FromSeconds(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = Duration.FromSeconds(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = Duration.FromSeconds(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = Duration.FromSeconds(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = Duration.FromSeconds(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = Duration.FromSeconds(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = Duration.FromSeconds(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = Duration.FromSeconds(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = Duration.FromSeconds(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = Duration.FromSeconds(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = Duration.FromSeconds(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = Duration.FromSeconds(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = Duration.FromSeconds(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = Duration.FromSeconds(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = Duration.FromSeconds(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = Duration.FromSeconds(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(Duration)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = Duration.FromSeconds(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(DurationUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = Duration.FromSeconds(1.0);
            Assert.Equal(Duration.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = Duration.FromSeconds(1.0);
            Assert.Equal(Duration.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = Duration.FromSeconds(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Duration.FromSeconds(1.0);
            #if NET7_0_OR_GREATER
            var expected = HashCode.Combine(Duration.Info.Name, quantity.Seconds);
            #else
            var expected = new {Duration.Info.Name, valueInBaseUnit = quantity.Seconds}.GetHashCode();
            #endif
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Duration.FromSeconds(value);
            Assert.Equal(Duration.FromSeconds(-value), -quantity);
        }
    }
}
