//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Molarity.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class MolarityTestsBase : QuantityTestsBase
    {
        protected abstract double CentimolesPerLiterInOneMolePerCubicMeter { get; }
        protected abstract double DecimolesPerLiterInOneMolePerCubicMeter { get; }
        protected abstract double FemtomolesPerLiterInOneMolePerCubicMeter { get; }
        protected abstract double KilomolesPerCubicMeterInOneMolePerCubicMeter { get; }
        protected abstract double MicromolesPerLiterInOneMolePerCubicMeter { get; }
        protected abstract double MillimolesPerLiterInOneMolePerCubicMeter { get; }
        protected abstract double MolesPerCubicMeterInOneMolePerCubicMeter { get; }
        protected abstract double MolesPerLiterInOneMolePerCubicMeter { get; }
        protected abstract double NanomolesPerLiterInOneMolePerCubicMeter { get; }
        protected abstract double PicomolesPerLiterInOneMolePerCubicMeter { get; }
        protected abstract double PoundMolesPerCubicFootInOneMolePerCubicMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentimolesPerLiterTolerance { get { return 1e-5; } }
        protected virtual double DecimolesPerLiterTolerance { get { return 1e-5; } }
        protected virtual double FemtomolesPerLiterTolerance { get { return 1e-5; } }
        protected virtual double KilomolesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MicromolesPerLiterTolerance { get { return 1e-5; } }
        protected virtual double MillimolesPerLiterTolerance { get { return 1e-5; } }
        protected virtual double MolesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MolesPerLiterTolerance { get { return 1e-5; } }
        protected virtual double NanomolesPerLiterTolerance { get { return 1e-5; } }
        protected virtual double PicomolesPerLiterTolerance { get { return 1e-5; } }
        protected virtual double PoundMolesPerCubicFootTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(MolarityUnit unit)
        {
            return unit switch
            {
                MolarityUnit.CentimolePerLiter => (CentimolesPerLiterInOneMolePerCubicMeter, CentimolesPerLiterTolerance),
                MolarityUnit.DecimolePerLiter => (DecimolesPerLiterInOneMolePerCubicMeter, DecimolesPerLiterTolerance),
                MolarityUnit.FemtomolePerLiter => (FemtomolesPerLiterInOneMolePerCubicMeter, FemtomolesPerLiterTolerance),
                MolarityUnit.KilomolePerCubicMeter => (KilomolesPerCubicMeterInOneMolePerCubicMeter, KilomolesPerCubicMeterTolerance),
                MolarityUnit.MicromolePerLiter => (MicromolesPerLiterInOneMolePerCubicMeter, MicromolesPerLiterTolerance),
                MolarityUnit.MillimolePerLiter => (MillimolesPerLiterInOneMolePerCubicMeter, MillimolesPerLiterTolerance),
                MolarityUnit.MolePerCubicMeter => (MolesPerCubicMeterInOneMolePerCubicMeter, MolesPerCubicMeterTolerance),
                MolarityUnit.MolePerLiter => (MolesPerLiterInOneMolePerCubicMeter, MolesPerLiterTolerance),
                MolarityUnit.NanomolePerLiter => (NanomolesPerLiterInOneMolePerCubicMeter, NanomolesPerLiterTolerance),
                MolarityUnit.PicomolePerLiter => (PicomolesPerLiterInOneMolePerCubicMeter, PicomolesPerLiterTolerance),
                MolarityUnit.PoundMolePerCubicFoot => (PoundMolesPerCubicFootInOneMolePerCubicMeter, PoundMolesPerCubicFootTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { MolarityUnit.CentimolePerLiter },
            new object[] { MolarityUnit.DecimolePerLiter },
            new object[] { MolarityUnit.FemtomolePerLiter },
            new object[] { MolarityUnit.KilomolePerCubicMeter },
            new object[] { MolarityUnit.MicromolePerLiter },
            new object[] { MolarityUnit.MillimolePerLiter },
            new object[] { MolarityUnit.MolePerCubicMeter },
            new object[] { MolarityUnit.MolePerLiter },
            new object[] { MolarityUnit.NanomolePerLiter },
            new object[] { MolarityUnit.PicomolePerLiter },
            new object[] { MolarityUnit.PoundMolePerCubicFoot },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Molarity();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(MolarityUnit.MolePerCubicMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Molarity(double.PositiveInfinity, MolarityUnit.MolePerCubicMeter));
            var exception2 = Record.Exception(() => new Molarity(double.NegativeInfinity, MolarityUnit.MolePerCubicMeter));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Molarity(double.NaN, MolarityUnit.MolePerCubicMeter));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Molarity(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            if (SupportsSIUnitSystem)
            {
                var quantity = new Molarity(value: 1, unitSystem: UnitSystem.SI);
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(() => new Molarity(value: 1, unitSystem: UnitSystem.SI));
            }
        }

        [Fact]
        public void Molarity_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Molarity(1, MolarityUnit.MolePerCubicMeter);

            QuantityInfo<MolarityUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Molarity.Zero, quantityInfo.Zero);
            Assert.Equal("Molarity", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<MolarityUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void MolePerCubicMeterToMolarityUnits()
        {
            Molarity molepercubicmeter = Molarity.FromMolesPerCubicMeter(1);
            AssertEx.EqualTolerance(CentimolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.CentimolesPerLiter, CentimolesPerLiterTolerance);
            AssertEx.EqualTolerance(DecimolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.DecimolesPerLiter, DecimolesPerLiterTolerance);
            AssertEx.EqualTolerance(FemtomolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.FemtomolesPerLiter, FemtomolesPerLiterTolerance);
            AssertEx.EqualTolerance(KilomolesPerCubicMeterInOneMolePerCubicMeter, molepercubicmeter.KilomolesPerCubicMeter, KilomolesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MicromolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.MicromolesPerLiter, MicromolesPerLiterTolerance);
            AssertEx.EqualTolerance(MillimolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.MillimolesPerLiter, MillimolesPerLiterTolerance);
            AssertEx.EqualTolerance(MolesPerCubicMeterInOneMolePerCubicMeter, molepercubicmeter.MolesPerCubicMeter, MolesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.MolesPerLiter, MolesPerLiterTolerance);
            AssertEx.EqualTolerance(NanomolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.NanomolesPerLiter, NanomolesPerLiterTolerance);
            AssertEx.EqualTolerance(PicomolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.PicomolesPerLiter, PicomolesPerLiterTolerance);
            AssertEx.EqualTolerance(PoundMolesPerCubicFootInOneMolePerCubicMeter, molepercubicmeter.PoundMolesPerCubicFoot, PoundMolesPerCubicFootTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Molarity.From(1, MolarityUnit.CentimolePerLiter);
            Assert.Equal(1, quantity00.CentimolesPerLiter);
            Assert.Equal(MolarityUnit.CentimolePerLiter, quantity00.Unit);

            var quantity01 = Molarity.From(1, MolarityUnit.DecimolePerLiter);
            Assert.Equal(1, quantity01.DecimolesPerLiter);
            Assert.Equal(MolarityUnit.DecimolePerLiter, quantity01.Unit);

            var quantity02 = Molarity.From(1, MolarityUnit.FemtomolePerLiter);
            Assert.Equal(1, quantity02.FemtomolesPerLiter);
            Assert.Equal(MolarityUnit.FemtomolePerLiter, quantity02.Unit);

            var quantity03 = Molarity.From(1, MolarityUnit.KilomolePerCubicMeter);
            Assert.Equal(1, quantity03.KilomolesPerCubicMeter);
            Assert.Equal(MolarityUnit.KilomolePerCubicMeter, quantity03.Unit);

            var quantity04 = Molarity.From(1, MolarityUnit.MicromolePerLiter);
            Assert.Equal(1, quantity04.MicromolesPerLiter);
            Assert.Equal(MolarityUnit.MicromolePerLiter, quantity04.Unit);

            var quantity05 = Molarity.From(1, MolarityUnit.MillimolePerLiter);
            Assert.Equal(1, quantity05.MillimolesPerLiter);
            Assert.Equal(MolarityUnit.MillimolePerLiter, quantity05.Unit);

            var quantity06 = Molarity.From(1, MolarityUnit.MolePerCubicMeter);
            Assert.Equal(1, quantity06.MolesPerCubicMeter);
            Assert.Equal(MolarityUnit.MolePerCubicMeter, quantity06.Unit);

            var quantity07 = Molarity.From(1, MolarityUnit.MolePerLiter);
            Assert.Equal(1, quantity07.MolesPerLiter);
            Assert.Equal(MolarityUnit.MolePerLiter, quantity07.Unit);

            var quantity08 = Molarity.From(1, MolarityUnit.NanomolePerLiter);
            Assert.Equal(1, quantity08.NanomolesPerLiter);
            Assert.Equal(MolarityUnit.NanomolePerLiter, quantity08.Unit);

            var quantity09 = Molarity.From(1, MolarityUnit.PicomolePerLiter);
            Assert.Equal(1, quantity09.PicomolesPerLiter);
            Assert.Equal(MolarityUnit.PicomolePerLiter, quantity09.Unit);

            var quantity10 = Molarity.From(1, MolarityUnit.PoundMolePerCubicFoot);
            Assert.Equal(1, quantity10.PoundMolesPerCubicFoot);
            Assert.Equal(MolarityUnit.PoundMolePerCubicFoot, quantity10.Unit);

        }

        [Fact]
        public void FromMolesPerCubicMeter_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Molarity.FromMolesPerCubicMeter(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Molarity.FromMolesPerCubicMeter(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromMolesPerCubicMeter_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Molarity.FromMolesPerCubicMeter(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var molepercubicmeter = Molarity.FromMolesPerCubicMeter(1);
            AssertEx.EqualTolerance(CentimolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.As(MolarityUnit.CentimolePerLiter), CentimolesPerLiterTolerance);
            AssertEx.EqualTolerance(DecimolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.As(MolarityUnit.DecimolePerLiter), DecimolesPerLiterTolerance);
            AssertEx.EqualTolerance(FemtomolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.As(MolarityUnit.FemtomolePerLiter), FemtomolesPerLiterTolerance);
            AssertEx.EqualTolerance(KilomolesPerCubicMeterInOneMolePerCubicMeter, molepercubicmeter.As(MolarityUnit.KilomolePerCubicMeter), KilomolesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MicromolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.As(MolarityUnit.MicromolePerLiter), MicromolesPerLiterTolerance);
            AssertEx.EqualTolerance(MillimolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.As(MolarityUnit.MillimolePerLiter), MillimolesPerLiterTolerance);
            AssertEx.EqualTolerance(MolesPerCubicMeterInOneMolePerCubicMeter, molepercubicmeter.As(MolarityUnit.MolePerCubicMeter), MolesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.As(MolarityUnit.MolePerLiter), MolesPerLiterTolerance);
            AssertEx.EqualTolerance(NanomolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.As(MolarityUnit.NanomolePerLiter), NanomolesPerLiterTolerance);
            AssertEx.EqualTolerance(PicomolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.As(MolarityUnit.PicomolePerLiter), PicomolesPerLiterTolerance);
            AssertEx.EqualTolerance(PoundMolesPerCubicFootInOneMolePerCubicMeter, molepercubicmeter.As(MolarityUnit.PoundMolePerCubicFoot), PoundMolesPerCubicFootTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Molarity(value: 1, unit: Molarity.BaseUnit);
            if (SupportsSIUnitSystem)
            {
                Assert.Equal(1, quantity.As(UnitSystem.SI));
            }
            else
            {
                Assert.Throws<ArgumentException>(() => quantity.As(UnitSystem.SI));
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = Molarity.Parse("1 cmol/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.CentimolesPerLiter);
                Assert.Equal(MolarityUnit.CentimolePerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Molarity.Parse("1 cM", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.CentimolesPerLiter);
                Assert.Equal(MolarityUnit.CentimolePerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Molarity.Parse("1 dmol/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.DecimolesPerLiter);
                Assert.Equal(MolarityUnit.DecimolePerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Molarity.Parse("1 dM", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.DecimolesPerLiter);
                Assert.Equal(MolarityUnit.DecimolePerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Molarity.Parse("1 fmol/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.FemtomolesPerLiter);
                Assert.Equal(MolarityUnit.FemtomolePerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Molarity.Parse("1 fM", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.FemtomolesPerLiter);
                Assert.Equal(MolarityUnit.FemtomolePerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Molarity.Parse("1 kmol/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilomolesPerCubicMeter);
                Assert.Equal(MolarityUnit.KilomolePerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Molarity.Parse("1 µmol/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MicromolesPerLiter);
                Assert.Equal(MolarityUnit.MicromolePerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Molarity.Parse("1 µM", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MicromolesPerLiter);
                Assert.Equal(MolarityUnit.MicromolePerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Molarity.Parse("1 mmol/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MillimolesPerLiter);
                Assert.Equal(MolarityUnit.MillimolePerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Molarity.Parse("1 mM", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MillimolesPerLiter);
                Assert.Equal(MolarityUnit.MillimolePerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Molarity.Parse("1 mol/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MolesPerCubicMeter);
                Assert.Equal(MolarityUnit.MolePerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Molarity.Parse("1 mol/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MolesPerLiter);
                Assert.Equal(MolarityUnit.MolePerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Molarity.Parse("1 M", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MolesPerLiter);
                Assert.Equal(MolarityUnit.MolePerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Molarity.Parse("1 nmol/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.NanomolesPerLiter);
                Assert.Equal(MolarityUnit.NanomolePerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Molarity.Parse("1 nM", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.NanomolesPerLiter);
                Assert.Equal(MolarityUnit.NanomolePerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Molarity.Parse("1 pmol/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PicomolesPerLiter);
                Assert.Equal(MolarityUnit.PicomolePerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Molarity.Parse("1 pM", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PicomolesPerLiter);
                Assert.Equal(MolarityUnit.PicomolePerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Molarity.Parse("1 lbmol/ft³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PoundMolesPerCubicFoot);
                Assert.Equal(MolarityUnit.PoundMolePerCubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(Molarity.TryParse("1 cmol/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.CentimolesPerLiter);
                Assert.Equal(MolarityUnit.CentimolePerLiter, parsed.Unit);
            }

            {
                Assert.True(Molarity.TryParse("1 cM", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.CentimolesPerLiter);
                Assert.Equal(MolarityUnit.CentimolePerLiter, parsed.Unit);
            }

            {
                Assert.True(Molarity.TryParse("1 dmol/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.DecimolesPerLiter);
                Assert.Equal(MolarityUnit.DecimolePerLiter, parsed.Unit);
            }

            {
                Assert.True(Molarity.TryParse("1 dM", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.DecimolesPerLiter);
                Assert.Equal(MolarityUnit.DecimolePerLiter, parsed.Unit);
            }

            {
                Assert.True(Molarity.TryParse("1 fmol/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.FemtomolesPerLiter);
                Assert.Equal(MolarityUnit.FemtomolePerLiter, parsed.Unit);
            }

            {
                Assert.True(Molarity.TryParse("1 fM", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.FemtomolesPerLiter);
                Assert.Equal(MolarityUnit.FemtomolePerLiter, parsed.Unit);
            }

            {
                Assert.True(Molarity.TryParse("1 kmol/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilomolesPerCubicMeter);
                Assert.Equal(MolarityUnit.KilomolePerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(Molarity.TryParse("1 µmol/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MicromolesPerLiter);
                Assert.Equal(MolarityUnit.MicromolePerLiter, parsed.Unit);
            }

            {
                Assert.True(Molarity.TryParse("1 µM", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MicromolesPerLiter);
                Assert.Equal(MolarityUnit.MicromolePerLiter, parsed.Unit);
            }

            {
                Assert.True(Molarity.TryParse("1 mmol/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MillimolesPerLiter);
                Assert.Equal(MolarityUnit.MillimolePerLiter, parsed.Unit);
            }

            {
                Assert.True(Molarity.TryParse("1 mM", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MillimolesPerLiter);
                Assert.Equal(MolarityUnit.MillimolePerLiter, parsed.Unit);
            }

            {
                Assert.True(Molarity.TryParse("1 mol/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MolesPerCubicMeter);
                Assert.Equal(MolarityUnit.MolePerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(Molarity.TryParse("1 mol/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MolesPerLiter);
                Assert.Equal(MolarityUnit.MolePerLiter, parsed.Unit);
            }

            {
                Assert.True(Molarity.TryParse("1 M", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MolesPerLiter);
                Assert.Equal(MolarityUnit.MolePerLiter, parsed.Unit);
            }

            {
                Assert.True(Molarity.TryParse("1 nmol/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.NanomolesPerLiter);
                Assert.Equal(MolarityUnit.NanomolePerLiter, parsed.Unit);
            }

            {
                Assert.True(Molarity.TryParse("1 nM", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.NanomolesPerLiter);
                Assert.Equal(MolarityUnit.NanomolePerLiter, parsed.Unit);
            }

            {
                Assert.True(Molarity.TryParse("1 pmol/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PicomolesPerLiter);
                Assert.Equal(MolarityUnit.PicomolePerLiter, parsed.Unit);
            }

            {
                Assert.True(Molarity.TryParse("1 pM", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PicomolesPerLiter);
                Assert.Equal(MolarityUnit.PicomolePerLiter, parsed.Unit);
            }

            {
                Assert.True(Molarity.TryParse("1 lbmol/ft³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PoundMolesPerCubicFoot);
                Assert.Equal(MolarityUnit.PoundMolePerCubicFoot, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = Molarity.ParseUnit("cmol/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarityUnit.CentimolePerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Molarity.ParseUnit("cM", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarityUnit.CentimolePerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Molarity.ParseUnit("dmol/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarityUnit.DecimolePerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Molarity.ParseUnit("dM", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarityUnit.DecimolePerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Molarity.ParseUnit("fmol/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarityUnit.FemtomolePerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Molarity.ParseUnit("fM", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarityUnit.FemtomolePerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Molarity.ParseUnit("kmol/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarityUnit.KilomolePerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Molarity.ParseUnit("µmol/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarityUnit.MicromolePerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Molarity.ParseUnit("µM", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarityUnit.MicromolePerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Molarity.ParseUnit("mmol/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarityUnit.MillimolePerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Molarity.ParseUnit("mM", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarityUnit.MillimolePerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Molarity.ParseUnit("mol/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarityUnit.MolePerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Molarity.ParseUnit("mol/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarityUnit.MolePerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Molarity.ParseUnit("M", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarityUnit.MolePerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Molarity.ParseUnit("nmol/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarityUnit.NanomolePerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Molarity.ParseUnit("nM", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarityUnit.NanomolePerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Molarity.ParseUnit("pmol/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarityUnit.PicomolePerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Molarity.ParseUnit("pM", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarityUnit.PicomolePerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Molarity.ParseUnit("lbmol/ft³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MolarityUnit.PoundMolePerCubicFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(Molarity.TryParseUnit("cmol/l", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarityUnit.CentimolePerLiter, parsedUnit);
            }

            {
                Assert.True(Molarity.TryParseUnit("cM", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarityUnit.CentimolePerLiter, parsedUnit);
            }

            {
                Assert.True(Molarity.TryParseUnit("dmol/l", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarityUnit.DecimolePerLiter, parsedUnit);
            }

            {
                Assert.True(Molarity.TryParseUnit("dM", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarityUnit.DecimolePerLiter, parsedUnit);
            }

            {
                Assert.True(Molarity.TryParseUnit("fmol/l", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarityUnit.FemtomolePerLiter, parsedUnit);
            }

            {
                Assert.True(Molarity.TryParseUnit("fM", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarityUnit.FemtomolePerLiter, parsedUnit);
            }

            {
                Assert.True(Molarity.TryParseUnit("kmol/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarityUnit.KilomolePerCubicMeter, parsedUnit);
            }

            {
                Assert.True(Molarity.TryParseUnit("µmol/l", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarityUnit.MicromolePerLiter, parsedUnit);
            }

            {
                Assert.True(Molarity.TryParseUnit("µM", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarityUnit.MicromolePerLiter, parsedUnit);
            }

            {
                Assert.True(Molarity.TryParseUnit("mmol/l", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarityUnit.MillimolePerLiter, parsedUnit);
            }

            {
                Assert.True(Molarity.TryParseUnit("mM", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarityUnit.MillimolePerLiter, parsedUnit);
            }

            {
                Assert.True(Molarity.TryParseUnit("mol/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarityUnit.MolePerCubicMeter, parsedUnit);
            }

            {
                Assert.True(Molarity.TryParseUnit("mol/l", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarityUnit.MolePerLiter, parsedUnit);
            }

            {
                Assert.True(Molarity.TryParseUnit("M", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarityUnit.MolePerLiter, parsedUnit);
            }

            {
                Assert.True(Molarity.TryParseUnit("nmol/l", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarityUnit.NanomolePerLiter, parsedUnit);
            }

            {
                Assert.True(Molarity.TryParseUnit("nM", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarityUnit.NanomolePerLiter, parsedUnit);
            }

            {
                Assert.True(Molarity.TryParseUnit("pmol/l", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarityUnit.PicomolePerLiter, parsedUnit);
            }

            {
                Assert.True(Molarity.TryParseUnit("pM", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarityUnit.PicomolePerLiter, parsedUnit);
            }

            {
                Assert.True(Molarity.TryParseUnit("lbmol/ft³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MolarityUnit.PoundMolePerCubicFoot, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(MolarityUnit unit)
        {
            var inBaseUnits = Molarity.From(1.0, Molarity.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(MolarityUnit unit)
        {
            var quantity = Molarity.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(MolarityUnit unit)
        {
            // See if there is a unit available that is not the base unit, fallback to base unit if it has only a single unit.
            var fromUnit = Molarity.Units.First(u => u != Molarity.BaseUnit);

            var quantity = Molarity.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(MolarityUnit unit)
        {
            var quantity = default(Molarity);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Molarity molepercubicmeter = Molarity.FromMolesPerCubicMeter(1);
            Assert.Equal(1, Molarity.FromCentimolesPerLiter(molepercubicmeter.CentimolesPerLiter).MolesPerCubicMeter);
            Assert.Equal(1, Molarity.FromDecimolesPerLiter(molepercubicmeter.DecimolesPerLiter).MolesPerCubicMeter);
            Assert.Equal(1, Molarity.FromFemtomolesPerLiter(molepercubicmeter.FemtomolesPerLiter).MolesPerCubicMeter);
            Assert.Equal(1, Molarity.FromKilomolesPerCubicMeter(molepercubicmeter.KilomolesPerCubicMeter).MolesPerCubicMeter);
            Assert.Equal(1, Molarity.FromMicromolesPerLiter(molepercubicmeter.MicromolesPerLiter).MolesPerCubicMeter);
            Assert.Equal(1, Molarity.FromMillimolesPerLiter(molepercubicmeter.MillimolesPerLiter).MolesPerCubicMeter);
            Assert.Equal(1, Molarity.FromMolesPerCubicMeter(molepercubicmeter.MolesPerCubicMeter).MolesPerCubicMeter);
            Assert.Equal(1, Molarity.FromMolesPerLiter(molepercubicmeter.MolesPerLiter).MolesPerCubicMeter);
            Assert.Equal(1, Molarity.FromNanomolesPerLiter(molepercubicmeter.NanomolesPerLiter).MolesPerCubicMeter);
            Assert.Equal(1, Molarity.FromPicomolesPerLiter(molepercubicmeter.PicomolesPerLiter).MolesPerCubicMeter);
            Assert.Equal(1, Molarity.FromPoundMolesPerCubicFoot(molepercubicmeter.PoundMolesPerCubicFoot).MolesPerCubicMeter);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Molarity v = Molarity.FromMolesPerCubicMeter(1);
            Assert.Equal(-1, -v.MolesPerCubicMeter);
            Assert.Equal(2, (Molarity.FromMolesPerCubicMeter(3) - v).MolesPerCubicMeter);
            Assert.Equal(2, (v + v).MolesPerCubicMeter);
            Assert.Equal(10, (v * 10).MolesPerCubicMeter);
            Assert.Equal(10, (10 * v).MolesPerCubicMeter);
            Assert.Equal(2, (Molarity.FromMolesPerCubicMeter(10) / 5).MolesPerCubicMeter);
            Assert.Equal(2, Molarity.FromMolesPerCubicMeter(10) / Molarity.FromMolesPerCubicMeter(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            Molarity oneMolePerCubicMeter = Molarity.FromMolesPerCubicMeter(1);
            Molarity twoMolesPerCubicMeter = Molarity.FromMolesPerCubicMeter(2);

            Assert.True(oneMolePerCubicMeter < twoMolesPerCubicMeter);
            Assert.True(oneMolePerCubicMeter <= twoMolesPerCubicMeter);
            Assert.True(twoMolesPerCubicMeter > oneMolePerCubicMeter);
            Assert.True(twoMolesPerCubicMeter >= oneMolePerCubicMeter);

            Assert.False(oneMolePerCubicMeter > twoMolesPerCubicMeter);
            Assert.False(oneMolePerCubicMeter >= twoMolesPerCubicMeter);
            Assert.False(twoMolesPerCubicMeter < oneMolePerCubicMeter);
            Assert.False(twoMolesPerCubicMeter <= oneMolePerCubicMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Molarity molepercubicmeter = Molarity.FromMolesPerCubicMeter(1);
            Assert.Equal(0, molepercubicmeter.CompareTo(molepercubicmeter));
            Assert.True(molepercubicmeter.CompareTo(Molarity.Zero) > 0);
            Assert.True(Molarity.Zero.CompareTo(molepercubicmeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Molarity molepercubicmeter = Molarity.FromMolesPerCubicMeter(1);
            Assert.Throws<ArgumentException>(() => molepercubicmeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Molarity molepercubicmeter = Molarity.FromMolesPerCubicMeter(1);
            Assert.Throws<ArgumentNullException>(() => molepercubicmeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, MolarityUnit.MolePerCubicMeter, 1, MolarityUnit.MolePerCubicMeter, true)]  // Same value and unit.
        [InlineData(1, MolarityUnit.MolePerCubicMeter, 2, MolarityUnit.MolePerCubicMeter, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, MolarityUnit unitA, double valueB, MolarityUnit unitB, bool expectEqual)
        {
            var a = new Molarity(valueA, unitA);
            var b = new Molarity(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Molarity.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_WithTolerance_IsImplemented()
        {
            var v = Molarity.FromMolesPerCubicMeter(1);
            Assert.True(v.Equals(Molarity.FromMolesPerCubicMeter(1), Molarity.FromMolesPerCubicMeter(0)));
            Assert.True(v.Equals(Molarity.FromMolesPerCubicMeter(1), Molarity.FromMolesPerCubicMeter(0.001m)));
            Assert.True(v.Equals(Molarity.FromMolesPerCubicMeter(0.9999), Molarity.FromMolesPerCubicMeter(0.001m)));
            Assert.False(v.Equals(Molarity.FromMolesPerCubicMeter(0.99), Molarity.FromMolesPerCubicMeter(0.001m)));
            Assert.False(v.Equals(Molarity.Zero, Molarity.FromMolesPerCubicMeter(0.001m)));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Molarity.FromMolesPerCubicMeter(1);
            var negativeTolerance = Molarity.FromMolesPerCubicMeter(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Molarity.FromMolesPerCubicMeter(1), negativeTolerance));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Molarity molepercubicmeter = Molarity.FromMolesPerCubicMeter(1);
            Assert.False(molepercubicmeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Molarity molepercubicmeter = Molarity.FromMolesPerCubicMeter(1);
            Assert.False(molepercubicmeter.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(MolarityUnit)).Cast<MolarityUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Molarity.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentCulture;
            Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 cmol/l", new Molarity(1, MolarityUnit.CentimolePerLiter).ToString());
                Assert.Equal("1 dmol/l", new Molarity(1, MolarityUnit.DecimolePerLiter).ToString());
                Assert.Equal("1 fmol/l", new Molarity(1, MolarityUnit.FemtomolePerLiter).ToString());
                Assert.Equal("1 kmol/m³", new Molarity(1, MolarityUnit.KilomolePerCubicMeter).ToString());
                Assert.Equal("1 µmol/l", new Molarity(1, MolarityUnit.MicromolePerLiter).ToString());
                Assert.Equal("1 mmol/l", new Molarity(1, MolarityUnit.MillimolePerLiter).ToString());
                Assert.Equal("1 mol/m³", new Molarity(1, MolarityUnit.MolePerCubicMeter).ToString());
                Assert.Equal("1 mol/l", new Molarity(1, MolarityUnit.MolePerLiter).ToString());
                Assert.Equal("1 nmol/l", new Molarity(1, MolarityUnit.NanomolePerLiter).ToString());
                Assert.Equal("1 pmol/l", new Molarity(1, MolarityUnit.PicomolePerLiter).ToString());
                Assert.Equal("1 lbmol/ft³", new Molarity(1, MolarityUnit.PoundMolePerCubicFoot).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cmol/l", new Molarity(1, MolarityUnit.CentimolePerLiter).ToString(swedishCulture));
            Assert.Equal("1 dmol/l", new Molarity(1, MolarityUnit.DecimolePerLiter).ToString(swedishCulture));
            Assert.Equal("1 fmol/l", new Molarity(1, MolarityUnit.FemtomolePerLiter).ToString(swedishCulture));
            Assert.Equal("1 kmol/m³", new Molarity(1, MolarityUnit.KilomolePerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 µmol/l", new Molarity(1, MolarityUnit.MicromolePerLiter).ToString(swedishCulture));
            Assert.Equal("1 mmol/l", new Molarity(1, MolarityUnit.MillimolePerLiter).ToString(swedishCulture));
            Assert.Equal("1 mol/m³", new Molarity(1, MolarityUnit.MolePerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 mol/l", new Molarity(1, MolarityUnit.MolePerLiter).ToString(swedishCulture));
            Assert.Equal("1 nmol/l", new Molarity(1, MolarityUnit.NanomolePerLiter).ToString(swedishCulture));
            Assert.Equal("1 pmol/l", new Molarity(1, MolarityUnit.PicomolePerLiter).ToString(swedishCulture));
            Assert.Equal("1 lbmol/ft³", new Molarity(1, MolarityUnit.PoundMolePerCubicFoot).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentCulture;
            try
            {
                CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 mol/m³", new Molarity(0.123456, MolarityUnit.MolePerCubicMeter).ToString("s1"));
                Assert.Equal("0.12 mol/m³", new Molarity(0.123456, MolarityUnit.MolePerCubicMeter).ToString("s2"));
                Assert.Equal("0.123 mol/m³", new Molarity(0.123456, MolarityUnit.MolePerCubicMeter).ToString("s3"));
                Assert.Equal("0.1235 mol/m³", new Molarity(0.123456, MolarityUnit.MolePerCubicMeter).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentCulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 mol/m³", new Molarity(0.123456, MolarityUnit.MolePerCubicMeter).ToString("s1", culture));
            Assert.Equal("0.12 mol/m³", new Molarity(0.123456, MolarityUnit.MolePerCubicMeter).ToString("s2", culture));
            Assert.Equal("0.123 mol/m³", new Molarity(0.123456, MolarityUnit.MolePerCubicMeter).ToString("s3", culture));
            Assert.Equal("0.1235 mol/m³", new Molarity(0.123456, MolarityUnit.MolePerCubicMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("g", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(Molarity)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(MolarityUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
            Assert.Equal(Molarity.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
            Assert.Equal(Molarity.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
            #if NET7_0_OR_GREATER
            var expected = HashCode.Combine(Molarity.Info.Name, quantity.MolesPerCubicMeter);
            #else
            var expected = new {Molarity.Info.Name, valueInBaseUnit = quantity.MolesPerCubicMeter}.GetHashCode();
            #endif
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Molarity.FromMolesPerCubicMeter(value);
            Assert.Equal(Molarity.FromMolesPerCubicMeter(-value), -quantity);
        }
    }
}
