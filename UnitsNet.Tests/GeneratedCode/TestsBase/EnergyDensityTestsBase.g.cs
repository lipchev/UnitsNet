//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of EnergyDensity.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class EnergyDensityTestsBase : QuantityTestsBase
    {
        protected abstract double GigajoulesPerCubicMeterInOneJoulePerCubicMeter { get; }
        protected abstract double GigawattHoursPerCubicMeterInOneJoulePerCubicMeter { get; }
        protected abstract double JoulesPerCubicMeterInOneJoulePerCubicMeter { get; }
        protected abstract double KilojoulesPerCubicMeterInOneJoulePerCubicMeter { get; }
        protected abstract double KilowattHoursPerCubicMeterInOneJoulePerCubicMeter { get; }
        protected abstract double MegajoulesPerCubicMeterInOneJoulePerCubicMeter { get; }
        protected abstract double MegawattHoursPerCubicMeterInOneJoulePerCubicMeter { get; }
        protected abstract double PetajoulesPerCubicMeterInOneJoulePerCubicMeter { get; }
        protected abstract double PetawattHoursPerCubicMeterInOneJoulePerCubicMeter { get; }
        protected abstract double TerajoulesPerCubicMeterInOneJoulePerCubicMeter { get; }
        protected abstract double TerawattHoursPerCubicMeterInOneJoulePerCubicMeter { get; }
        protected abstract double WattHoursPerCubicMeterInOneJoulePerCubicMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double GigajoulesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double GigawattHoursPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double JoulesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double KilojoulesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double KilowattHoursPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MegajoulesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MegawattHoursPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double PetajoulesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double PetawattHoursPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double TerajoulesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double TerawattHoursPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double WattHoursPerCubicMeterTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(EnergyDensityUnit unit)
        {
            return unit switch
            {
                EnergyDensityUnit.GigajoulePerCubicMeter => (GigajoulesPerCubicMeterInOneJoulePerCubicMeter, GigajoulesPerCubicMeterTolerance),
                EnergyDensityUnit.GigawattHourPerCubicMeter => (GigawattHoursPerCubicMeterInOneJoulePerCubicMeter, GigawattHoursPerCubicMeterTolerance),
                EnergyDensityUnit.JoulePerCubicMeter => (JoulesPerCubicMeterInOneJoulePerCubicMeter, JoulesPerCubicMeterTolerance),
                EnergyDensityUnit.KilojoulePerCubicMeter => (KilojoulesPerCubicMeterInOneJoulePerCubicMeter, KilojoulesPerCubicMeterTolerance),
                EnergyDensityUnit.KilowattHourPerCubicMeter => (KilowattHoursPerCubicMeterInOneJoulePerCubicMeter, KilowattHoursPerCubicMeterTolerance),
                EnergyDensityUnit.MegajoulePerCubicMeter => (MegajoulesPerCubicMeterInOneJoulePerCubicMeter, MegajoulesPerCubicMeterTolerance),
                EnergyDensityUnit.MegawattHourPerCubicMeter => (MegawattHoursPerCubicMeterInOneJoulePerCubicMeter, MegawattHoursPerCubicMeterTolerance),
                EnergyDensityUnit.PetajoulePerCubicMeter => (PetajoulesPerCubicMeterInOneJoulePerCubicMeter, PetajoulesPerCubicMeterTolerance),
                EnergyDensityUnit.PetawattHourPerCubicMeter => (PetawattHoursPerCubicMeterInOneJoulePerCubicMeter, PetawattHoursPerCubicMeterTolerance),
                EnergyDensityUnit.TerajoulePerCubicMeter => (TerajoulesPerCubicMeterInOneJoulePerCubicMeter, TerajoulesPerCubicMeterTolerance),
                EnergyDensityUnit.TerawattHourPerCubicMeter => (TerawattHoursPerCubicMeterInOneJoulePerCubicMeter, TerawattHoursPerCubicMeterTolerance),
                EnergyDensityUnit.WattHourPerCubicMeter => (WattHoursPerCubicMeterInOneJoulePerCubicMeter, WattHoursPerCubicMeterTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { EnergyDensityUnit.GigajoulePerCubicMeter },
            new object[] { EnergyDensityUnit.GigawattHourPerCubicMeter },
            new object[] { EnergyDensityUnit.JoulePerCubicMeter },
            new object[] { EnergyDensityUnit.KilojoulePerCubicMeter },
            new object[] { EnergyDensityUnit.KilowattHourPerCubicMeter },
            new object[] { EnergyDensityUnit.MegajoulePerCubicMeter },
            new object[] { EnergyDensityUnit.MegawattHourPerCubicMeter },
            new object[] { EnergyDensityUnit.PetajoulePerCubicMeter },
            new object[] { EnergyDensityUnit.PetawattHourPerCubicMeter },
            new object[] { EnergyDensityUnit.TerajoulePerCubicMeter },
            new object[] { EnergyDensityUnit.TerawattHourPerCubicMeter },
            new object[] { EnergyDensityUnit.WattHourPerCubicMeter },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new EnergyDensity();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(EnergyDensityUnit.JoulePerCubicMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new EnergyDensity(double.PositiveInfinity, EnergyDensityUnit.JoulePerCubicMeter));
            var exception2 = Record.Exception(() => new EnergyDensity(double.NegativeInfinity, EnergyDensityUnit.JoulePerCubicMeter));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new EnergyDensity(double.NaN, EnergyDensityUnit.JoulePerCubicMeter));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new EnergyDensity(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            if (SupportsSIUnitSystem)
            {
                var quantity = new EnergyDensity(value: 1, unitSystem: UnitSystem.SI);
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(() => new EnergyDensity(value: 1, unitSystem: UnitSystem.SI));
            }
        }

        [Fact]
        public void EnergyDensity_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new EnergyDensity(1, EnergyDensityUnit.JoulePerCubicMeter);

            QuantityInfo<EnergyDensityUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(EnergyDensity.Zero, quantityInfo.Zero);
            Assert.Equal("EnergyDensity", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<EnergyDensityUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void JoulePerCubicMeterToEnergyDensityUnits()
        {
            EnergyDensity joulepercubicmeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            AssertEx.EqualTolerance(GigajoulesPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.GigajoulesPerCubicMeter, GigajoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(GigawattHoursPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.GigawattHoursPerCubicMeter, GigawattHoursPerCubicMeterTolerance);
            AssertEx.EqualTolerance(JoulesPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.JoulesPerCubicMeter, JoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(KilojoulesPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.KilojoulesPerCubicMeter, KilojoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(KilowattHoursPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.KilowattHoursPerCubicMeter, KilowattHoursPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MegajoulesPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.MegajoulesPerCubicMeter, MegajoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MegawattHoursPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.MegawattHoursPerCubicMeter, MegawattHoursPerCubicMeterTolerance);
            AssertEx.EqualTolerance(PetajoulesPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.PetajoulesPerCubicMeter, PetajoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(PetawattHoursPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.PetawattHoursPerCubicMeter, PetawattHoursPerCubicMeterTolerance);
            AssertEx.EqualTolerance(TerajoulesPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.TerajoulesPerCubicMeter, TerajoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(TerawattHoursPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.TerawattHoursPerCubicMeter, TerawattHoursPerCubicMeterTolerance);
            AssertEx.EqualTolerance(WattHoursPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.WattHoursPerCubicMeter, WattHoursPerCubicMeterTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = EnergyDensity.From(1, EnergyDensityUnit.GigajoulePerCubicMeter);
            Assert.Equal(1, quantity00.GigajoulesPerCubicMeter);
            Assert.Equal(EnergyDensityUnit.GigajoulePerCubicMeter, quantity00.Unit);

            var quantity01 = EnergyDensity.From(1, EnergyDensityUnit.GigawattHourPerCubicMeter);
            Assert.Equal(1, quantity01.GigawattHoursPerCubicMeter);
            Assert.Equal(EnergyDensityUnit.GigawattHourPerCubicMeter, quantity01.Unit);

            var quantity02 = EnergyDensity.From(1, EnergyDensityUnit.JoulePerCubicMeter);
            Assert.Equal(1, quantity02.JoulesPerCubicMeter);
            Assert.Equal(EnergyDensityUnit.JoulePerCubicMeter, quantity02.Unit);

            var quantity03 = EnergyDensity.From(1, EnergyDensityUnit.KilojoulePerCubicMeter);
            Assert.Equal(1, quantity03.KilojoulesPerCubicMeter);
            Assert.Equal(EnergyDensityUnit.KilojoulePerCubicMeter, quantity03.Unit);

            var quantity04 = EnergyDensity.From(1, EnergyDensityUnit.KilowattHourPerCubicMeter);
            Assert.Equal(1, quantity04.KilowattHoursPerCubicMeter);
            Assert.Equal(EnergyDensityUnit.KilowattHourPerCubicMeter, quantity04.Unit);

            var quantity05 = EnergyDensity.From(1, EnergyDensityUnit.MegajoulePerCubicMeter);
            Assert.Equal(1, quantity05.MegajoulesPerCubicMeter);
            Assert.Equal(EnergyDensityUnit.MegajoulePerCubicMeter, quantity05.Unit);

            var quantity06 = EnergyDensity.From(1, EnergyDensityUnit.MegawattHourPerCubicMeter);
            Assert.Equal(1, quantity06.MegawattHoursPerCubicMeter);
            Assert.Equal(EnergyDensityUnit.MegawattHourPerCubicMeter, quantity06.Unit);

            var quantity07 = EnergyDensity.From(1, EnergyDensityUnit.PetajoulePerCubicMeter);
            Assert.Equal(1, quantity07.PetajoulesPerCubicMeter);
            Assert.Equal(EnergyDensityUnit.PetajoulePerCubicMeter, quantity07.Unit);

            var quantity08 = EnergyDensity.From(1, EnergyDensityUnit.PetawattHourPerCubicMeter);
            Assert.Equal(1, quantity08.PetawattHoursPerCubicMeter);
            Assert.Equal(EnergyDensityUnit.PetawattHourPerCubicMeter, quantity08.Unit);

            var quantity09 = EnergyDensity.From(1, EnergyDensityUnit.TerajoulePerCubicMeter);
            Assert.Equal(1, quantity09.TerajoulesPerCubicMeter);
            Assert.Equal(EnergyDensityUnit.TerajoulePerCubicMeter, quantity09.Unit);

            var quantity10 = EnergyDensity.From(1, EnergyDensityUnit.TerawattHourPerCubicMeter);
            Assert.Equal(1, quantity10.TerawattHoursPerCubicMeter);
            Assert.Equal(EnergyDensityUnit.TerawattHourPerCubicMeter, quantity10.Unit);

            var quantity11 = EnergyDensity.From(1, EnergyDensityUnit.WattHourPerCubicMeter);
            Assert.Equal(1, quantity11.WattHoursPerCubicMeter);
            Assert.Equal(EnergyDensityUnit.WattHourPerCubicMeter, quantity11.Unit);

        }

        [Fact]
        public void FromJoulesPerCubicMeter_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => EnergyDensity.FromJoulesPerCubicMeter(double.PositiveInfinity));
            var exception2 = Record.Exception(() => EnergyDensity.FromJoulesPerCubicMeter(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromJoulesPerCubicMeter_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => EnergyDensity.FromJoulesPerCubicMeter(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var joulepercubicmeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            AssertEx.EqualTolerance(GigajoulesPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.As(EnergyDensityUnit.GigajoulePerCubicMeter), GigajoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(GigawattHoursPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.As(EnergyDensityUnit.GigawattHourPerCubicMeter), GigawattHoursPerCubicMeterTolerance);
            AssertEx.EqualTolerance(JoulesPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.As(EnergyDensityUnit.JoulePerCubicMeter), JoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(KilojoulesPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.As(EnergyDensityUnit.KilojoulePerCubicMeter), KilojoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(KilowattHoursPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.As(EnergyDensityUnit.KilowattHourPerCubicMeter), KilowattHoursPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MegajoulesPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.As(EnergyDensityUnit.MegajoulePerCubicMeter), MegajoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MegawattHoursPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.As(EnergyDensityUnit.MegawattHourPerCubicMeter), MegawattHoursPerCubicMeterTolerance);
            AssertEx.EqualTolerance(PetajoulesPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.As(EnergyDensityUnit.PetajoulePerCubicMeter), PetajoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(PetawattHoursPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.As(EnergyDensityUnit.PetawattHourPerCubicMeter), PetawattHoursPerCubicMeterTolerance);
            AssertEx.EqualTolerance(TerajoulesPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.As(EnergyDensityUnit.TerajoulePerCubicMeter), TerajoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(TerawattHoursPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.As(EnergyDensityUnit.TerawattHourPerCubicMeter), TerawattHoursPerCubicMeterTolerance);
            AssertEx.EqualTolerance(WattHoursPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.As(EnergyDensityUnit.WattHourPerCubicMeter), WattHoursPerCubicMeterTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new EnergyDensity(value: 1, unit: EnergyDensity.BaseUnit);
            if (SupportsSIUnitSystem)
            {
                Assert.Equal(1, quantity.As(UnitSystem.SI));
            }
            else
            {
                Assert.Throws<ArgumentException>(() => quantity.As(UnitSystem.SI));
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = EnergyDensity.Parse("1 GJ/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.GigajoulesPerCubicMeter);
                Assert.Equal(EnergyDensityUnit.GigajoulePerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyDensity.Parse("1 GWh/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.GigawattHoursPerCubicMeter);
                Assert.Equal(EnergyDensityUnit.GigawattHourPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyDensity.Parse("1 J/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.JoulesPerCubicMeter);
                Assert.Equal(EnergyDensityUnit.JoulePerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyDensity.Parse("1 kJ/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilojoulesPerCubicMeter);
                Assert.Equal(EnergyDensityUnit.KilojoulePerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyDensity.Parse("1 kWh/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilowattHoursPerCubicMeter);
                Assert.Equal(EnergyDensityUnit.KilowattHourPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyDensity.Parse("1 MJ/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MegajoulesPerCubicMeter);
                Assert.Equal(EnergyDensityUnit.MegajoulePerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyDensity.Parse("1 MWh/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MegawattHoursPerCubicMeter);
                Assert.Equal(EnergyDensityUnit.MegawattHourPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyDensity.Parse("1 PJ/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PetajoulesPerCubicMeter);
                Assert.Equal(EnergyDensityUnit.PetajoulePerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyDensity.Parse("1 PWh/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PetawattHoursPerCubicMeter);
                Assert.Equal(EnergyDensityUnit.PetawattHourPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyDensity.Parse("1 TJ/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.TerajoulesPerCubicMeter);
                Assert.Equal(EnergyDensityUnit.TerajoulePerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyDensity.Parse("1 TWh/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.TerawattHoursPerCubicMeter);
                Assert.Equal(EnergyDensityUnit.TerawattHourPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyDensity.Parse("1 Wh/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.WattHoursPerCubicMeter);
                Assert.Equal(EnergyDensityUnit.WattHourPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(EnergyDensity.TryParse("1 GJ/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.GigajoulesPerCubicMeter);
                Assert.Equal(EnergyDensityUnit.GigajoulePerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(EnergyDensity.TryParse("1 GWh/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.GigawattHoursPerCubicMeter);
                Assert.Equal(EnergyDensityUnit.GigawattHourPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(EnergyDensity.TryParse("1 J/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.JoulesPerCubicMeter);
                Assert.Equal(EnergyDensityUnit.JoulePerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(EnergyDensity.TryParse("1 kJ/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilojoulesPerCubicMeter);
                Assert.Equal(EnergyDensityUnit.KilojoulePerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(EnergyDensity.TryParse("1 kWh/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilowattHoursPerCubicMeter);
                Assert.Equal(EnergyDensityUnit.KilowattHourPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(EnergyDensity.TryParse("1 MJ/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MegajoulesPerCubicMeter);
                Assert.Equal(EnergyDensityUnit.MegajoulePerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(EnergyDensity.TryParse("1 MWh/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MegawattHoursPerCubicMeter);
                Assert.Equal(EnergyDensityUnit.MegawattHourPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(EnergyDensity.TryParse("1 PJ/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PetajoulesPerCubicMeter);
                Assert.Equal(EnergyDensityUnit.PetajoulePerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(EnergyDensity.TryParse("1 PWh/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PetawattHoursPerCubicMeter);
                Assert.Equal(EnergyDensityUnit.PetawattHourPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(EnergyDensity.TryParse("1 TJ/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.TerajoulesPerCubicMeter);
                Assert.Equal(EnergyDensityUnit.TerajoulePerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(EnergyDensity.TryParse("1 TWh/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.TerawattHoursPerCubicMeter);
                Assert.Equal(EnergyDensityUnit.TerawattHourPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(EnergyDensity.TryParse("1 Wh/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.WattHoursPerCubicMeter);
                Assert.Equal(EnergyDensityUnit.WattHourPerCubicMeter, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = EnergyDensity.ParseUnit("GJ/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyDensityUnit.GigajoulePerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyDensity.ParseUnit("GWh/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyDensityUnit.GigawattHourPerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyDensity.ParseUnit("J/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyDensityUnit.JoulePerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyDensity.ParseUnit("kJ/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyDensityUnit.KilojoulePerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyDensity.ParseUnit("kWh/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyDensityUnit.KilowattHourPerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyDensity.ParseUnit("MJ/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyDensityUnit.MegajoulePerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyDensity.ParseUnit("MWh/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyDensityUnit.MegawattHourPerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyDensity.ParseUnit("PJ/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyDensityUnit.PetajoulePerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyDensity.ParseUnit("PWh/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyDensityUnit.PetawattHourPerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyDensity.ParseUnit("TJ/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyDensityUnit.TerajoulePerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyDensity.ParseUnit("TWh/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyDensityUnit.TerawattHourPerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyDensity.ParseUnit("Wh/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyDensityUnit.WattHourPerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(EnergyDensity.TryParseUnit("GJ/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyDensityUnit.GigajoulePerCubicMeter, parsedUnit);
            }

            {
                Assert.True(EnergyDensity.TryParseUnit("GWh/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyDensityUnit.GigawattHourPerCubicMeter, parsedUnit);
            }

            {
                Assert.True(EnergyDensity.TryParseUnit("J/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyDensityUnit.JoulePerCubicMeter, parsedUnit);
            }

            {
                Assert.True(EnergyDensity.TryParseUnit("kJ/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyDensityUnit.KilojoulePerCubicMeter, parsedUnit);
            }

            {
                Assert.True(EnergyDensity.TryParseUnit("kWh/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyDensityUnit.KilowattHourPerCubicMeter, parsedUnit);
            }

            {
                Assert.True(EnergyDensity.TryParseUnit("MJ/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyDensityUnit.MegajoulePerCubicMeter, parsedUnit);
            }

            {
                Assert.True(EnergyDensity.TryParseUnit("MWh/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyDensityUnit.MegawattHourPerCubicMeter, parsedUnit);
            }

            {
                Assert.True(EnergyDensity.TryParseUnit("PJ/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyDensityUnit.PetajoulePerCubicMeter, parsedUnit);
            }

            {
                Assert.True(EnergyDensity.TryParseUnit("PWh/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyDensityUnit.PetawattHourPerCubicMeter, parsedUnit);
            }

            {
                Assert.True(EnergyDensity.TryParseUnit("TJ/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyDensityUnit.TerajoulePerCubicMeter, parsedUnit);
            }

            {
                Assert.True(EnergyDensity.TryParseUnit("TWh/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyDensityUnit.TerawattHourPerCubicMeter, parsedUnit);
            }

            {
                Assert.True(EnergyDensity.TryParseUnit("Wh/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyDensityUnit.WattHourPerCubicMeter, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(EnergyDensityUnit unit)
        {
            var inBaseUnits = EnergyDensity.From(1.0, EnergyDensity.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(EnergyDensityUnit unit)
        {
            var quantity = EnergyDensity.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(EnergyDensityUnit unit)
        {
            // See if there is a unit available that is not the base unit, fallback to base unit if it has only a single unit.
            var fromUnit = EnergyDensity.Units.First(u => u != EnergyDensity.BaseUnit);

            var quantity = EnergyDensity.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(EnergyDensityUnit unit)
        {
            var quantity = default(EnergyDensity);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            EnergyDensity joulepercubicmeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            Assert.Equal(1, EnergyDensity.FromGigajoulesPerCubicMeter(joulepercubicmeter.GigajoulesPerCubicMeter).JoulesPerCubicMeter);
            Assert.Equal(1, EnergyDensity.FromGigawattHoursPerCubicMeter(joulepercubicmeter.GigawattHoursPerCubicMeter).JoulesPerCubicMeter);
            Assert.Equal(1, EnergyDensity.FromJoulesPerCubicMeter(joulepercubicmeter.JoulesPerCubicMeter).JoulesPerCubicMeter);
            Assert.Equal(1, EnergyDensity.FromKilojoulesPerCubicMeter(joulepercubicmeter.KilojoulesPerCubicMeter).JoulesPerCubicMeter);
            Assert.Equal(1, EnergyDensity.FromKilowattHoursPerCubicMeter(joulepercubicmeter.KilowattHoursPerCubicMeter).JoulesPerCubicMeter);
            Assert.Equal(1, EnergyDensity.FromMegajoulesPerCubicMeter(joulepercubicmeter.MegajoulesPerCubicMeter).JoulesPerCubicMeter);
            Assert.Equal(1, EnergyDensity.FromMegawattHoursPerCubicMeter(joulepercubicmeter.MegawattHoursPerCubicMeter).JoulesPerCubicMeter);
            Assert.Equal(1, EnergyDensity.FromPetajoulesPerCubicMeter(joulepercubicmeter.PetajoulesPerCubicMeter).JoulesPerCubicMeter);
            Assert.Equal(1, EnergyDensity.FromPetawattHoursPerCubicMeter(joulepercubicmeter.PetawattHoursPerCubicMeter).JoulesPerCubicMeter);
            Assert.Equal(1, EnergyDensity.FromTerajoulesPerCubicMeter(joulepercubicmeter.TerajoulesPerCubicMeter).JoulesPerCubicMeter);
            Assert.Equal(1, EnergyDensity.FromTerawattHoursPerCubicMeter(joulepercubicmeter.TerawattHoursPerCubicMeter).JoulesPerCubicMeter);
            Assert.Equal(1, EnergyDensity.FromWattHoursPerCubicMeter(joulepercubicmeter.WattHoursPerCubicMeter).JoulesPerCubicMeter);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            EnergyDensity v = EnergyDensity.FromJoulesPerCubicMeter(1);
            Assert.Equal(-1, -v.JoulesPerCubicMeter);
            Assert.Equal(2, (EnergyDensity.FromJoulesPerCubicMeter(3) - v).JoulesPerCubicMeter);
            Assert.Equal(2, (v + v).JoulesPerCubicMeter);
            Assert.Equal(10, (v * 10).JoulesPerCubicMeter);
            Assert.Equal(10, (10 * v).JoulesPerCubicMeter);
            Assert.Equal(2, (EnergyDensity.FromJoulesPerCubicMeter(10) / 5).JoulesPerCubicMeter);
            Assert.Equal(2, EnergyDensity.FromJoulesPerCubicMeter(10) / EnergyDensity.FromJoulesPerCubicMeter(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            EnergyDensity oneJoulePerCubicMeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            EnergyDensity twoJoulesPerCubicMeter = EnergyDensity.FromJoulesPerCubicMeter(2);

            Assert.True(oneJoulePerCubicMeter < twoJoulesPerCubicMeter);
            Assert.True(oneJoulePerCubicMeter <= twoJoulesPerCubicMeter);
            Assert.True(twoJoulesPerCubicMeter > oneJoulePerCubicMeter);
            Assert.True(twoJoulesPerCubicMeter >= oneJoulePerCubicMeter);

            Assert.False(oneJoulePerCubicMeter > twoJoulesPerCubicMeter);
            Assert.False(oneJoulePerCubicMeter >= twoJoulesPerCubicMeter);
            Assert.False(twoJoulesPerCubicMeter < oneJoulePerCubicMeter);
            Assert.False(twoJoulesPerCubicMeter <= oneJoulePerCubicMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            EnergyDensity joulepercubicmeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            Assert.Equal(0, joulepercubicmeter.CompareTo(joulepercubicmeter));
            Assert.True(joulepercubicmeter.CompareTo(EnergyDensity.Zero) > 0);
            Assert.True(EnergyDensity.Zero.CompareTo(joulepercubicmeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            EnergyDensity joulepercubicmeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            Assert.Throws<ArgumentException>(() => joulepercubicmeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            EnergyDensity joulepercubicmeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            Assert.Throws<ArgumentNullException>(() => joulepercubicmeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, EnergyDensityUnit.JoulePerCubicMeter, 1, EnergyDensityUnit.JoulePerCubicMeter, true)]  // Same value and unit.
        [InlineData(1, EnergyDensityUnit.JoulePerCubicMeter, 2, EnergyDensityUnit.JoulePerCubicMeter, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, EnergyDensityUnit unitA, double valueB, EnergyDensityUnit unitB, bool expectEqual)
        {
            var a = new EnergyDensity(valueA, unitA);
            var b = new EnergyDensity(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = EnergyDensity.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_WithTolerance_IsImplemented()
        {
            var v = EnergyDensity.FromJoulesPerCubicMeter(1);
            Assert.True(v.Equals(EnergyDensity.FromJoulesPerCubicMeter(1), EnergyDensity.FromJoulesPerCubicMeter(0)));
            Assert.True(v.Equals(EnergyDensity.FromJoulesPerCubicMeter(1), EnergyDensity.FromJoulesPerCubicMeter(0.001m)));
            Assert.True(v.Equals(EnergyDensity.FromJoulesPerCubicMeter(0.9999), EnergyDensity.FromJoulesPerCubicMeter(0.001m)));
            Assert.False(v.Equals(EnergyDensity.FromJoulesPerCubicMeter(0.99), EnergyDensity.FromJoulesPerCubicMeter(0.001m)));
            Assert.False(v.Equals(EnergyDensity.Zero, EnergyDensity.FromJoulesPerCubicMeter(0.001m)));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = EnergyDensity.FromJoulesPerCubicMeter(1);
            var negativeTolerance = EnergyDensity.FromJoulesPerCubicMeter(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(EnergyDensity.FromJoulesPerCubicMeter(1), negativeTolerance));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            EnergyDensity joulepercubicmeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            Assert.False(joulepercubicmeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            EnergyDensity joulepercubicmeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            Assert.False(joulepercubicmeter.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(EnergyDensityUnit)).Cast<EnergyDensityUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(EnergyDensity.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentCulture;
            Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 GJ/m³", new EnergyDensity(1, EnergyDensityUnit.GigajoulePerCubicMeter).ToString());
                Assert.Equal("1 GWh/m³", new EnergyDensity(1, EnergyDensityUnit.GigawattHourPerCubicMeter).ToString());
                Assert.Equal("1 J/m³", new EnergyDensity(1, EnergyDensityUnit.JoulePerCubicMeter).ToString());
                Assert.Equal("1 kJ/m³", new EnergyDensity(1, EnergyDensityUnit.KilojoulePerCubicMeter).ToString());
                Assert.Equal("1 kWh/m³", new EnergyDensity(1, EnergyDensityUnit.KilowattHourPerCubicMeter).ToString());
                Assert.Equal("1 MJ/m³", new EnergyDensity(1, EnergyDensityUnit.MegajoulePerCubicMeter).ToString());
                Assert.Equal("1 MWh/m³", new EnergyDensity(1, EnergyDensityUnit.MegawattHourPerCubicMeter).ToString());
                Assert.Equal("1 PJ/m³", new EnergyDensity(1, EnergyDensityUnit.PetajoulePerCubicMeter).ToString());
                Assert.Equal("1 PWh/m³", new EnergyDensity(1, EnergyDensityUnit.PetawattHourPerCubicMeter).ToString());
                Assert.Equal("1 TJ/m³", new EnergyDensity(1, EnergyDensityUnit.TerajoulePerCubicMeter).ToString());
                Assert.Equal("1 TWh/m³", new EnergyDensity(1, EnergyDensityUnit.TerawattHourPerCubicMeter).ToString());
                Assert.Equal("1 Wh/m³", new EnergyDensity(1, EnergyDensityUnit.WattHourPerCubicMeter).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 GJ/m³", new EnergyDensity(1, EnergyDensityUnit.GigajoulePerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 GWh/m³", new EnergyDensity(1, EnergyDensityUnit.GigawattHourPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 J/m³", new EnergyDensity(1, EnergyDensityUnit.JoulePerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 kJ/m³", new EnergyDensity(1, EnergyDensityUnit.KilojoulePerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 kWh/m³", new EnergyDensity(1, EnergyDensityUnit.KilowattHourPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 MJ/m³", new EnergyDensity(1, EnergyDensityUnit.MegajoulePerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 MWh/m³", new EnergyDensity(1, EnergyDensityUnit.MegawattHourPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 PJ/m³", new EnergyDensity(1, EnergyDensityUnit.PetajoulePerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 PWh/m³", new EnergyDensity(1, EnergyDensityUnit.PetawattHourPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 TJ/m³", new EnergyDensity(1, EnergyDensityUnit.TerajoulePerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 TWh/m³", new EnergyDensity(1, EnergyDensityUnit.TerawattHourPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 Wh/m³", new EnergyDensity(1, EnergyDensityUnit.WattHourPerCubicMeter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentCulture;
            try
            {
                CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 J/m³", new EnergyDensity(0.123456, EnergyDensityUnit.JoulePerCubicMeter).ToString("s1"));
                Assert.Equal("0.12 J/m³", new EnergyDensity(0.123456, EnergyDensityUnit.JoulePerCubicMeter).ToString("s2"));
                Assert.Equal("0.123 J/m³", new EnergyDensity(0.123456, EnergyDensityUnit.JoulePerCubicMeter).ToString("s3"));
                Assert.Equal("0.1235 J/m³", new EnergyDensity(0.123456, EnergyDensityUnit.JoulePerCubicMeter).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentCulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 J/m³", new EnergyDensity(0.123456, EnergyDensityUnit.JoulePerCubicMeter).ToString("s1", culture));
            Assert.Equal("0.12 J/m³", new EnergyDensity(0.123456, EnergyDensityUnit.JoulePerCubicMeter).ToString("s2", culture));
            Assert.Equal("0.123 J/m³", new EnergyDensity(0.123456, EnergyDensityUnit.JoulePerCubicMeter).ToString("s3", culture));
            Assert.Equal("0.1235 J/m³", new EnergyDensity(0.123456, EnergyDensityUnit.JoulePerCubicMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("g", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(EnergyDensity)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(EnergyDensityUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal(EnergyDensity.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal(EnergyDensity.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            #if NET7_0_OR_GREATER
            var expected = HashCode.Combine(EnergyDensity.Info.Name, quantity.JoulesPerCubicMeter);
            #else
            var expected = new {EnergyDensity.Info.Name, valueInBaseUnit = quantity.JoulesPerCubicMeter}.GetHashCode();
            #endif
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(value);
            Assert.Equal(EnergyDensity.FromJoulesPerCubicMeter(-value), -quantity);
        }
    }
}
