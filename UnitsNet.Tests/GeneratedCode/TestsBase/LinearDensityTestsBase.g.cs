//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of LinearDensity.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class LinearDensityTestsBase : QuantityTestsBase
    {
        protected abstract double GramsPerCentimeterInOneKilogramPerMeter { get; }
        protected abstract double GramsPerFootInOneKilogramPerMeter { get; }
        protected abstract double GramsPerMeterInOneKilogramPerMeter { get; }
        protected abstract double GramsPerMillimeterInOneKilogramPerMeter { get; }
        protected abstract double KilogramsPerCentimeterInOneKilogramPerMeter { get; }
        protected abstract double KilogramsPerFootInOneKilogramPerMeter { get; }
        protected abstract double KilogramsPerMeterInOneKilogramPerMeter { get; }
        protected abstract double KilogramsPerMillimeterInOneKilogramPerMeter { get; }
        protected abstract double MicrogramsPerCentimeterInOneKilogramPerMeter { get; }
        protected abstract double MicrogramsPerFootInOneKilogramPerMeter { get; }
        protected abstract double MicrogramsPerMeterInOneKilogramPerMeter { get; }
        protected abstract double MicrogramsPerMillimeterInOneKilogramPerMeter { get; }
        protected abstract double MilligramsPerCentimeterInOneKilogramPerMeter { get; }
        protected abstract double MilligramsPerFootInOneKilogramPerMeter { get; }
        protected abstract double MilligramsPerMeterInOneKilogramPerMeter { get; }
        protected abstract double MilligramsPerMillimeterInOneKilogramPerMeter { get; }
        protected abstract double PoundsPerFootInOneKilogramPerMeter { get; }
        protected abstract double PoundsPerInchInOneKilogramPerMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double GramsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerFootTolerance { get { return 1e-5; } }
        protected virtual double GramsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerFootTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerFootTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerFootTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerFootTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerInchTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(LinearDensityUnit unit)
        {
            return unit switch
            {
                LinearDensityUnit.GramPerCentimeter => (GramsPerCentimeterInOneKilogramPerMeter, GramsPerCentimeterTolerance),
                LinearDensityUnit.GramPerFoot => (GramsPerFootInOneKilogramPerMeter, GramsPerFootTolerance),
                LinearDensityUnit.GramPerMeter => (GramsPerMeterInOneKilogramPerMeter, GramsPerMeterTolerance),
                LinearDensityUnit.GramPerMillimeter => (GramsPerMillimeterInOneKilogramPerMeter, GramsPerMillimeterTolerance),
                LinearDensityUnit.KilogramPerCentimeter => (KilogramsPerCentimeterInOneKilogramPerMeter, KilogramsPerCentimeterTolerance),
                LinearDensityUnit.KilogramPerFoot => (KilogramsPerFootInOneKilogramPerMeter, KilogramsPerFootTolerance),
                LinearDensityUnit.KilogramPerMeter => (KilogramsPerMeterInOneKilogramPerMeter, KilogramsPerMeterTolerance),
                LinearDensityUnit.KilogramPerMillimeter => (KilogramsPerMillimeterInOneKilogramPerMeter, KilogramsPerMillimeterTolerance),
                LinearDensityUnit.MicrogramPerCentimeter => (MicrogramsPerCentimeterInOneKilogramPerMeter, MicrogramsPerCentimeterTolerance),
                LinearDensityUnit.MicrogramPerFoot => (MicrogramsPerFootInOneKilogramPerMeter, MicrogramsPerFootTolerance),
                LinearDensityUnit.MicrogramPerMeter => (MicrogramsPerMeterInOneKilogramPerMeter, MicrogramsPerMeterTolerance),
                LinearDensityUnit.MicrogramPerMillimeter => (MicrogramsPerMillimeterInOneKilogramPerMeter, MicrogramsPerMillimeterTolerance),
                LinearDensityUnit.MilligramPerCentimeter => (MilligramsPerCentimeterInOneKilogramPerMeter, MilligramsPerCentimeterTolerance),
                LinearDensityUnit.MilligramPerFoot => (MilligramsPerFootInOneKilogramPerMeter, MilligramsPerFootTolerance),
                LinearDensityUnit.MilligramPerMeter => (MilligramsPerMeterInOneKilogramPerMeter, MilligramsPerMeterTolerance),
                LinearDensityUnit.MilligramPerMillimeter => (MilligramsPerMillimeterInOneKilogramPerMeter, MilligramsPerMillimeterTolerance),
                LinearDensityUnit.PoundPerFoot => (PoundsPerFootInOneKilogramPerMeter, PoundsPerFootTolerance),
                LinearDensityUnit.PoundPerInch => (PoundsPerInchInOneKilogramPerMeter, PoundsPerInchTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { LinearDensityUnit.GramPerCentimeter },
            new object[] { LinearDensityUnit.GramPerFoot },
            new object[] { LinearDensityUnit.GramPerMeter },
            new object[] { LinearDensityUnit.GramPerMillimeter },
            new object[] { LinearDensityUnit.KilogramPerCentimeter },
            new object[] { LinearDensityUnit.KilogramPerFoot },
            new object[] { LinearDensityUnit.KilogramPerMeter },
            new object[] { LinearDensityUnit.KilogramPerMillimeter },
            new object[] { LinearDensityUnit.MicrogramPerCentimeter },
            new object[] { LinearDensityUnit.MicrogramPerFoot },
            new object[] { LinearDensityUnit.MicrogramPerMeter },
            new object[] { LinearDensityUnit.MicrogramPerMillimeter },
            new object[] { LinearDensityUnit.MilligramPerCentimeter },
            new object[] { LinearDensityUnit.MilligramPerFoot },
            new object[] { LinearDensityUnit.MilligramPerMeter },
            new object[] { LinearDensityUnit.MilligramPerMillimeter },
            new object[] { LinearDensityUnit.PoundPerFoot },
            new object[] { LinearDensityUnit.PoundPerInch },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new LinearDensity();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(LinearDensityUnit.KilogramPerMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new LinearDensity(double.PositiveInfinity, LinearDensityUnit.KilogramPerMeter));
            var exception2 = Record.Exception(() => new LinearDensity(double.NegativeInfinity, LinearDensityUnit.KilogramPerMeter));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new LinearDensity(double.NaN, LinearDensityUnit.KilogramPerMeter));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new LinearDensity(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            if (SupportsSIUnitSystem)
            {
                var quantity = new LinearDensity(value: 1, unitSystem: UnitSystem.SI);
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(() => new LinearDensity(value: 1, unitSystem: UnitSystem.SI));
            }
        }

        [Fact]
        public void LinearDensity_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new LinearDensity(1, LinearDensityUnit.KilogramPerMeter);

            QuantityInfo<LinearDensityUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(LinearDensity.Zero, quantityInfo.Zero);
            Assert.Equal("LinearDensity", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<LinearDensityUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void KilogramPerMeterToLinearDensityUnits()
        {
            LinearDensity kilogrampermeter = LinearDensity.FromKilogramsPerMeter(1);
            AssertEx.EqualTolerance(GramsPerCentimeterInOneKilogramPerMeter, kilogrampermeter.GramsPerCentimeter, GramsPerCentimeterTolerance);
            AssertEx.EqualTolerance(GramsPerFootInOneKilogramPerMeter, kilogrampermeter.GramsPerFoot, GramsPerFootTolerance);
            AssertEx.EqualTolerance(GramsPerMeterInOneKilogramPerMeter, kilogrampermeter.GramsPerMeter, GramsPerMeterTolerance);
            AssertEx.EqualTolerance(GramsPerMillimeterInOneKilogramPerMeter, kilogrampermeter.GramsPerMillimeter, GramsPerMillimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCentimeterInOneKilogramPerMeter, kilogrampermeter.KilogramsPerCentimeter, KilogramsPerCentimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerFootInOneKilogramPerMeter, kilogrampermeter.KilogramsPerFoot, KilogramsPerFootTolerance);
            AssertEx.EqualTolerance(KilogramsPerMeterInOneKilogramPerMeter, kilogrampermeter.KilogramsPerMeter, KilogramsPerMeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerMillimeterInOneKilogramPerMeter, kilogrampermeter.KilogramsPerMillimeter, KilogramsPerMillimeterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerCentimeterInOneKilogramPerMeter, kilogrampermeter.MicrogramsPerCentimeter, MicrogramsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerFootInOneKilogramPerMeter, kilogrampermeter.MicrogramsPerFoot, MicrogramsPerFootTolerance);
            AssertEx.EqualTolerance(MicrogramsPerMeterInOneKilogramPerMeter, kilogrampermeter.MicrogramsPerMeter, MicrogramsPerMeterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerMillimeterInOneKilogramPerMeter, kilogrampermeter.MicrogramsPerMillimeter, MicrogramsPerMillimeterTolerance);
            AssertEx.EqualTolerance(MilligramsPerCentimeterInOneKilogramPerMeter, kilogrampermeter.MilligramsPerCentimeter, MilligramsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MilligramsPerFootInOneKilogramPerMeter, kilogrampermeter.MilligramsPerFoot, MilligramsPerFootTolerance);
            AssertEx.EqualTolerance(MilligramsPerMeterInOneKilogramPerMeter, kilogrampermeter.MilligramsPerMeter, MilligramsPerMeterTolerance);
            AssertEx.EqualTolerance(MilligramsPerMillimeterInOneKilogramPerMeter, kilogrampermeter.MilligramsPerMillimeter, MilligramsPerMillimeterTolerance);
            AssertEx.EqualTolerance(PoundsPerFootInOneKilogramPerMeter, kilogrampermeter.PoundsPerFoot, PoundsPerFootTolerance);
            AssertEx.EqualTolerance(PoundsPerInchInOneKilogramPerMeter, kilogrampermeter.PoundsPerInch, PoundsPerInchTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = LinearDensity.From(1, LinearDensityUnit.GramPerCentimeter);
            Assert.Equal(1, quantity00.GramsPerCentimeter);
            Assert.Equal(LinearDensityUnit.GramPerCentimeter, quantity00.Unit);

            var quantity01 = LinearDensity.From(1, LinearDensityUnit.GramPerFoot);
            Assert.Equal(1, quantity01.GramsPerFoot);
            Assert.Equal(LinearDensityUnit.GramPerFoot, quantity01.Unit);

            var quantity02 = LinearDensity.From(1, LinearDensityUnit.GramPerMeter);
            Assert.Equal(1, quantity02.GramsPerMeter);
            Assert.Equal(LinearDensityUnit.GramPerMeter, quantity02.Unit);

            var quantity03 = LinearDensity.From(1, LinearDensityUnit.GramPerMillimeter);
            Assert.Equal(1, quantity03.GramsPerMillimeter);
            Assert.Equal(LinearDensityUnit.GramPerMillimeter, quantity03.Unit);

            var quantity04 = LinearDensity.From(1, LinearDensityUnit.KilogramPerCentimeter);
            Assert.Equal(1, quantity04.KilogramsPerCentimeter);
            Assert.Equal(LinearDensityUnit.KilogramPerCentimeter, quantity04.Unit);

            var quantity05 = LinearDensity.From(1, LinearDensityUnit.KilogramPerFoot);
            Assert.Equal(1, quantity05.KilogramsPerFoot);
            Assert.Equal(LinearDensityUnit.KilogramPerFoot, quantity05.Unit);

            var quantity06 = LinearDensity.From(1, LinearDensityUnit.KilogramPerMeter);
            Assert.Equal(1, quantity06.KilogramsPerMeter);
            Assert.Equal(LinearDensityUnit.KilogramPerMeter, quantity06.Unit);

            var quantity07 = LinearDensity.From(1, LinearDensityUnit.KilogramPerMillimeter);
            Assert.Equal(1, quantity07.KilogramsPerMillimeter);
            Assert.Equal(LinearDensityUnit.KilogramPerMillimeter, quantity07.Unit);

            var quantity08 = LinearDensity.From(1, LinearDensityUnit.MicrogramPerCentimeter);
            Assert.Equal(1, quantity08.MicrogramsPerCentimeter);
            Assert.Equal(LinearDensityUnit.MicrogramPerCentimeter, quantity08.Unit);

            var quantity09 = LinearDensity.From(1, LinearDensityUnit.MicrogramPerFoot);
            Assert.Equal(1, quantity09.MicrogramsPerFoot);
            Assert.Equal(LinearDensityUnit.MicrogramPerFoot, quantity09.Unit);

            var quantity10 = LinearDensity.From(1, LinearDensityUnit.MicrogramPerMeter);
            Assert.Equal(1, quantity10.MicrogramsPerMeter);
            Assert.Equal(LinearDensityUnit.MicrogramPerMeter, quantity10.Unit);

            var quantity11 = LinearDensity.From(1, LinearDensityUnit.MicrogramPerMillimeter);
            Assert.Equal(1, quantity11.MicrogramsPerMillimeter);
            Assert.Equal(LinearDensityUnit.MicrogramPerMillimeter, quantity11.Unit);

            var quantity12 = LinearDensity.From(1, LinearDensityUnit.MilligramPerCentimeter);
            Assert.Equal(1, quantity12.MilligramsPerCentimeter);
            Assert.Equal(LinearDensityUnit.MilligramPerCentimeter, quantity12.Unit);

            var quantity13 = LinearDensity.From(1, LinearDensityUnit.MilligramPerFoot);
            Assert.Equal(1, quantity13.MilligramsPerFoot);
            Assert.Equal(LinearDensityUnit.MilligramPerFoot, quantity13.Unit);

            var quantity14 = LinearDensity.From(1, LinearDensityUnit.MilligramPerMeter);
            Assert.Equal(1, quantity14.MilligramsPerMeter);
            Assert.Equal(LinearDensityUnit.MilligramPerMeter, quantity14.Unit);

            var quantity15 = LinearDensity.From(1, LinearDensityUnit.MilligramPerMillimeter);
            Assert.Equal(1, quantity15.MilligramsPerMillimeter);
            Assert.Equal(LinearDensityUnit.MilligramPerMillimeter, quantity15.Unit);

            var quantity16 = LinearDensity.From(1, LinearDensityUnit.PoundPerFoot);
            Assert.Equal(1, quantity16.PoundsPerFoot);
            Assert.Equal(LinearDensityUnit.PoundPerFoot, quantity16.Unit);

            var quantity17 = LinearDensity.From(1, LinearDensityUnit.PoundPerInch);
            Assert.Equal(1, quantity17.PoundsPerInch);
            Assert.Equal(LinearDensityUnit.PoundPerInch, quantity17.Unit);

        }

        [Fact]
        public void FromKilogramsPerMeter_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => LinearDensity.FromKilogramsPerMeter(double.PositiveInfinity));
            var exception2 = Record.Exception(() => LinearDensity.FromKilogramsPerMeter(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromKilogramsPerMeter_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => LinearDensity.FromKilogramsPerMeter(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var kilogrampermeter = LinearDensity.FromKilogramsPerMeter(1);
            AssertEx.EqualTolerance(GramsPerCentimeterInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.GramPerCentimeter), GramsPerCentimeterTolerance);
            AssertEx.EqualTolerance(GramsPerFootInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.GramPerFoot), GramsPerFootTolerance);
            AssertEx.EqualTolerance(GramsPerMeterInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.GramPerMeter), GramsPerMeterTolerance);
            AssertEx.EqualTolerance(GramsPerMillimeterInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.GramPerMillimeter), GramsPerMillimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCentimeterInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.KilogramPerCentimeter), KilogramsPerCentimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerFootInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.KilogramPerFoot), KilogramsPerFootTolerance);
            AssertEx.EqualTolerance(KilogramsPerMeterInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.KilogramPerMeter), KilogramsPerMeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerMillimeterInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.KilogramPerMillimeter), KilogramsPerMillimeterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerCentimeterInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.MicrogramPerCentimeter), MicrogramsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerFootInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.MicrogramPerFoot), MicrogramsPerFootTolerance);
            AssertEx.EqualTolerance(MicrogramsPerMeterInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.MicrogramPerMeter), MicrogramsPerMeterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerMillimeterInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.MicrogramPerMillimeter), MicrogramsPerMillimeterTolerance);
            AssertEx.EqualTolerance(MilligramsPerCentimeterInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.MilligramPerCentimeter), MilligramsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MilligramsPerFootInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.MilligramPerFoot), MilligramsPerFootTolerance);
            AssertEx.EqualTolerance(MilligramsPerMeterInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.MilligramPerMeter), MilligramsPerMeterTolerance);
            AssertEx.EqualTolerance(MilligramsPerMillimeterInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.MilligramPerMillimeter), MilligramsPerMillimeterTolerance);
            AssertEx.EqualTolerance(PoundsPerFootInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.PoundPerFoot), PoundsPerFootTolerance);
            AssertEx.EqualTolerance(PoundsPerInchInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.PoundPerInch), PoundsPerInchTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new LinearDensity(value: 1, unit: LinearDensity.BaseUnit);
            if (SupportsSIUnitSystem)
            {
                Assert.Equal(1, quantity.As(UnitSystem.SI));
            }
            else
            {
                Assert.Throws<ArgumentException>(() => quantity.As(UnitSystem.SI));
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = LinearDensity.Parse("1 g/cm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.GramsPerCentimeter);
                Assert.Equal(LinearDensityUnit.GramPerCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = LinearDensity.Parse("1 g/ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.GramsPerFoot);
                Assert.Equal(LinearDensityUnit.GramPerFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = LinearDensity.Parse("1 g/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.GramsPerMeter);
                Assert.Equal(LinearDensityUnit.GramPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = LinearDensity.Parse("1 g/mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.GramsPerMillimeter);
                Assert.Equal(LinearDensityUnit.GramPerMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = LinearDensity.Parse("1 kg/cm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilogramsPerCentimeter);
                Assert.Equal(LinearDensityUnit.KilogramPerCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = LinearDensity.Parse("1 kg/ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilogramsPerFoot);
                Assert.Equal(LinearDensityUnit.KilogramPerFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = LinearDensity.Parse("1 kg/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilogramsPerMeter);
                Assert.Equal(LinearDensityUnit.KilogramPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = LinearDensity.Parse("1 kg/mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilogramsPerMillimeter);
                Assert.Equal(LinearDensityUnit.KilogramPerMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = LinearDensity.Parse("1 µg/cm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MicrogramsPerCentimeter);
                Assert.Equal(LinearDensityUnit.MicrogramPerCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = LinearDensity.Parse("1 µg/ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MicrogramsPerFoot);
                Assert.Equal(LinearDensityUnit.MicrogramPerFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = LinearDensity.Parse("1 µg/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MicrogramsPerMeter);
                Assert.Equal(LinearDensityUnit.MicrogramPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = LinearDensity.Parse("1 µg/mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MicrogramsPerMillimeter);
                Assert.Equal(LinearDensityUnit.MicrogramPerMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = LinearDensity.Parse("1 mg/cm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MilligramsPerCentimeter);
                Assert.Equal(LinearDensityUnit.MilligramPerCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = LinearDensity.Parse("1 mg/ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MilligramsPerFoot);
                Assert.Equal(LinearDensityUnit.MilligramPerFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = LinearDensity.Parse("1 mg/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MilligramsPerMeter);
                Assert.Equal(LinearDensityUnit.MilligramPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = LinearDensity.Parse("1 mg/mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MilligramsPerMillimeter);
                Assert.Equal(LinearDensityUnit.MilligramPerMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = LinearDensity.Parse("1 lb/ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PoundsPerFoot);
                Assert.Equal(LinearDensityUnit.PoundPerFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = LinearDensity.Parse("1 lb/in", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PoundsPerInch);
                Assert.Equal(LinearDensityUnit.PoundPerInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(LinearDensity.TryParse("1 g/cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.GramsPerCentimeter);
                Assert.Equal(LinearDensityUnit.GramPerCentimeter, parsed.Unit);
            }

            {
                Assert.True(LinearDensity.TryParse("1 g/ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.GramsPerFoot);
                Assert.Equal(LinearDensityUnit.GramPerFoot, parsed.Unit);
            }

            {
                Assert.True(LinearDensity.TryParse("1 g/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.GramsPerMeter);
                Assert.Equal(LinearDensityUnit.GramPerMeter, parsed.Unit);
            }

            {
                Assert.True(LinearDensity.TryParse("1 g/mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.GramsPerMillimeter);
                Assert.Equal(LinearDensityUnit.GramPerMillimeter, parsed.Unit);
            }

            {
                Assert.True(LinearDensity.TryParse("1 kg/cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilogramsPerCentimeter);
                Assert.Equal(LinearDensityUnit.KilogramPerCentimeter, parsed.Unit);
            }

            {
                Assert.True(LinearDensity.TryParse("1 kg/ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilogramsPerFoot);
                Assert.Equal(LinearDensityUnit.KilogramPerFoot, parsed.Unit);
            }

            {
                Assert.True(LinearDensity.TryParse("1 kg/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilogramsPerMeter);
                Assert.Equal(LinearDensityUnit.KilogramPerMeter, parsed.Unit);
            }

            {
                Assert.True(LinearDensity.TryParse("1 kg/mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilogramsPerMillimeter);
                Assert.Equal(LinearDensityUnit.KilogramPerMillimeter, parsed.Unit);
            }

            {
                Assert.True(LinearDensity.TryParse("1 µg/cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MicrogramsPerCentimeter);
                Assert.Equal(LinearDensityUnit.MicrogramPerCentimeter, parsed.Unit);
            }

            {
                Assert.True(LinearDensity.TryParse("1 µg/ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MicrogramsPerFoot);
                Assert.Equal(LinearDensityUnit.MicrogramPerFoot, parsed.Unit);
            }

            {
                Assert.True(LinearDensity.TryParse("1 µg/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MicrogramsPerMeter);
                Assert.Equal(LinearDensityUnit.MicrogramPerMeter, parsed.Unit);
            }

            {
                Assert.True(LinearDensity.TryParse("1 µg/mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MicrogramsPerMillimeter);
                Assert.Equal(LinearDensityUnit.MicrogramPerMillimeter, parsed.Unit);
            }

            {
                Assert.True(LinearDensity.TryParse("1 mg/cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MilligramsPerCentimeter);
                Assert.Equal(LinearDensityUnit.MilligramPerCentimeter, parsed.Unit);
            }

            {
                Assert.True(LinearDensity.TryParse("1 mg/ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MilligramsPerFoot);
                Assert.Equal(LinearDensityUnit.MilligramPerFoot, parsed.Unit);
            }

            {
                Assert.True(LinearDensity.TryParse("1 mg/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MilligramsPerMeter);
                Assert.Equal(LinearDensityUnit.MilligramPerMeter, parsed.Unit);
            }

            {
                Assert.True(LinearDensity.TryParse("1 mg/mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MilligramsPerMillimeter);
                Assert.Equal(LinearDensityUnit.MilligramPerMillimeter, parsed.Unit);
            }

            {
                Assert.True(LinearDensity.TryParse("1 lb/ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PoundsPerFoot);
                Assert.Equal(LinearDensityUnit.PoundPerFoot, parsed.Unit);
            }

            {
                Assert.True(LinearDensity.TryParse("1 lb/in", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PoundsPerInch);
                Assert.Equal(LinearDensityUnit.PoundPerInch, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = LinearDensity.ParseUnit("g/cm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LinearDensityUnit.GramPerCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = LinearDensity.ParseUnit("g/ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LinearDensityUnit.GramPerFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = LinearDensity.ParseUnit("g/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LinearDensityUnit.GramPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = LinearDensity.ParseUnit("g/mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LinearDensityUnit.GramPerMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = LinearDensity.ParseUnit("kg/cm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LinearDensityUnit.KilogramPerCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = LinearDensity.ParseUnit("kg/ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LinearDensityUnit.KilogramPerFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = LinearDensity.ParseUnit("kg/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LinearDensityUnit.KilogramPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = LinearDensity.ParseUnit("kg/mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LinearDensityUnit.KilogramPerMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = LinearDensity.ParseUnit("µg/cm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LinearDensityUnit.MicrogramPerCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = LinearDensity.ParseUnit("µg/ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LinearDensityUnit.MicrogramPerFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = LinearDensity.ParseUnit("µg/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LinearDensityUnit.MicrogramPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = LinearDensity.ParseUnit("µg/mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LinearDensityUnit.MicrogramPerMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = LinearDensity.ParseUnit("mg/cm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LinearDensityUnit.MilligramPerCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = LinearDensity.ParseUnit("mg/ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LinearDensityUnit.MilligramPerFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = LinearDensity.ParseUnit("mg/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LinearDensityUnit.MilligramPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = LinearDensity.ParseUnit("mg/mm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LinearDensityUnit.MilligramPerMillimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = LinearDensity.ParseUnit("lb/ft", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LinearDensityUnit.PoundPerFoot, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = LinearDensity.ParseUnit("lb/in", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(LinearDensityUnit.PoundPerInch, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(LinearDensity.TryParseUnit("g/cm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LinearDensityUnit.GramPerCentimeter, parsedUnit);
            }

            {
                Assert.True(LinearDensity.TryParseUnit("g/ft", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LinearDensityUnit.GramPerFoot, parsedUnit);
            }

            {
                Assert.True(LinearDensity.TryParseUnit("g/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LinearDensityUnit.GramPerMeter, parsedUnit);
            }

            {
                Assert.True(LinearDensity.TryParseUnit("g/mm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LinearDensityUnit.GramPerMillimeter, parsedUnit);
            }

            {
                Assert.True(LinearDensity.TryParseUnit("kg/cm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LinearDensityUnit.KilogramPerCentimeter, parsedUnit);
            }

            {
                Assert.True(LinearDensity.TryParseUnit("kg/ft", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LinearDensityUnit.KilogramPerFoot, parsedUnit);
            }

            {
                Assert.True(LinearDensity.TryParseUnit("kg/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LinearDensityUnit.KilogramPerMeter, parsedUnit);
            }

            {
                Assert.True(LinearDensity.TryParseUnit("kg/mm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LinearDensityUnit.KilogramPerMillimeter, parsedUnit);
            }

            {
                Assert.True(LinearDensity.TryParseUnit("µg/cm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LinearDensityUnit.MicrogramPerCentimeter, parsedUnit);
            }

            {
                Assert.True(LinearDensity.TryParseUnit("µg/ft", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LinearDensityUnit.MicrogramPerFoot, parsedUnit);
            }

            {
                Assert.True(LinearDensity.TryParseUnit("µg/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LinearDensityUnit.MicrogramPerMeter, parsedUnit);
            }

            {
                Assert.True(LinearDensity.TryParseUnit("µg/mm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LinearDensityUnit.MicrogramPerMillimeter, parsedUnit);
            }

            {
                Assert.True(LinearDensity.TryParseUnit("mg/cm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LinearDensityUnit.MilligramPerCentimeter, parsedUnit);
            }

            {
                Assert.True(LinearDensity.TryParseUnit("mg/ft", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LinearDensityUnit.MilligramPerFoot, parsedUnit);
            }

            {
                Assert.True(LinearDensity.TryParseUnit("mg/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LinearDensityUnit.MilligramPerMeter, parsedUnit);
            }

            {
                Assert.True(LinearDensity.TryParseUnit("mg/mm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LinearDensityUnit.MilligramPerMillimeter, parsedUnit);
            }

            {
                Assert.True(LinearDensity.TryParseUnit("lb/ft", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LinearDensityUnit.PoundPerFoot, parsedUnit);
            }

            {
                Assert.True(LinearDensity.TryParseUnit("lb/in", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(LinearDensityUnit.PoundPerInch, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(LinearDensityUnit unit)
        {
            var inBaseUnits = LinearDensity.From(1.0, LinearDensity.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(LinearDensityUnit unit)
        {
            var quantity = LinearDensity.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(LinearDensityUnit unit)
        {
            // See if there is a unit available that is not the base unit, fallback to base unit if it has only a single unit.
            var fromUnit = LinearDensity.Units.First(u => u != LinearDensity.BaseUnit);

            var quantity = LinearDensity.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(LinearDensityUnit unit)
        {
            var quantity = default(LinearDensity);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            LinearDensity kilogrampermeter = LinearDensity.FromKilogramsPerMeter(1);
            Assert.Equal(1, LinearDensity.FromGramsPerCentimeter(kilogrampermeter.GramsPerCentimeter).KilogramsPerMeter);
            Assert.Equal(1, LinearDensity.FromGramsPerFoot(kilogrampermeter.GramsPerFoot).KilogramsPerMeter);
            Assert.Equal(1, LinearDensity.FromGramsPerMeter(kilogrampermeter.GramsPerMeter).KilogramsPerMeter);
            Assert.Equal(1, LinearDensity.FromGramsPerMillimeter(kilogrampermeter.GramsPerMillimeter).KilogramsPerMeter);
            Assert.Equal(1, LinearDensity.FromKilogramsPerCentimeter(kilogrampermeter.KilogramsPerCentimeter).KilogramsPerMeter);
            Assert.Equal(1, LinearDensity.FromKilogramsPerFoot(kilogrampermeter.KilogramsPerFoot).KilogramsPerMeter);
            Assert.Equal(1, LinearDensity.FromKilogramsPerMeter(kilogrampermeter.KilogramsPerMeter).KilogramsPerMeter);
            Assert.Equal(1, LinearDensity.FromKilogramsPerMillimeter(kilogrampermeter.KilogramsPerMillimeter).KilogramsPerMeter);
            Assert.Equal(1, LinearDensity.FromMicrogramsPerCentimeter(kilogrampermeter.MicrogramsPerCentimeter).KilogramsPerMeter);
            Assert.Equal(1, LinearDensity.FromMicrogramsPerFoot(kilogrampermeter.MicrogramsPerFoot).KilogramsPerMeter);
            Assert.Equal(1, LinearDensity.FromMicrogramsPerMeter(kilogrampermeter.MicrogramsPerMeter).KilogramsPerMeter);
            Assert.Equal(1, LinearDensity.FromMicrogramsPerMillimeter(kilogrampermeter.MicrogramsPerMillimeter).KilogramsPerMeter);
            Assert.Equal(1, LinearDensity.FromMilligramsPerCentimeter(kilogrampermeter.MilligramsPerCentimeter).KilogramsPerMeter);
            Assert.Equal(1, LinearDensity.FromMilligramsPerFoot(kilogrampermeter.MilligramsPerFoot).KilogramsPerMeter);
            Assert.Equal(1, LinearDensity.FromMilligramsPerMeter(kilogrampermeter.MilligramsPerMeter).KilogramsPerMeter);
            Assert.Equal(1, LinearDensity.FromMilligramsPerMillimeter(kilogrampermeter.MilligramsPerMillimeter).KilogramsPerMeter);
            Assert.Equal(1, LinearDensity.FromPoundsPerFoot(kilogrampermeter.PoundsPerFoot).KilogramsPerMeter);
            Assert.Equal(1, LinearDensity.FromPoundsPerInch(kilogrampermeter.PoundsPerInch).KilogramsPerMeter);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            LinearDensity v = LinearDensity.FromKilogramsPerMeter(1);
            Assert.Equal(-1, -v.KilogramsPerMeter);
            Assert.Equal(2, (LinearDensity.FromKilogramsPerMeter(3) - v).KilogramsPerMeter);
            Assert.Equal(2, (v + v).KilogramsPerMeter);
            Assert.Equal(10, (v * 10).KilogramsPerMeter);
            Assert.Equal(10, (10 * v).KilogramsPerMeter);
            Assert.Equal(2, (LinearDensity.FromKilogramsPerMeter(10) / 5).KilogramsPerMeter);
            Assert.Equal(2, LinearDensity.FromKilogramsPerMeter(10) / LinearDensity.FromKilogramsPerMeter(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            LinearDensity oneKilogramPerMeter = LinearDensity.FromKilogramsPerMeter(1);
            LinearDensity twoKilogramsPerMeter = LinearDensity.FromKilogramsPerMeter(2);

            Assert.True(oneKilogramPerMeter < twoKilogramsPerMeter);
            Assert.True(oneKilogramPerMeter <= twoKilogramsPerMeter);
            Assert.True(twoKilogramsPerMeter > oneKilogramPerMeter);
            Assert.True(twoKilogramsPerMeter >= oneKilogramPerMeter);

            Assert.False(oneKilogramPerMeter > twoKilogramsPerMeter);
            Assert.False(oneKilogramPerMeter >= twoKilogramsPerMeter);
            Assert.False(twoKilogramsPerMeter < oneKilogramPerMeter);
            Assert.False(twoKilogramsPerMeter <= oneKilogramPerMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            LinearDensity kilogrampermeter = LinearDensity.FromKilogramsPerMeter(1);
            Assert.Equal(0, kilogrampermeter.CompareTo(kilogrampermeter));
            Assert.True(kilogrampermeter.CompareTo(LinearDensity.Zero) > 0);
            Assert.True(LinearDensity.Zero.CompareTo(kilogrampermeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            LinearDensity kilogrampermeter = LinearDensity.FromKilogramsPerMeter(1);
            Assert.Throws<ArgumentException>(() => kilogrampermeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            LinearDensity kilogrampermeter = LinearDensity.FromKilogramsPerMeter(1);
            Assert.Throws<ArgumentNullException>(() => kilogrampermeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, LinearDensityUnit.KilogramPerMeter, 1, LinearDensityUnit.KilogramPerMeter, true)]  // Same value and unit.
        [InlineData(1, LinearDensityUnit.KilogramPerMeter, 2, LinearDensityUnit.KilogramPerMeter, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, LinearDensityUnit unitA, double valueB, LinearDensityUnit unitB, bool expectEqual)
        {
            var a = new LinearDensity(valueA, unitA);
            var b = new LinearDensity(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = LinearDensity.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_WithTolerance_IsImplemented()
        {
            var v = LinearDensity.FromKilogramsPerMeter(1);
            Assert.True(v.Equals(LinearDensity.FromKilogramsPerMeter(1), LinearDensity.FromKilogramsPerMeter(0)));
            Assert.True(v.Equals(LinearDensity.FromKilogramsPerMeter(1), LinearDensity.FromKilogramsPerMeter(0.001m)));
            Assert.True(v.Equals(LinearDensity.FromKilogramsPerMeter(0.9999), LinearDensity.FromKilogramsPerMeter(0.001m)));
            Assert.False(v.Equals(LinearDensity.FromKilogramsPerMeter(0.99), LinearDensity.FromKilogramsPerMeter(0.001m)));
            Assert.False(v.Equals(LinearDensity.Zero, LinearDensity.FromKilogramsPerMeter(0.001m)));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = LinearDensity.FromKilogramsPerMeter(1);
            var negativeTolerance = LinearDensity.FromKilogramsPerMeter(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(LinearDensity.FromKilogramsPerMeter(1), negativeTolerance));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            LinearDensity kilogrampermeter = LinearDensity.FromKilogramsPerMeter(1);
            Assert.False(kilogrampermeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            LinearDensity kilogrampermeter = LinearDensity.FromKilogramsPerMeter(1);
            Assert.False(kilogrampermeter.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(LinearDensityUnit)).Cast<LinearDensityUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(LinearDensity.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentCulture;
            Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 g/cm", new LinearDensity(1, LinearDensityUnit.GramPerCentimeter).ToString());
                Assert.Equal("1 g/ft", new LinearDensity(1, LinearDensityUnit.GramPerFoot).ToString());
                Assert.Equal("1 g/m", new LinearDensity(1, LinearDensityUnit.GramPerMeter).ToString());
                Assert.Equal("1 g/mm", new LinearDensity(1, LinearDensityUnit.GramPerMillimeter).ToString());
                Assert.Equal("1 kg/cm", new LinearDensity(1, LinearDensityUnit.KilogramPerCentimeter).ToString());
                Assert.Equal("1 kg/ft", new LinearDensity(1, LinearDensityUnit.KilogramPerFoot).ToString());
                Assert.Equal("1 kg/m", new LinearDensity(1, LinearDensityUnit.KilogramPerMeter).ToString());
                Assert.Equal("1 kg/mm", new LinearDensity(1, LinearDensityUnit.KilogramPerMillimeter).ToString());
                Assert.Equal("1 µg/cm", new LinearDensity(1, LinearDensityUnit.MicrogramPerCentimeter).ToString());
                Assert.Equal("1 µg/ft", new LinearDensity(1, LinearDensityUnit.MicrogramPerFoot).ToString());
                Assert.Equal("1 µg/m", new LinearDensity(1, LinearDensityUnit.MicrogramPerMeter).ToString());
                Assert.Equal("1 µg/mm", new LinearDensity(1, LinearDensityUnit.MicrogramPerMillimeter).ToString());
                Assert.Equal("1 mg/cm", new LinearDensity(1, LinearDensityUnit.MilligramPerCentimeter).ToString());
                Assert.Equal("1 mg/ft", new LinearDensity(1, LinearDensityUnit.MilligramPerFoot).ToString());
                Assert.Equal("1 mg/m", new LinearDensity(1, LinearDensityUnit.MilligramPerMeter).ToString());
                Assert.Equal("1 mg/mm", new LinearDensity(1, LinearDensityUnit.MilligramPerMillimeter).ToString());
                Assert.Equal("1 lb/ft", new LinearDensity(1, LinearDensityUnit.PoundPerFoot).ToString());
                Assert.Equal("1 lb/in", new LinearDensity(1, LinearDensityUnit.PoundPerInch).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 g/cm", new LinearDensity(1, LinearDensityUnit.GramPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 g/ft", new LinearDensity(1, LinearDensityUnit.GramPerFoot).ToString(swedishCulture));
            Assert.Equal("1 g/m", new LinearDensity(1, LinearDensityUnit.GramPerMeter).ToString(swedishCulture));
            Assert.Equal("1 g/mm", new LinearDensity(1, LinearDensityUnit.GramPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kg/cm", new LinearDensity(1, LinearDensityUnit.KilogramPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kg/ft", new LinearDensity(1, LinearDensityUnit.KilogramPerFoot).ToString(swedishCulture));
            Assert.Equal("1 kg/m", new LinearDensity(1, LinearDensityUnit.KilogramPerMeter).ToString(swedishCulture));
            Assert.Equal("1 kg/mm", new LinearDensity(1, LinearDensityUnit.KilogramPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 µg/cm", new LinearDensity(1, LinearDensityUnit.MicrogramPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 µg/ft", new LinearDensity(1, LinearDensityUnit.MicrogramPerFoot).ToString(swedishCulture));
            Assert.Equal("1 µg/m", new LinearDensity(1, LinearDensityUnit.MicrogramPerMeter).ToString(swedishCulture));
            Assert.Equal("1 µg/mm", new LinearDensity(1, LinearDensityUnit.MicrogramPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 mg/cm", new LinearDensity(1, LinearDensityUnit.MilligramPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 mg/ft", new LinearDensity(1, LinearDensityUnit.MilligramPerFoot).ToString(swedishCulture));
            Assert.Equal("1 mg/m", new LinearDensity(1, LinearDensityUnit.MilligramPerMeter).ToString(swedishCulture));
            Assert.Equal("1 mg/mm", new LinearDensity(1, LinearDensityUnit.MilligramPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 lb/ft", new LinearDensity(1, LinearDensityUnit.PoundPerFoot).ToString(swedishCulture));
            Assert.Equal("1 lb/in", new LinearDensity(1, LinearDensityUnit.PoundPerInch).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentCulture;
            try
            {
                CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 kg/m", new LinearDensity(0.123456, LinearDensityUnit.KilogramPerMeter).ToString("s1"));
                Assert.Equal("0.12 kg/m", new LinearDensity(0.123456, LinearDensityUnit.KilogramPerMeter).ToString("s2"));
                Assert.Equal("0.123 kg/m", new LinearDensity(0.123456, LinearDensityUnit.KilogramPerMeter).ToString("s3"));
                Assert.Equal("0.1235 kg/m", new LinearDensity(0.123456, LinearDensityUnit.KilogramPerMeter).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentCulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 kg/m", new LinearDensity(0.123456, LinearDensityUnit.KilogramPerMeter).ToString("s1", culture));
            Assert.Equal("0.12 kg/m", new LinearDensity(0.123456, LinearDensityUnit.KilogramPerMeter).ToString("s2", culture));
            Assert.Equal("0.123 kg/m", new LinearDensity(0.123456, LinearDensityUnit.KilogramPerMeter).ToString("s3", culture));
            Assert.Equal("0.1235 kg/m", new LinearDensity(0.123456, LinearDensityUnit.KilogramPerMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("g", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(LinearDensity)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(LinearDensityUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
            Assert.Equal(LinearDensity.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
            Assert.Equal(LinearDensity.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
            #if NET7_0_OR_GREATER
            var expected = HashCode.Combine(LinearDensity.Info.Name, quantity.KilogramsPerMeter);
            #else
            var expected = new {LinearDensity.Info.Name, valueInBaseUnit = quantity.KilogramsPerMeter}.GetHashCode();
            #endif
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(value);
            Assert.Equal(LinearDensity.FromKilogramsPerMeter(-value), -quantity);
        }
    }
}
