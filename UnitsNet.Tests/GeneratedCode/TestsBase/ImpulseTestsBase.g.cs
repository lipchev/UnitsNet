//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Impulse.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ImpulseTestsBase : QuantityTestsBase
    {
        protected abstract double CentinewtonSecondsInOneNewtonSecond { get; }
        protected abstract double DecanewtonSecondsInOneNewtonSecond { get; }
        protected abstract double DecinewtonSecondsInOneNewtonSecond { get; }
        protected abstract double KilogramMetersPerSecondInOneNewtonSecond { get; }
        protected abstract double KilonewtonSecondsInOneNewtonSecond { get; }
        protected abstract double MeganewtonSecondsInOneNewtonSecond { get; }
        protected abstract double MicronewtonSecondsInOneNewtonSecond { get; }
        protected abstract double MillinewtonSecondsInOneNewtonSecond { get; }
        protected abstract double NanonewtonSecondsInOneNewtonSecond { get; }
        protected abstract double NewtonSecondsInOneNewtonSecond { get; }
        protected abstract double PoundFeetPerSecondInOneNewtonSecond { get; }
        protected abstract double PoundForceSecondsInOneNewtonSecond { get; }
        protected abstract double SlugFeetPerSecondInOneNewtonSecond { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentinewtonSecondsTolerance { get { return 1e-5; } }
        protected virtual double DecanewtonSecondsTolerance { get { return 1e-5; } }
        protected virtual double DecinewtonSecondsTolerance { get { return 1e-5; } }
        protected virtual double KilogramMetersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonSecondsTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonSecondsTolerance { get { return 1e-5; } }
        protected virtual double MicronewtonSecondsTolerance { get { return 1e-5; } }
        protected virtual double MillinewtonSecondsTolerance { get { return 1e-5; } }
        protected virtual double NanonewtonSecondsTolerance { get { return 1e-5; } }
        protected virtual double NewtonSecondsTolerance { get { return 1e-5; } }
        protected virtual double PoundFeetPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PoundForceSecondsTolerance { get { return 1e-5; } }
        protected virtual double SlugFeetPerSecondTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(ImpulseUnit unit)
        {
            return unit switch
            {
                ImpulseUnit.CentinewtonSecond => (CentinewtonSecondsInOneNewtonSecond, CentinewtonSecondsTolerance),
                ImpulseUnit.DecanewtonSecond => (DecanewtonSecondsInOneNewtonSecond, DecanewtonSecondsTolerance),
                ImpulseUnit.DecinewtonSecond => (DecinewtonSecondsInOneNewtonSecond, DecinewtonSecondsTolerance),
                ImpulseUnit.KilogramMeterPerSecond => (KilogramMetersPerSecondInOneNewtonSecond, KilogramMetersPerSecondTolerance),
                ImpulseUnit.KilonewtonSecond => (KilonewtonSecondsInOneNewtonSecond, KilonewtonSecondsTolerance),
                ImpulseUnit.MeganewtonSecond => (MeganewtonSecondsInOneNewtonSecond, MeganewtonSecondsTolerance),
                ImpulseUnit.MicronewtonSecond => (MicronewtonSecondsInOneNewtonSecond, MicronewtonSecondsTolerance),
                ImpulseUnit.MillinewtonSecond => (MillinewtonSecondsInOneNewtonSecond, MillinewtonSecondsTolerance),
                ImpulseUnit.NanonewtonSecond => (NanonewtonSecondsInOneNewtonSecond, NanonewtonSecondsTolerance),
                ImpulseUnit.NewtonSecond => (NewtonSecondsInOneNewtonSecond, NewtonSecondsTolerance),
                ImpulseUnit.PoundFootPerSecond => (PoundFeetPerSecondInOneNewtonSecond, PoundFeetPerSecondTolerance),
                ImpulseUnit.PoundForceSecond => (PoundForceSecondsInOneNewtonSecond, PoundForceSecondsTolerance),
                ImpulseUnit.SlugFootPerSecond => (SlugFeetPerSecondInOneNewtonSecond, SlugFeetPerSecondTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { ImpulseUnit.CentinewtonSecond },
            new object[] { ImpulseUnit.DecanewtonSecond },
            new object[] { ImpulseUnit.DecinewtonSecond },
            new object[] { ImpulseUnit.KilogramMeterPerSecond },
            new object[] { ImpulseUnit.KilonewtonSecond },
            new object[] { ImpulseUnit.MeganewtonSecond },
            new object[] { ImpulseUnit.MicronewtonSecond },
            new object[] { ImpulseUnit.MillinewtonSecond },
            new object[] { ImpulseUnit.NanonewtonSecond },
            new object[] { ImpulseUnit.NewtonSecond },
            new object[] { ImpulseUnit.PoundFootPerSecond },
            new object[] { ImpulseUnit.PoundForceSecond },
            new object[] { ImpulseUnit.SlugFootPerSecond },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Impulse();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(ImpulseUnit.NewtonSecond, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Impulse(double.PositiveInfinity, ImpulseUnit.NewtonSecond));
            var exception2 = Record.Exception(() => new Impulse(double.NegativeInfinity, ImpulseUnit.NewtonSecond));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Impulse(double.NaN, ImpulseUnit.NewtonSecond));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Impulse(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            if (SupportsSIUnitSystem)
            {
                var quantity = new Impulse(value: 1, unitSystem: UnitSystem.SI);
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(() => new Impulse(value: 1, unitSystem: UnitSystem.SI));
            }
        }

        [Fact]
        public void Impulse_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Impulse(1, ImpulseUnit.NewtonSecond);

            QuantityInfo<ImpulseUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Impulse.Zero, quantityInfo.Zero);
            Assert.Equal("Impulse", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<ImpulseUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void NewtonSecondToImpulseUnits()
        {
            Impulse newtonsecond = Impulse.FromNewtonSeconds(1);
            AssertEx.EqualTolerance(CentinewtonSecondsInOneNewtonSecond, newtonsecond.CentinewtonSeconds, CentinewtonSecondsTolerance);
            AssertEx.EqualTolerance(DecanewtonSecondsInOneNewtonSecond, newtonsecond.DecanewtonSeconds, DecanewtonSecondsTolerance);
            AssertEx.EqualTolerance(DecinewtonSecondsInOneNewtonSecond, newtonsecond.DecinewtonSeconds, DecinewtonSecondsTolerance);
            AssertEx.EqualTolerance(KilogramMetersPerSecondInOneNewtonSecond, newtonsecond.KilogramMetersPerSecond, KilogramMetersPerSecondTolerance);
            AssertEx.EqualTolerance(KilonewtonSecondsInOneNewtonSecond, newtonsecond.KilonewtonSeconds, KilonewtonSecondsTolerance);
            AssertEx.EqualTolerance(MeganewtonSecondsInOneNewtonSecond, newtonsecond.MeganewtonSeconds, MeganewtonSecondsTolerance);
            AssertEx.EqualTolerance(MicronewtonSecondsInOneNewtonSecond, newtonsecond.MicronewtonSeconds, MicronewtonSecondsTolerance);
            AssertEx.EqualTolerance(MillinewtonSecondsInOneNewtonSecond, newtonsecond.MillinewtonSeconds, MillinewtonSecondsTolerance);
            AssertEx.EqualTolerance(NanonewtonSecondsInOneNewtonSecond, newtonsecond.NanonewtonSeconds, NanonewtonSecondsTolerance);
            AssertEx.EqualTolerance(NewtonSecondsInOneNewtonSecond, newtonsecond.NewtonSeconds, NewtonSecondsTolerance);
            AssertEx.EqualTolerance(PoundFeetPerSecondInOneNewtonSecond, newtonsecond.PoundFeetPerSecond, PoundFeetPerSecondTolerance);
            AssertEx.EqualTolerance(PoundForceSecondsInOneNewtonSecond, newtonsecond.PoundForceSeconds, PoundForceSecondsTolerance);
            AssertEx.EqualTolerance(SlugFeetPerSecondInOneNewtonSecond, newtonsecond.SlugFeetPerSecond, SlugFeetPerSecondTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Impulse.From(1, ImpulseUnit.CentinewtonSecond);
            Assert.Equal(1, quantity00.CentinewtonSeconds);
            Assert.Equal(ImpulseUnit.CentinewtonSecond, quantity00.Unit);

            var quantity01 = Impulse.From(1, ImpulseUnit.DecanewtonSecond);
            Assert.Equal(1, quantity01.DecanewtonSeconds);
            Assert.Equal(ImpulseUnit.DecanewtonSecond, quantity01.Unit);

            var quantity02 = Impulse.From(1, ImpulseUnit.DecinewtonSecond);
            Assert.Equal(1, quantity02.DecinewtonSeconds);
            Assert.Equal(ImpulseUnit.DecinewtonSecond, quantity02.Unit);

            var quantity03 = Impulse.From(1, ImpulseUnit.KilogramMeterPerSecond);
            Assert.Equal(1, quantity03.KilogramMetersPerSecond);
            Assert.Equal(ImpulseUnit.KilogramMeterPerSecond, quantity03.Unit);

            var quantity04 = Impulse.From(1, ImpulseUnit.KilonewtonSecond);
            Assert.Equal(1, quantity04.KilonewtonSeconds);
            Assert.Equal(ImpulseUnit.KilonewtonSecond, quantity04.Unit);

            var quantity05 = Impulse.From(1, ImpulseUnit.MeganewtonSecond);
            Assert.Equal(1, quantity05.MeganewtonSeconds);
            Assert.Equal(ImpulseUnit.MeganewtonSecond, quantity05.Unit);

            var quantity06 = Impulse.From(1, ImpulseUnit.MicronewtonSecond);
            Assert.Equal(1, quantity06.MicronewtonSeconds);
            Assert.Equal(ImpulseUnit.MicronewtonSecond, quantity06.Unit);

            var quantity07 = Impulse.From(1, ImpulseUnit.MillinewtonSecond);
            Assert.Equal(1, quantity07.MillinewtonSeconds);
            Assert.Equal(ImpulseUnit.MillinewtonSecond, quantity07.Unit);

            var quantity08 = Impulse.From(1, ImpulseUnit.NanonewtonSecond);
            Assert.Equal(1, quantity08.NanonewtonSeconds);
            Assert.Equal(ImpulseUnit.NanonewtonSecond, quantity08.Unit);

            var quantity09 = Impulse.From(1, ImpulseUnit.NewtonSecond);
            Assert.Equal(1, quantity09.NewtonSeconds);
            Assert.Equal(ImpulseUnit.NewtonSecond, quantity09.Unit);

            var quantity10 = Impulse.From(1, ImpulseUnit.PoundFootPerSecond);
            Assert.Equal(1, quantity10.PoundFeetPerSecond);
            Assert.Equal(ImpulseUnit.PoundFootPerSecond, quantity10.Unit);

            var quantity11 = Impulse.From(1, ImpulseUnit.PoundForceSecond);
            Assert.Equal(1, quantity11.PoundForceSeconds);
            Assert.Equal(ImpulseUnit.PoundForceSecond, quantity11.Unit);

            var quantity12 = Impulse.From(1, ImpulseUnit.SlugFootPerSecond);
            Assert.Equal(1, quantity12.SlugFeetPerSecond);
            Assert.Equal(ImpulseUnit.SlugFootPerSecond, quantity12.Unit);

        }

        [Fact]
        public void FromNewtonSeconds_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Impulse.FromNewtonSeconds(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Impulse.FromNewtonSeconds(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromNewtonSeconds_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Impulse.FromNewtonSeconds(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var newtonsecond = Impulse.FromNewtonSeconds(1);
            AssertEx.EqualTolerance(CentinewtonSecondsInOneNewtonSecond, newtonsecond.As(ImpulseUnit.CentinewtonSecond), CentinewtonSecondsTolerance);
            AssertEx.EqualTolerance(DecanewtonSecondsInOneNewtonSecond, newtonsecond.As(ImpulseUnit.DecanewtonSecond), DecanewtonSecondsTolerance);
            AssertEx.EqualTolerance(DecinewtonSecondsInOneNewtonSecond, newtonsecond.As(ImpulseUnit.DecinewtonSecond), DecinewtonSecondsTolerance);
            AssertEx.EqualTolerance(KilogramMetersPerSecondInOneNewtonSecond, newtonsecond.As(ImpulseUnit.KilogramMeterPerSecond), KilogramMetersPerSecondTolerance);
            AssertEx.EqualTolerance(KilonewtonSecondsInOneNewtonSecond, newtonsecond.As(ImpulseUnit.KilonewtonSecond), KilonewtonSecondsTolerance);
            AssertEx.EqualTolerance(MeganewtonSecondsInOneNewtonSecond, newtonsecond.As(ImpulseUnit.MeganewtonSecond), MeganewtonSecondsTolerance);
            AssertEx.EqualTolerance(MicronewtonSecondsInOneNewtonSecond, newtonsecond.As(ImpulseUnit.MicronewtonSecond), MicronewtonSecondsTolerance);
            AssertEx.EqualTolerance(MillinewtonSecondsInOneNewtonSecond, newtonsecond.As(ImpulseUnit.MillinewtonSecond), MillinewtonSecondsTolerance);
            AssertEx.EqualTolerance(NanonewtonSecondsInOneNewtonSecond, newtonsecond.As(ImpulseUnit.NanonewtonSecond), NanonewtonSecondsTolerance);
            AssertEx.EqualTolerance(NewtonSecondsInOneNewtonSecond, newtonsecond.As(ImpulseUnit.NewtonSecond), NewtonSecondsTolerance);
            AssertEx.EqualTolerance(PoundFeetPerSecondInOneNewtonSecond, newtonsecond.As(ImpulseUnit.PoundFootPerSecond), PoundFeetPerSecondTolerance);
            AssertEx.EqualTolerance(PoundForceSecondsInOneNewtonSecond, newtonsecond.As(ImpulseUnit.PoundForceSecond), PoundForceSecondsTolerance);
            AssertEx.EqualTolerance(SlugFeetPerSecondInOneNewtonSecond, newtonsecond.As(ImpulseUnit.SlugFootPerSecond), SlugFeetPerSecondTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Impulse(value: 1, unit: Impulse.BaseUnit);
            if (SupportsSIUnitSystem)
            {
                Assert.Equal(1, quantity.As(UnitSystem.SI));
            }
            else
            {
                Assert.Throws<ArgumentException>(() => quantity.As(UnitSystem.SI));
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = Impulse.Parse("1 cN·s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.CentinewtonSeconds);
                Assert.Equal(ImpulseUnit.CentinewtonSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Impulse.Parse("1 daN·s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.DecanewtonSeconds);
                Assert.Equal(ImpulseUnit.DecanewtonSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Impulse.Parse("1 dN·s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.DecinewtonSeconds);
                Assert.Equal(ImpulseUnit.DecinewtonSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Impulse.Parse("1 kg·m/s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilogramMetersPerSecond);
                Assert.Equal(ImpulseUnit.KilogramMeterPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Impulse.Parse("1 kN·s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.KilonewtonSeconds);
                Assert.Equal(ImpulseUnit.KilonewtonSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Impulse.Parse("1 MN·s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MeganewtonSeconds);
                Assert.Equal(ImpulseUnit.MeganewtonSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Impulse.Parse("1 µN·s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MicronewtonSeconds);
                Assert.Equal(ImpulseUnit.MicronewtonSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Impulse.Parse("1 mN·s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.MillinewtonSeconds);
                Assert.Equal(ImpulseUnit.MillinewtonSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Impulse.Parse("1 nN·s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.NanonewtonSeconds);
                Assert.Equal(ImpulseUnit.NanonewtonSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Impulse.Parse("1 N·s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.NewtonSeconds);
                Assert.Equal(ImpulseUnit.NewtonSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Impulse.Parse("1 lb·ft/s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PoundFeetPerSecond);
                Assert.Equal(ImpulseUnit.PoundFootPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Impulse.Parse("1 lbf·s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PoundForceSeconds);
                Assert.Equal(ImpulseUnit.PoundForceSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Impulse.Parse("1 slug·ft/s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.SlugFeetPerSecond);
                Assert.Equal(ImpulseUnit.SlugFootPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(Impulse.TryParse("1 cN·s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.CentinewtonSeconds);
                Assert.Equal(ImpulseUnit.CentinewtonSecond, parsed.Unit);
            }

            {
                Assert.True(Impulse.TryParse("1 daN·s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.DecanewtonSeconds);
                Assert.Equal(ImpulseUnit.DecanewtonSecond, parsed.Unit);
            }

            {
                Assert.True(Impulse.TryParse("1 dN·s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.DecinewtonSeconds);
                Assert.Equal(ImpulseUnit.DecinewtonSecond, parsed.Unit);
            }

            {
                Assert.True(Impulse.TryParse("1 kg·m/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilogramMetersPerSecond);
                Assert.Equal(ImpulseUnit.KilogramMeterPerSecond, parsed.Unit);
            }

            {
                Assert.True(Impulse.TryParse("1 kN·s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.KilonewtonSeconds);
                Assert.Equal(ImpulseUnit.KilonewtonSecond, parsed.Unit);
            }

            {
                Assert.True(Impulse.TryParse("1 µN·s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.MicronewtonSeconds);
                Assert.Equal(ImpulseUnit.MicronewtonSecond, parsed.Unit);
            }

            {
                Assert.True(Impulse.TryParse("1 nN·s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.NanonewtonSeconds);
                Assert.Equal(ImpulseUnit.NanonewtonSecond, parsed.Unit);
            }

            {
                Assert.True(Impulse.TryParse("1 N·s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.NewtonSeconds);
                Assert.Equal(ImpulseUnit.NewtonSecond, parsed.Unit);
            }

            {
                Assert.True(Impulse.TryParse("1 lb·ft/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PoundFeetPerSecond);
                Assert.Equal(ImpulseUnit.PoundFootPerSecond, parsed.Unit);
            }

            {
                Assert.True(Impulse.TryParse("1 lbf·s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PoundForceSeconds);
                Assert.Equal(ImpulseUnit.PoundForceSecond, parsed.Unit);
            }

            {
                Assert.True(Impulse.TryParse("1 slug·ft/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.SlugFeetPerSecond);
                Assert.Equal(ImpulseUnit.SlugFootPerSecond, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = Impulse.ParseUnit("cN·s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ImpulseUnit.CentinewtonSecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Impulse.ParseUnit("daN·s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ImpulseUnit.DecanewtonSecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Impulse.ParseUnit("dN·s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ImpulseUnit.DecinewtonSecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Impulse.ParseUnit("kg·m/s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ImpulseUnit.KilogramMeterPerSecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Impulse.ParseUnit("kN·s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ImpulseUnit.KilonewtonSecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Impulse.ParseUnit("MN·s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ImpulseUnit.MeganewtonSecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Impulse.ParseUnit("µN·s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ImpulseUnit.MicronewtonSecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Impulse.ParseUnit("mN·s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ImpulseUnit.MillinewtonSecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Impulse.ParseUnit("nN·s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ImpulseUnit.NanonewtonSecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Impulse.ParseUnit("N·s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ImpulseUnit.NewtonSecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Impulse.ParseUnit("lb·ft/s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ImpulseUnit.PoundFootPerSecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Impulse.ParseUnit("lbf·s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ImpulseUnit.PoundForceSecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Impulse.ParseUnit("slug·ft/s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(ImpulseUnit.SlugFootPerSecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(Impulse.TryParseUnit("cN·s", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ImpulseUnit.CentinewtonSecond, parsedUnit);
            }

            {
                Assert.True(Impulse.TryParseUnit("daN·s", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ImpulseUnit.DecanewtonSecond, parsedUnit);
            }

            {
                Assert.True(Impulse.TryParseUnit("dN·s", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ImpulseUnit.DecinewtonSecond, parsedUnit);
            }

            {
                Assert.True(Impulse.TryParseUnit("kg·m/s", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ImpulseUnit.KilogramMeterPerSecond, parsedUnit);
            }

            {
                Assert.True(Impulse.TryParseUnit("kN·s", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ImpulseUnit.KilonewtonSecond, parsedUnit);
            }

            {
                Assert.True(Impulse.TryParseUnit("µN·s", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ImpulseUnit.MicronewtonSecond, parsedUnit);
            }

            {
                Assert.True(Impulse.TryParseUnit("nN·s", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ImpulseUnit.NanonewtonSecond, parsedUnit);
            }

            {
                Assert.True(Impulse.TryParseUnit("N·s", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ImpulseUnit.NewtonSecond, parsedUnit);
            }

            {
                Assert.True(Impulse.TryParseUnit("lb·ft/s", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ImpulseUnit.PoundFootPerSecond, parsedUnit);
            }

            {
                Assert.True(Impulse.TryParseUnit("lbf·s", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ImpulseUnit.PoundForceSecond, parsedUnit);
            }

            {
                Assert.True(Impulse.TryParseUnit("slug·ft/s", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(ImpulseUnit.SlugFootPerSecond, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(ImpulseUnit unit)
        {
            var inBaseUnits = Impulse.From(1.0, Impulse.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(ImpulseUnit unit)
        {
            var quantity = Impulse.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(ImpulseUnit unit)
        {
            // See if there is a unit available that is not the base unit, fallback to base unit if it has only a single unit.
            var fromUnit = Impulse.Units.First(u => u != Impulse.BaseUnit);

            var quantity = Impulse.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(ImpulseUnit unit)
        {
            var quantity = default(Impulse);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Impulse newtonsecond = Impulse.FromNewtonSeconds(1);
            Assert.Equal(1, Impulse.FromCentinewtonSeconds(newtonsecond.CentinewtonSeconds).NewtonSeconds);
            Assert.Equal(1, Impulse.FromDecanewtonSeconds(newtonsecond.DecanewtonSeconds).NewtonSeconds);
            Assert.Equal(1, Impulse.FromDecinewtonSeconds(newtonsecond.DecinewtonSeconds).NewtonSeconds);
            Assert.Equal(1, Impulse.FromKilogramMetersPerSecond(newtonsecond.KilogramMetersPerSecond).NewtonSeconds);
            Assert.Equal(1, Impulse.FromKilonewtonSeconds(newtonsecond.KilonewtonSeconds).NewtonSeconds);
            Assert.Equal(1, Impulse.FromMeganewtonSeconds(newtonsecond.MeganewtonSeconds).NewtonSeconds);
            Assert.Equal(1, Impulse.FromMicronewtonSeconds(newtonsecond.MicronewtonSeconds).NewtonSeconds);
            Assert.Equal(1, Impulse.FromMillinewtonSeconds(newtonsecond.MillinewtonSeconds).NewtonSeconds);
            Assert.Equal(1, Impulse.FromNanonewtonSeconds(newtonsecond.NanonewtonSeconds).NewtonSeconds);
            Assert.Equal(1, Impulse.FromNewtonSeconds(newtonsecond.NewtonSeconds).NewtonSeconds);
            Assert.Equal(1, Impulse.FromPoundFeetPerSecond(newtonsecond.PoundFeetPerSecond).NewtonSeconds);
            Assert.Equal(1, Impulse.FromPoundForceSeconds(newtonsecond.PoundForceSeconds).NewtonSeconds);
            Assert.Equal(1, Impulse.FromSlugFeetPerSecond(newtonsecond.SlugFeetPerSecond).NewtonSeconds);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Impulse v = Impulse.FromNewtonSeconds(1);
            Assert.Equal(-1, -v.NewtonSeconds);
            Assert.Equal(2, (Impulse.FromNewtonSeconds(3) - v).NewtonSeconds);
            Assert.Equal(2, (v + v).NewtonSeconds);
            Assert.Equal(10, (v * 10).NewtonSeconds);
            Assert.Equal(10, (10 * v).NewtonSeconds);
            Assert.Equal(2, (Impulse.FromNewtonSeconds(10) / 5).NewtonSeconds);
            Assert.Equal(2, Impulse.FromNewtonSeconds(10) / Impulse.FromNewtonSeconds(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            Impulse oneNewtonSecond = Impulse.FromNewtonSeconds(1);
            Impulse twoNewtonSeconds = Impulse.FromNewtonSeconds(2);

            Assert.True(oneNewtonSecond < twoNewtonSeconds);
            Assert.True(oneNewtonSecond <= twoNewtonSeconds);
            Assert.True(twoNewtonSeconds > oneNewtonSecond);
            Assert.True(twoNewtonSeconds >= oneNewtonSecond);

            Assert.False(oneNewtonSecond > twoNewtonSeconds);
            Assert.False(oneNewtonSecond >= twoNewtonSeconds);
            Assert.False(twoNewtonSeconds < oneNewtonSecond);
            Assert.False(twoNewtonSeconds <= oneNewtonSecond);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Impulse newtonsecond = Impulse.FromNewtonSeconds(1);
            Assert.Equal(0, newtonsecond.CompareTo(newtonsecond));
            Assert.True(newtonsecond.CompareTo(Impulse.Zero) > 0);
            Assert.True(Impulse.Zero.CompareTo(newtonsecond) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Impulse newtonsecond = Impulse.FromNewtonSeconds(1);
            Assert.Throws<ArgumentException>(() => newtonsecond.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Impulse newtonsecond = Impulse.FromNewtonSeconds(1);
            Assert.Throws<ArgumentNullException>(() => newtonsecond.CompareTo(null));
        }

        [Theory]
        [InlineData(1, ImpulseUnit.NewtonSecond, 1, ImpulseUnit.NewtonSecond, true)]  // Same value and unit.
        [InlineData(1, ImpulseUnit.NewtonSecond, 2, ImpulseUnit.NewtonSecond, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, ImpulseUnit unitA, double valueB, ImpulseUnit unitB, bool expectEqual)
        {
            var a = new Impulse(valueA, unitA);
            var b = new Impulse(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Impulse.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_WithTolerance_IsImplemented()
        {
            var v = Impulse.FromNewtonSeconds(1);
            Assert.True(v.Equals(Impulse.FromNewtonSeconds(1), Impulse.FromNewtonSeconds(0)));
            Assert.True(v.Equals(Impulse.FromNewtonSeconds(1), Impulse.FromNewtonSeconds(0.001m)));
            Assert.True(v.Equals(Impulse.FromNewtonSeconds(0.9999), Impulse.FromNewtonSeconds(0.001m)));
            Assert.False(v.Equals(Impulse.FromNewtonSeconds(0.99), Impulse.FromNewtonSeconds(0.001m)));
            Assert.False(v.Equals(Impulse.Zero, Impulse.FromNewtonSeconds(0.001m)));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Impulse.FromNewtonSeconds(1);
            var negativeTolerance = Impulse.FromNewtonSeconds(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Impulse.FromNewtonSeconds(1), negativeTolerance));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Impulse newtonsecond = Impulse.FromNewtonSeconds(1);
            Assert.False(newtonsecond.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Impulse newtonsecond = Impulse.FromNewtonSeconds(1);
            Assert.False(newtonsecond.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(ImpulseUnit)).Cast<ImpulseUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Impulse.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentCulture;
            Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 cN·s", new Impulse(1, ImpulseUnit.CentinewtonSecond).ToString());
                Assert.Equal("1 daN·s", new Impulse(1, ImpulseUnit.DecanewtonSecond).ToString());
                Assert.Equal("1 dN·s", new Impulse(1, ImpulseUnit.DecinewtonSecond).ToString());
                Assert.Equal("1 kg·m/s", new Impulse(1, ImpulseUnit.KilogramMeterPerSecond).ToString());
                Assert.Equal("1 kN·s", new Impulse(1, ImpulseUnit.KilonewtonSecond).ToString());
                Assert.Equal("1 MN·s", new Impulse(1, ImpulseUnit.MeganewtonSecond).ToString());
                Assert.Equal("1 µN·s", new Impulse(1, ImpulseUnit.MicronewtonSecond).ToString());
                Assert.Equal("1 mN·s", new Impulse(1, ImpulseUnit.MillinewtonSecond).ToString());
                Assert.Equal("1 nN·s", new Impulse(1, ImpulseUnit.NanonewtonSecond).ToString());
                Assert.Equal("1 N·s", new Impulse(1, ImpulseUnit.NewtonSecond).ToString());
                Assert.Equal("1 lb·ft/s", new Impulse(1, ImpulseUnit.PoundFootPerSecond).ToString());
                Assert.Equal("1 lbf·s", new Impulse(1, ImpulseUnit.PoundForceSecond).ToString());
                Assert.Equal("1 slug·ft/s", new Impulse(1, ImpulseUnit.SlugFootPerSecond).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cN·s", new Impulse(1, ImpulseUnit.CentinewtonSecond).ToString(swedishCulture));
            Assert.Equal("1 daN·s", new Impulse(1, ImpulseUnit.DecanewtonSecond).ToString(swedishCulture));
            Assert.Equal("1 dN·s", new Impulse(1, ImpulseUnit.DecinewtonSecond).ToString(swedishCulture));
            Assert.Equal("1 kg·m/s", new Impulse(1, ImpulseUnit.KilogramMeterPerSecond).ToString(swedishCulture));
            Assert.Equal("1 kN·s", new Impulse(1, ImpulseUnit.KilonewtonSecond).ToString(swedishCulture));
            Assert.Equal("1 MN·s", new Impulse(1, ImpulseUnit.MeganewtonSecond).ToString(swedishCulture));
            Assert.Equal("1 µN·s", new Impulse(1, ImpulseUnit.MicronewtonSecond).ToString(swedishCulture));
            Assert.Equal("1 mN·s", new Impulse(1, ImpulseUnit.MillinewtonSecond).ToString(swedishCulture));
            Assert.Equal("1 nN·s", new Impulse(1, ImpulseUnit.NanonewtonSecond).ToString(swedishCulture));
            Assert.Equal("1 N·s", new Impulse(1, ImpulseUnit.NewtonSecond).ToString(swedishCulture));
            Assert.Equal("1 lb·ft/s", new Impulse(1, ImpulseUnit.PoundFootPerSecond).ToString(swedishCulture));
            Assert.Equal("1 lbf·s", new Impulse(1, ImpulseUnit.PoundForceSecond).ToString(swedishCulture));
            Assert.Equal("1 slug·ft/s", new Impulse(1, ImpulseUnit.SlugFootPerSecond).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentCulture;
            try
            {
                CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 N·s", new Impulse(0.123456, ImpulseUnit.NewtonSecond).ToString("s1"));
                Assert.Equal("0.12 N·s", new Impulse(0.123456, ImpulseUnit.NewtonSecond).ToString("s2"));
                Assert.Equal("0.123 N·s", new Impulse(0.123456, ImpulseUnit.NewtonSecond).ToString("s3"));
                Assert.Equal("0.1235 N·s", new Impulse(0.123456, ImpulseUnit.NewtonSecond).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentCulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 N·s", new Impulse(0.123456, ImpulseUnit.NewtonSecond).ToString("s1", culture));
            Assert.Equal("0.12 N·s", new Impulse(0.123456, ImpulseUnit.NewtonSecond).ToString("s2", culture));
            Assert.Equal("0.123 N·s", new Impulse(0.123456, ImpulseUnit.NewtonSecond).ToString("s3", culture));
            Assert.Equal("0.1235 N·s", new Impulse(0.123456, ImpulseUnit.NewtonSecond).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Impulse.FromNewtonSeconds(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("g", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Impulse.FromNewtonSeconds(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = Impulse.FromNewtonSeconds(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = Impulse.FromNewtonSeconds(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = Impulse.FromNewtonSeconds(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = Impulse.FromNewtonSeconds(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = Impulse.FromNewtonSeconds(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = Impulse.FromNewtonSeconds(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = Impulse.FromNewtonSeconds(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = Impulse.FromNewtonSeconds(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = Impulse.FromNewtonSeconds(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = Impulse.FromNewtonSeconds(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = Impulse.FromNewtonSeconds(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = Impulse.FromNewtonSeconds(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = Impulse.FromNewtonSeconds(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = Impulse.FromNewtonSeconds(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = Impulse.FromNewtonSeconds(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = Impulse.FromNewtonSeconds(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(Impulse)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = Impulse.FromNewtonSeconds(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(ImpulseUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = Impulse.FromNewtonSeconds(1.0);
            Assert.Equal(Impulse.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = Impulse.FromNewtonSeconds(1.0);
            Assert.Equal(Impulse.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = Impulse.FromNewtonSeconds(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Impulse.FromNewtonSeconds(1.0);
            #if NET7_0_OR_GREATER
            var expected = HashCode.Combine(Impulse.Info.Name, quantity.NewtonSeconds);
            #else
            var expected = new {Impulse.Info.Name, valueInBaseUnit = quantity.NewtonSeconds}.GetHashCode();
            #endif
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Impulse.FromNewtonSeconds(value);
            Assert.Equal(Impulse.FromNewtonSeconds(-value), -quantity);
        }
    }
}
