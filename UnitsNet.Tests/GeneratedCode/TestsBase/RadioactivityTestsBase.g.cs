//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Radioactivity.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class RadioactivityTestsBase : QuantityTestsBase
    {
        protected abstract double BecquerelsInOneBecquerel { get; }
        protected abstract double CuriesInOneBecquerel { get; }
        protected abstract double ExabecquerelsInOneBecquerel { get; }
        protected abstract double GigabecquerelsInOneBecquerel { get; }
        protected abstract double GigacuriesInOneBecquerel { get; }
        protected abstract double GigarutherfordsInOneBecquerel { get; }
        protected abstract double KilobecquerelsInOneBecquerel { get; }
        protected abstract double KilocuriesInOneBecquerel { get; }
        protected abstract double KilorutherfordsInOneBecquerel { get; }
        protected abstract double MegabecquerelsInOneBecquerel { get; }
        protected abstract double MegacuriesInOneBecquerel { get; }
        protected abstract double MegarutherfordsInOneBecquerel { get; }
        protected abstract double MicrobecquerelsInOneBecquerel { get; }
        protected abstract double MicrocuriesInOneBecquerel { get; }
        protected abstract double MicrorutherfordsInOneBecquerel { get; }
        protected abstract double MillibecquerelsInOneBecquerel { get; }
        protected abstract double MillicuriesInOneBecquerel { get; }
        protected abstract double MillirutherfordsInOneBecquerel { get; }
        protected abstract double NanobecquerelsInOneBecquerel { get; }
        protected abstract double NanocuriesInOneBecquerel { get; }
        protected abstract double NanorutherfordsInOneBecquerel { get; }
        protected abstract double PetabecquerelsInOneBecquerel { get; }
        protected abstract double PicobecquerelsInOneBecquerel { get; }
        protected abstract double PicocuriesInOneBecquerel { get; }
        protected abstract double PicorutherfordsInOneBecquerel { get; }
        protected abstract double RutherfordsInOneBecquerel { get; }
        protected abstract double TerabecquerelsInOneBecquerel { get; }
        protected abstract double TeracuriesInOneBecquerel { get; }
        protected abstract double TerarutherfordsInOneBecquerel { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double BecquerelsTolerance { get { return 1e-5; } }
        protected virtual double CuriesTolerance { get { return 1e-5; } }
        protected virtual double ExabecquerelsTolerance { get { return 1e-5; } }
        protected virtual double GigabecquerelsTolerance { get { return 1e-5; } }
        protected virtual double GigacuriesTolerance { get { return 1e-5; } }
        protected virtual double GigarutherfordsTolerance { get { return 1e-5; } }
        protected virtual double KilobecquerelsTolerance { get { return 1e-5; } }
        protected virtual double KilocuriesTolerance { get { return 1e-5; } }
        protected virtual double KilorutherfordsTolerance { get { return 1e-5; } }
        protected virtual double MegabecquerelsTolerance { get { return 1e-5; } }
        protected virtual double MegacuriesTolerance { get { return 1e-5; } }
        protected virtual double MegarutherfordsTolerance { get { return 1e-5; } }
        protected virtual double MicrobecquerelsTolerance { get { return 1e-5; } }
        protected virtual double MicrocuriesTolerance { get { return 1e-5; } }
        protected virtual double MicrorutherfordsTolerance { get { return 1e-5; } }
        protected virtual double MillibecquerelsTolerance { get { return 1e-5; } }
        protected virtual double MillicuriesTolerance { get { return 1e-5; } }
        protected virtual double MillirutherfordsTolerance { get { return 1e-5; } }
        protected virtual double NanobecquerelsTolerance { get { return 1e-5; } }
        protected virtual double NanocuriesTolerance { get { return 1e-5; } }
        protected virtual double NanorutherfordsTolerance { get { return 1e-5; } }
        protected virtual double PetabecquerelsTolerance { get { return 1e-5; } }
        protected virtual double PicobecquerelsTolerance { get { return 1e-5; } }
        protected virtual double PicocuriesTolerance { get { return 1e-5; } }
        protected virtual double PicorutherfordsTolerance { get { return 1e-5; } }
        protected virtual double RutherfordsTolerance { get { return 1e-5; } }
        protected virtual double TerabecquerelsTolerance { get { return 1e-5; } }
        protected virtual double TeracuriesTolerance { get { return 1e-5; } }
        protected virtual double TerarutherfordsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(RadioactivityUnit unit)
        {
            return unit switch
            {
                RadioactivityUnit.Becquerel => (BecquerelsInOneBecquerel, BecquerelsTolerance),
                RadioactivityUnit.Curie => (CuriesInOneBecquerel, CuriesTolerance),
                RadioactivityUnit.Exabecquerel => (ExabecquerelsInOneBecquerel, ExabecquerelsTolerance),
                RadioactivityUnit.Gigabecquerel => (GigabecquerelsInOneBecquerel, GigabecquerelsTolerance),
                RadioactivityUnit.Gigacurie => (GigacuriesInOneBecquerel, GigacuriesTolerance),
                RadioactivityUnit.Gigarutherford => (GigarutherfordsInOneBecquerel, GigarutherfordsTolerance),
                RadioactivityUnit.Kilobecquerel => (KilobecquerelsInOneBecquerel, KilobecquerelsTolerance),
                RadioactivityUnit.Kilocurie => (KilocuriesInOneBecquerel, KilocuriesTolerance),
                RadioactivityUnit.Kilorutherford => (KilorutherfordsInOneBecquerel, KilorutherfordsTolerance),
                RadioactivityUnit.Megabecquerel => (MegabecquerelsInOneBecquerel, MegabecquerelsTolerance),
                RadioactivityUnit.Megacurie => (MegacuriesInOneBecquerel, MegacuriesTolerance),
                RadioactivityUnit.Megarutherford => (MegarutherfordsInOneBecquerel, MegarutherfordsTolerance),
                RadioactivityUnit.Microbecquerel => (MicrobecquerelsInOneBecquerel, MicrobecquerelsTolerance),
                RadioactivityUnit.Microcurie => (MicrocuriesInOneBecquerel, MicrocuriesTolerance),
                RadioactivityUnit.Microrutherford => (MicrorutherfordsInOneBecquerel, MicrorutherfordsTolerance),
                RadioactivityUnit.Millibecquerel => (MillibecquerelsInOneBecquerel, MillibecquerelsTolerance),
                RadioactivityUnit.Millicurie => (MillicuriesInOneBecquerel, MillicuriesTolerance),
                RadioactivityUnit.Millirutherford => (MillirutherfordsInOneBecquerel, MillirutherfordsTolerance),
                RadioactivityUnit.Nanobecquerel => (NanobecquerelsInOneBecquerel, NanobecquerelsTolerance),
                RadioactivityUnit.Nanocurie => (NanocuriesInOneBecquerel, NanocuriesTolerance),
                RadioactivityUnit.Nanorutherford => (NanorutherfordsInOneBecquerel, NanorutherfordsTolerance),
                RadioactivityUnit.Petabecquerel => (PetabecquerelsInOneBecquerel, PetabecquerelsTolerance),
                RadioactivityUnit.Picobecquerel => (PicobecquerelsInOneBecquerel, PicobecquerelsTolerance),
                RadioactivityUnit.Picocurie => (PicocuriesInOneBecquerel, PicocuriesTolerance),
                RadioactivityUnit.Picorutherford => (PicorutherfordsInOneBecquerel, PicorutherfordsTolerance),
                RadioactivityUnit.Rutherford => (RutherfordsInOneBecquerel, RutherfordsTolerance),
                RadioactivityUnit.Terabecquerel => (TerabecquerelsInOneBecquerel, TerabecquerelsTolerance),
                RadioactivityUnit.Teracurie => (TeracuriesInOneBecquerel, TeracuriesTolerance),
                RadioactivityUnit.Terarutherford => (TerarutherfordsInOneBecquerel, TerarutherfordsTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { RadioactivityUnit.Becquerel },
            new object[] { RadioactivityUnit.Curie },
            new object[] { RadioactivityUnit.Exabecquerel },
            new object[] { RadioactivityUnit.Gigabecquerel },
            new object[] { RadioactivityUnit.Gigacurie },
            new object[] { RadioactivityUnit.Gigarutherford },
            new object[] { RadioactivityUnit.Kilobecquerel },
            new object[] { RadioactivityUnit.Kilocurie },
            new object[] { RadioactivityUnit.Kilorutherford },
            new object[] { RadioactivityUnit.Megabecquerel },
            new object[] { RadioactivityUnit.Megacurie },
            new object[] { RadioactivityUnit.Megarutherford },
            new object[] { RadioactivityUnit.Microbecquerel },
            new object[] { RadioactivityUnit.Microcurie },
            new object[] { RadioactivityUnit.Microrutherford },
            new object[] { RadioactivityUnit.Millibecquerel },
            new object[] { RadioactivityUnit.Millicurie },
            new object[] { RadioactivityUnit.Millirutherford },
            new object[] { RadioactivityUnit.Nanobecquerel },
            new object[] { RadioactivityUnit.Nanocurie },
            new object[] { RadioactivityUnit.Nanorutherford },
            new object[] { RadioactivityUnit.Petabecquerel },
            new object[] { RadioactivityUnit.Picobecquerel },
            new object[] { RadioactivityUnit.Picocurie },
            new object[] { RadioactivityUnit.Picorutherford },
            new object[] { RadioactivityUnit.Rutherford },
            new object[] { RadioactivityUnit.Terabecquerel },
            new object[] { RadioactivityUnit.Teracurie },
            new object[] { RadioactivityUnit.Terarutherford },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Radioactivity();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(RadioactivityUnit.Becquerel, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Radioactivity(double.PositiveInfinity, RadioactivityUnit.Becquerel));
            var exception2 = Record.Exception(() => new Radioactivity(double.NegativeInfinity, RadioactivityUnit.Becquerel));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Radioactivity(double.NaN, RadioactivityUnit.Becquerel));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Radioactivity(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            if (SupportsSIUnitSystem)
            {
                var quantity = new Radioactivity(value: 1, unitSystem: UnitSystem.SI);
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(() => new Radioactivity(value: 1, unitSystem: UnitSystem.SI));
            }
        }

        [Fact]
        public void Radioactivity_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Radioactivity(1, RadioactivityUnit.Becquerel);

            QuantityInfo<RadioactivityUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Radioactivity.Zero, quantityInfo.Zero);
            Assert.Equal("Radioactivity", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<RadioactivityUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void BecquerelToRadioactivityUnits()
        {
            Radioactivity becquerel = Radioactivity.FromBecquerels(1);
            AssertEx.EqualTolerance(BecquerelsInOneBecquerel, becquerel.Becquerels, BecquerelsTolerance);
            AssertEx.EqualTolerance(CuriesInOneBecquerel, becquerel.Curies, CuriesTolerance);
            AssertEx.EqualTolerance(ExabecquerelsInOneBecquerel, becquerel.Exabecquerels, ExabecquerelsTolerance);
            AssertEx.EqualTolerance(GigabecquerelsInOneBecquerel, becquerel.Gigabecquerels, GigabecquerelsTolerance);
            AssertEx.EqualTolerance(GigacuriesInOneBecquerel, becquerel.Gigacuries, GigacuriesTolerance);
            AssertEx.EqualTolerance(GigarutherfordsInOneBecquerel, becquerel.Gigarutherfords, GigarutherfordsTolerance);
            AssertEx.EqualTolerance(KilobecquerelsInOneBecquerel, becquerel.Kilobecquerels, KilobecquerelsTolerance);
            AssertEx.EqualTolerance(KilocuriesInOneBecquerel, becquerel.Kilocuries, KilocuriesTolerance);
            AssertEx.EqualTolerance(KilorutherfordsInOneBecquerel, becquerel.Kilorutherfords, KilorutherfordsTolerance);
            AssertEx.EqualTolerance(MegabecquerelsInOneBecquerel, becquerel.Megabecquerels, MegabecquerelsTolerance);
            AssertEx.EqualTolerance(MegacuriesInOneBecquerel, becquerel.Megacuries, MegacuriesTolerance);
            AssertEx.EqualTolerance(MegarutherfordsInOneBecquerel, becquerel.Megarutherfords, MegarutherfordsTolerance);
            AssertEx.EqualTolerance(MicrobecquerelsInOneBecquerel, becquerel.Microbecquerels, MicrobecquerelsTolerance);
            AssertEx.EqualTolerance(MicrocuriesInOneBecquerel, becquerel.Microcuries, MicrocuriesTolerance);
            AssertEx.EqualTolerance(MicrorutherfordsInOneBecquerel, becquerel.Microrutherfords, MicrorutherfordsTolerance);
            AssertEx.EqualTolerance(MillibecquerelsInOneBecquerel, becquerel.Millibecquerels, MillibecquerelsTolerance);
            AssertEx.EqualTolerance(MillicuriesInOneBecquerel, becquerel.Millicuries, MillicuriesTolerance);
            AssertEx.EqualTolerance(MillirutherfordsInOneBecquerel, becquerel.Millirutherfords, MillirutherfordsTolerance);
            AssertEx.EqualTolerance(NanobecquerelsInOneBecquerel, becquerel.Nanobecquerels, NanobecquerelsTolerance);
            AssertEx.EqualTolerance(NanocuriesInOneBecquerel, becquerel.Nanocuries, NanocuriesTolerance);
            AssertEx.EqualTolerance(NanorutherfordsInOneBecquerel, becquerel.Nanorutherfords, NanorutherfordsTolerance);
            AssertEx.EqualTolerance(PetabecquerelsInOneBecquerel, becquerel.Petabecquerels, PetabecquerelsTolerance);
            AssertEx.EqualTolerance(PicobecquerelsInOneBecquerel, becquerel.Picobecquerels, PicobecquerelsTolerance);
            AssertEx.EqualTolerance(PicocuriesInOneBecquerel, becquerel.Picocuries, PicocuriesTolerance);
            AssertEx.EqualTolerance(PicorutherfordsInOneBecquerel, becquerel.Picorutherfords, PicorutherfordsTolerance);
            AssertEx.EqualTolerance(RutherfordsInOneBecquerel, becquerel.Rutherfords, RutherfordsTolerance);
            AssertEx.EqualTolerance(TerabecquerelsInOneBecquerel, becquerel.Terabecquerels, TerabecquerelsTolerance);
            AssertEx.EqualTolerance(TeracuriesInOneBecquerel, becquerel.Teracuries, TeracuriesTolerance);
            AssertEx.EqualTolerance(TerarutherfordsInOneBecquerel, becquerel.Terarutherfords, TerarutherfordsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Radioactivity.From(1, RadioactivityUnit.Becquerel);
            Assert.Equal(1, quantity00.Becquerels);
            Assert.Equal(RadioactivityUnit.Becquerel, quantity00.Unit);

            var quantity01 = Radioactivity.From(1, RadioactivityUnit.Curie);
            Assert.Equal(1, quantity01.Curies);
            Assert.Equal(RadioactivityUnit.Curie, quantity01.Unit);

            var quantity02 = Radioactivity.From(1, RadioactivityUnit.Exabecquerel);
            Assert.Equal(1, quantity02.Exabecquerels);
            Assert.Equal(RadioactivityUnit.Exabecquerel, quantity02.Unit);

            var quantity03 = Radioactivity.From(1, RadioactivityUnit.Gigabecquerel);
            Assert.Equal(1, quantity03.Gigabecquerels);
            Assert.Equal(RadioactivityUnit.Gigabecquerel, quantity03.Unit);

            var quantity04 = Radioactivity.From(1, RadioactivityUnit.Gigacurie);
            Assert.Equal(1, quantity04.Gigacuries);
            Assert.Equal(RadioactivityUnit.Gigacurie, quantity04.Unit);

            var quantity05 = Radioactivity.From(1, RadioactivityUnit.Gigarutherford);
            Assert.Equal(1, quantity05.Gigarutherfords);
            Assert.Equal(RadioactivityUnit.Gigarutherford, quantity05.Unit);

            var quantity06 = Radioactivity.From(1, RadioactivityUnit.Kilobecquerel);
            Assert.Equal(1, quantity06.Kilobecquerels);
            Assert.Equal(RadioactivityUnit.Kilobecquerel, quantity06.Unit);

            var quantity07 = Radioactivity.From(1, RadioactivityUnit.Kilocurie);
            Assert.Equal(1, quantity07.Kilocuries);
            Assert.Equal(RadioactivityUnit.Kilocurie, quantity07.Unit);

            var quantity08 = Radioactivity.From(1, RadioactivityUnit.Kilorutherford);
            Assert.Equal(1, quantity08.Kilorutherfords);
            Assert.Equal(RadioactivityUnit.Kilorutherford, quantity08.Unit);

            var quantity09 = Radioactivity.From(1, RadioactivityUnit.Megabecquerel);
            Assert.Equal(1, quantity09.Megabecquerels);
            Assert.Equal(RadioactivityUnit.Megabecquerel, quantity09.Unit);

            var quantity10 = Radioactivity.From(1, RadioactivityUnit.Megacurie);
            Assert.Equal(1, quantity10.Megacuries);
            Assert.Equal(RadioactivityUnit.Megacurie, quantity10.Unit);

            var quantity11 = Radioactivity.From(1, RadioactivityUnit.Megarutherford);
            Assert.Equal(1, quantity11.Megarutherfords);
            Assert.Equal(RadioactivityUnit.Megarutherford, quantity11.Unit);

            var quantity12 = Radioactivity.From(1, RadioactivityUnit.Microbecquerel);
            Assert.Equal(1, quantity12.Microbecquerels);
            Assert.Equal(RadioactivityUnit.Microbecquerel, quantity12.Unit);

            var quantity13 = Radioactivity.From(1, RadioactivityUnit.Microcurie);
            Assert.Equal(1, quantity13.Microcuries);
            Assert.Equal(RadioactivityUnit.Microcurie, quantity13.Unit);

            var quantity14 = Radioactivity.From(1, RadioactivityUnit.Microrutherford);
            Assert.Equal(1, quantity14.Microrutherfords);
            Assert.Equal(RadioactivityUnit.Microrutherford, quantity14.Unit);

            var quantity15 = Radioactivity.From(1, RadioactivityUnit.Millibecquerel);
            Assert.Equal(1, quantity15.Millibecquerels);
            Assert.Equal(RadioactivityUnit.Millibecquerel, quantity15.Unit);

            var quantity16 = Radioactivity.From(1, RadioactivityUnit.Millicurie);
            Assert.Equal(1, quantity16.Millicuries);
            Assert.Equal(RadioactivityUnit.Millicurie, quantity16.Unit);

            var quantity17 = Radioactivity.From(1, RadioactivityUnit.Millirutherford);
            Assert.Equal(1, quantity17.Millirutherfords);
            Assert.Equal(RadioactivityUnit.Millirutherford, quantity17.Unit);

            var quantity18 = Radioactivity.From(1, RadioactivityUnit.Nanobecquerel);
            Assert.Equal(1, quantity18.Nanobecquerels);
            Assert.Equal(RadioactivityUnit.Nanobecquerel, quantity18.Unit);

            var quantity19 = Radioactivity.From(1, RadioactivityUnit.Nanocurie);
            Assert.Equal(1, quantity19.Nanocuries);
            Assert.Equal(RadioactivityUnit.Nanocurie, quantity19.Unit);

            var quantity20 = Radioactivity.From(1, RadioactivityUnit.Nanorutherford);
            Assert.Equal(1, quantity20.Nanorutherfords);
            Assert.Equal(RadioactivityUnit.Nanorutherford, quantity20.Unit);

            var quantity21 = Radioactivity.From(1, RadioactivityUnit.Petabecquerel);
            Assert.Equal(1, quantity21.Petabecquerels);
            Assert.Equal(RadioactivityUnit.Petabecquerel, quantity21.Unit);

            var quantity22 = Radioactivity.From(1, RadioactivityUnit.Picobecquerel);
            Assert.Equal(1, quantity22.Picobecquerels);
            Assert.Equal(RadioactivityUnit.Picobecquerel, quantity22.Unit);

            var quantity23 = Radioactivity.From(1, RadioactivityUnit.Picocurie);
            Assert.Equal(1, quantity23.Picocuries);
            Assert.Equal(RadioactivityUnit.Picocurie, quantity23.Unit);

            var quantity24 = Radioactivity.From(1, RadioactivityUnit.Picorutherford);
            Assert.Equal(1, quantity24.Picorutherfords);
            Assert.Equal(RadioactivityUnit.Picorutherford, quantity24.Unit);

            var quantity25 = Radioactivity.From(1, RadioactivityUnit.Rutherford);
            Assert.Equal(1, quantity25.Rutherfords);
            Assert.Equal(RadioactivityUnit.Rutherford, quantity25.Unit);

            var quantity26 = Radioactivity.From(1, RadioactivityUnit.Terabecquerel);
            Assert.Equal(1, quantity26.Terabecquerels);
            Assert.Equal(RadioactivityUnit.Terabecquerel, quantity26.Unit);

            var quantity27 = Radioactivity.From(1, RadioactivityUnit.Teracurie);
            Assert.Equal(1, quantity27.Teracuries);
            Assert.Equal(RadioactivityUnit.Teracurie, quantity27.Unit);

            var quantity28 = Radioactivity.From(1, RadioactivityUnit.Terarutherford);
            Assert.Equal(1, quantity28.Terarutherfords);
            Assert.Equal(RadioactivityUnit.Terarutherford, quantity28.Unit);

        }

        [Fact]
        public void FromBecquerels_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Radioactivity.FromBecquerels(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Radioactivity.FromBecquerels(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromBecquerels_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Radioactivity.FromBecquerels(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var becquerel = Radioactivity.FromBecquerels(1);
            AssertEx.EqualTolerance(BecquerelsInOneBecquerel, becquerel.As(RadioactivityUnit.Becquerel), BecquerelsTolerance);
            AssertEx.EqualTolerance(CuriesInOneBecquerel, becquerel.As(RadioactivityUnit.Curie), CuriesTolerance);
            AssertEx.EqualTolerance(ExabecquerelsInOneBecquerel, becquerel.As(RadioactivityUnit.Exabecquerel), ExabecquerelsTolerance);
            AssertEx.EqualTolerance(GigabecquerelsInOneBecquerel, becquerel.As(RadioactivityUnit.Gigabecquerel), GigabecquerelsTolerance);
            AssertEx.EqualTolerance(GigacuriesInOneBecquerel, becquerel.As(RadioactivityUnit.Gigacurie), GigacuriesTolerance);
            AssertEx.EqualTolerance(GigarutherfordsInOneBecquerel, becquerel.As(RadioactivityUnit.Gigarutherford), GigarutherfordsTolerance);
            AssertEx.EqualTolerance(KilobecquerelsInOneBecquerel, becquerel.As(RadioactivityUnit.Kilobecquerel), KilobecquerelsTolerance);
            AssertEx.EqualTolerance(KilocuriesInOneBecquerel, becquerel.As(RadioactivityUnit.Kilocurie), KilocuriesTolerance);
            AssertEx.EqualTolerance(KilorutherfordsInOneBecquerel, becquerel.As(RadioactivityUnit.Kilorutherford), KilorutherfordsTolerance);
            AssertEx.EqualTolerance(MegabecquerelsInOneBecquerel, becquerel.As(RadioactivityUnit.Megabecquerel), MegabecquerelsTolerance);
            AssertEx.EqualTolerance(MegacuriesInOneBecquerel, becquerel.As(RadioactivityUnit.Megacurie), MegacuriesTolerance);
            AssertEx.EqualTolerance(MegarutherfordsInOneBecquerel, becquerel.As(RadioactivityUnit.Megarutherford), MegarutherfordsTolerance);
            AssertEx.EqualTolerance(MicrobecquerelsInOneBecquerel, becquerel.As(RadioactivityUnit.Microbecquerel), MicrobecquerelsTolerance);
            AssertEx.EqualTolerance(MicrocuriesInOneBecquerel, becquerel.As(RadioactivityUnit.Microcurie), MicrocuriesTolerance);
            AssertEx.EqualTolerance(MicrorutherfordsInOneBecquerel, becquerel.As(RadioactivityUnit.Microrutherford), MicrorutherfordsTolerance);
            AssertEx.EqualTolerance(MillibecquerelsInOneBecquerel, becquerel.As(RadioactivityUnit.Millibecquerel), MillibecquerelsTolerance);
            AssertEx.EqualTolerance(MillicuriesInOneBecquerel, becquerel.As(RadioactivityUnit.Millicurie), MillicuriesTolerance);
            AssertEx.EqualTolerance(MillirutherfordsInOneBecquerel, becquerel.As(RadioactivityUnit.Millirutherford), MillirutherfordsTolerance);
            AssertEx.EqualTolerance(NanobecquerelsInOneBecquerel, becquerel.As(RadioactivityUnit.Nanobecquerel), NanobecquerelsTolerance);
            AssertEx.EqualTolerance(NanocuriesInOneBecquerel, becquerel.As(RadioactivityUnit.Nanocurie), NanocuriesTolerance);
            AssertEx.EqualTolerance(NanorutherfordsInOneBecquerel, becquerel.As(RadioactivityUnit.Nanorutherford), NanorutherfordsTolerance);
            AssertEx.EqualTolerance(PetabecquerelsInOneBecquerel, becquerel.As(RadioactivityUnit.Petabecquerel), PetabecquerelsTolerance);
            AssertEx.EqualTolerance(PicobecquerelsInOneBecquerel, becquerel.As(RadioactivityUnit.Picobecquerel), PicobecquerelsTolerance);
            AssertEx.EqualTolerance(PicocuriesInOneBecquerel, becquerel.As(RadioactivityUnit.Picocurie), PicocuriesTolerance);
            AssertEx.EqualTolerance(PicorutherfordsInOneBecquerel, becquerel.As(RadioactivityUnit.Picorutherford), PicorutherfordsTolerance);
            AssertEx.EqualTolerance(RutherfordsInOneBecquerel, becquerel.As(RadioactivityUnit.Rutherford), RutherfordsTolerance);
            AssertEx.EqualTolerance(TerabecquerelsInOneBecquerel, becquerel.As(RadioactivityUnit.Terabecquerel), TerabecquerelsTolerance);
            AssertEx.EqualTolerance(TeracuriesInOneBecquerel, becquerel.As(RadioactivityUnit.Teracurie), TeracuriesTolerance);
            AssertEx.EqualTolerance(TerarutherfordsInOneBecquerel, becquerel.As(RadioactivityUnit.Terarutherford), TerarutherfordsTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Radioactivity(value: 1, unit: Radioactivity.BaseUnit);
            if (SupportsSIUnitSystem)
            {
                Assert.Equal(1, quantity.As(UnitSystem.SI));
            }
            else
            {
                Assert.Throws<ArgumentException>(() => quantity.As(UnitSystem.SI));
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = Radioactivity.Parse("1 Bq", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Becquerels);
                Assert.Equal(RadioactivityUnit.Becquerel, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 Бк", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Becquerels);
                Assert.Equal(RadioactivityUnit.Becquerel, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 Ci", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Curies);
                Assert.Equal(RadioactivityUnit.Curie, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 Ки", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Curies);
                Assert.Equal(RadioactivityUnit.Curie, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 EBq", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Exabecquerels);
                Assert.Equal(RadioactivityUnit.Exabecquerel, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 ЭБк", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Exabecquerels);
                Assert.Equal(RadioactivityUnit.Exabecquerel, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 GBq", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Gigabecquerels);
                Assert.Equal(RadioactivityUnit.Gigabecquerel, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 ГБк", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Gigabecquerels);
                Assert.Equal(RadioactivityUnit.Gigabecquerel, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 GCi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Gigacuries);
                Assert.Equal(RadioactivityUnit.Gigacurie, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 ГКи", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Gigacuries);
                Assert.Equal(RadioactivityUnit.Gigacurie, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 GRd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Gigarutherfords);
                Assert.Equal(RadioactivityUnit.Gigarutherford, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 ГРд", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Gigarutherfords);
                Assert.Equal(RadioactivityUnit.Gigarutherford, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 kBq", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Kilobecquerels);
                Assert.Equal(RadioactivityUnit.Kilobecquerel, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 кБк", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Kilobecquerels);
                Assert.Equal(RadioactivityUnit.Kilobecquerel, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 kCi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Kilocuries);
                Assert.Equal(RadioactivityUnit.Kilocurie, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 кКи", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Kilocuries);
                Assert.Equal(RadioactivityUnit.Kilocurie, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 kRd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Kilorutherfords);
                Assert.Equal(RadioactivityUnit.Kilorutherford, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 кРд", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Kilorutherfords);
                Assert.Equal(RadioactivityUnit.Kilorutherford, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 MBq", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Megabecquerels);
                Assert.Equal(RadioactivityUnit.Megabecquerel, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 МБк", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Megabecquerels);
                Assert.Equal(RadioactivityUnit.Megabecquerel, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 MCi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Megacuries);
                Assert.Equal(RadioactivityUnit.Megacurie, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 МКи", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Megacuries);
                Assert.Equal(RadioactivityUnit.Megacurie, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 MRd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Megarutherfords);
                Assert.Equal(RadioactivityUnit.Megarutherford, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 МРд", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Megarutherfords);
                Assert.Equal(RadioactivityUnit.Megarutherford, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 µBq", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Microbecquerels);
                Assert.Equal(RadioactivityUnit.Microbecquerel, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 мкБк", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Microbecquerels);
                Assert.Equal(RadioactivityUnit.Microbecquerel, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 µCi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Microcuries);
                Assert.Equal(RadioactivityUnit.Microcurie, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 мкКи", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Microcuries);
                Assert.Equal(RadioactivityUnit.Microcurie, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 µRd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Microrutherfords);
                Assert.Equal(RadioactivityUnit.Microrutherford, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 мкРд", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Microrutherfords);
                Assert.Equal(RadioactivityUnit.Microrutherford, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 mBq", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Millibecquerels);
                Assert.Equal(RadioactivityUnit.Millibecquerel, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 мБк", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Millibecquerels);
                Assert.Equal(RadioactivityUnit.Millibecquerel, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 mCi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Millicuries);
                Assert.Equal(RadioactivityUnit.Millicurie, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 мКи", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Millicuries);
                Assert.Equal(RadioactivityUnit.Millicurie, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 mRd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Millirutherfords);
                Assert.Equal(RadioactivityUnit.Millirutherford, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 мРд", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Millirutherfords);
                Assert.Equal(RadioactivityUnit.Millirutherford, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 nBq", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Nanobecquerels);
                Assert.Equal(RadioactivityUnit.Nanobecquerel, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 нБк", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Nanobecquerels);
                Assert.Equal(RadioactivityUnit.Nanobecquerel, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 nCi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Nanocuries);
                Assert.Equal(RadioactivityUnit.Nanocurie, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 нКи", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Nanocuries);
                Assert.Equal(RadioactivityUnit.Nanocurie, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 nRd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Nanorutherfords);
                Assert.Equal(RadioactivityUnit.Nanorutherford, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 нРд", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Nanorutherfords);
                Assert.Equal(RadioactivityUnit.Nanorutherford, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 PBq", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Petabecquerels);
                Assert.Equal(RadioactivityUnit.Petabecquerel, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 ПБк", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Petabecquerels);
                Assert.Equal(RadioactivityUnit.Petabecquerel, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 pBq", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Picobecquerels);
                Assert.Equal(RadioactivityUnit.Picobecquerel, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 пБк", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Picobecquerels);
                Assert.Equal(RadioactivityUnit.Picobecquerel, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 pCi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Picocuries);
                Assert.Equal(RadioactivityUnit.Picocurie, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 пКи", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Picocuries);
                Assert.Equal(RadioactivityUnit.Picocurie, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 pRd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Picorutherfords);
                Assert.Equal(RadioactivityUnit.Picorutherford, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 пРд", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Picorutherfords);
                Assert.Equal(RadioactivityUnit.Picorutherford, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 Rd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Rutherfords);
                Assert.Equal(RadioactivityUnit.Rutherford, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 Рд", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Rutherfords);
                Assert.Equal(RadioactivityUnit.Rutherford, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 TBq", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Terabecquerels);
                Assert.Equal(RadioactivityUnit.Terabecquerel, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 ТБк", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Terabecquerels);
                Assert.Equal(RadioactivityUnit.Terabecquerel, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 TCi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Teracuries);
                Assert.Equal(RadioactivityUnit.Teracurie, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 ТКи", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Teracuries);
                Assert.Equal(RadioactivityUnit.Teracurie, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 TRd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Terarutherfords);
                Assert.Equal(RadioactivityUnit.Terarutherford, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Radioactivity.Parse("1 ТРд", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Terarutherfords);
                Assert.Equal(RadioactivityUnit.Terarutherford, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(Radioactivity.TryParse("1 Bq", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Becquerels);
                Assert.Equal(RadioactivityUnit.Becquerel, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 Бк", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Becquerels);
                Assert.Equal(RadioactivityUnit.Becquerel, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 Ci", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Curies);
                Assert.Equal(RadioactivityUnit.Curie, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 Ки", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Curies);
                Assert.Equal(RadioactivityUnit.Curie, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 EBq", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Exabecquerels);
                Assert.Equal(RadioactivityUnit.Exabecquerel, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 ЭБк", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Exabecquerels);
                Assert.Equal(RadioactivityUnit.Exabecquerel, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 GBq", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Gigabecquerels);
                Assert.Equal(RadioactivityUnit.Gigabecquerel, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 ГБк", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Gigabecquerels);
                Assert.Equal(RadioactivityUnit.Gigabecquerel, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 GCi", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Gigacuries);
                Assert.Equal(RadioactivityUnit.Gigacurie, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 ГКи", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Gigacuries);
                Assert.Equal(RadioactivityUnit.Gigacurie, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 GRd", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Gigarutherfords);
                Assert.Equal(RadioactivityUnit.Gigarutherford, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 ГРд", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Gigarutherfords);
                Assert.Equal(RadioactivityUnit.Gigarutherford, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 kBq", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Kilobecquerels);
                Assert.Equal(RadioactivityUnit.Kilobecquerel, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 кБк", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Kilobecquerels);
                Assert.Equal(RadioactivityUnit.Kilobecquerel, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 kCi", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Kilocuries);
                Assert.Equal(RadioactivityUnit.Kilocurie, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 кКи", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Kilocuries);
                Assert.Equal(RadioactivityUnit.Kilocurie, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 kRd", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Kilorutherfords);
                Assert.Equal(RadioactivityUnit.Kilorutherford, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 кРд", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Kilorutherfords);
                Assert.Equal(RadioactivityUnit.Kilorutherford, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 µBq", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Microbecquerels);
                Assert.Equal(RadioactivityUnit.Microbecquerel, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 мкБк", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Microbecquerels);
                Assert.Equal(RadioactivityUnit.Microbecquerel, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 µCi", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Microcuries);
                Assert.Equal(RadioactivityUnit.Microcurie, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 мкКи", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Microcuries);
                Assert.Equal(RadioactivityUnit.Microcurie, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 µRd", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Microrutherfords);
                Assert.Equal(RadioactivityUnit.Microrutherford, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 мкРд", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Microrutherfords);
                Assert.Equal(RadioactivityUnit.Microrutherford, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 nBq", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Nanobecquerels);
                Assert.Equal(RadioactivityUnit.Nanobecquerel, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 нБк", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Nanobecquerels);
                Assert.Equal(RadioactivityUnit.Nanobecquerel, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 nCi", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Nanocuries);
                Assert.Equal(RadioactivityUnit.Nanocurie, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 нКи", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Nanocuries);
                Assert.Equal(RadioactivityUnit.Nanocurie, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 nRd", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Nanorutherfords);
                Assert.Equal(RadioactivityUnit.Nanorutherford, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 нРд", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Nanorutherfords);
                Assert.Equal(RadioactivityUnit.Nanorutherford, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 pCi", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Picocuries);
                Assert.Equal(RadioactivityUnit.Picocurie, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 пКи", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Picocuries);
                Assert.Equal(RadioactivityUnit.Picocurie, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 pRd", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Picorutherfords);
                Assert.Equal(RadioactivityUnit.Picorutherford, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 пРд", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Picorutherfords);
                Assert.Equal(RadioactivityUnit.Picorutherford, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 Rd", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Rutherfords);
                Assert.Equal(RadioactivityUnit.Rutherford, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 Рд", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Rutherfords);
                Assert.Equal(RadioactivityUnit.Rutherford, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 TBq", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Terabecquerels);
                Assert.Equal(RadioactivityUnit.Terabecquerel, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 ТБк", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Terabecquerels);
                Assert.Equal(RadioactivityUnit.Terabecquerel, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 TCi", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Teracuries);
                Assert.Equal(RadioactivityUnit.Teracurie, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 ТКи", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Teracuries);
                Assert.Equal(RadioactivityUnit.Teracurie, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 TRd", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Terarutherfords);
                Assert.Equal(RadioactivityUnit.Terarutherford, parsed.Unit);
            }

            {
                Assert.True(Radioactivity.TryParse("1 ТРд", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Terarutherfords);
                Assert.Equal(RadioactivityUnit.Terarutherford, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = Radioactivity.ParseUnit("Bq", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Becquerel, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("Бк", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Becquerel, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("Ci", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Curie, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("Ки", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Curie, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("EBq", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Exabecquerel, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("ЭБк", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Exabecquerel, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("GBq", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Gigabecquerel, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("ГБк", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Gigabecquerel, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("GCi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Gigacurie, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("ГКи", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Gigacurie, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("GRd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Gigarutherford, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("ГРд", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Gigarutherford, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("kBq", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Kilobecquerel, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("кБк", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Kilobecquerel, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("kCi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Kilocurie, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("кКи", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Kilocurie, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("kRd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Kilorutherford, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("кРд", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Kilorutherford, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("MBq", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Megabecquerel, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("МБк", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Megabecquerel, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("MCi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Megacurie, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("МКи", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Megacurie, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("MRd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Megarutherford, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("МРд", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Megarutherford, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("µBq", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Microbecquerel, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("мкБк", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Microbecquerel, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("µCi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Microcurie, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("мкКи", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Microcurie, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("µRd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Microrutherford, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("мкРд", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Microrutherford, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("mBq", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Millibecquerel, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("мБк", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Millibecquerel, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("mCi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Millicurie, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("мКи", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Millicurie, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("mRd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Millirutherford, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("мРд", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Millirutherford, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("nBq", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Nanobecquerel, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("нБк", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Nanobecquerel, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("nCi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Nanocurie, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("нКи", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Nanocurie, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("nRd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Nanorutherford, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("нРд", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Nanorutherford, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("PBq", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Petabecquerel, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("ПБк", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Petabecquerel, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("pBq", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Picobecquerel, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("пБк", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Picobecquerel, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("pCi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Picocurie, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("пКи", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Picocurie, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("pRd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Picorutherford, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("пРд", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Picorutherford, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("Rd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Rutherford, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("Рд", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Rutherford, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("TBq", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Terabecquerel, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("ТБк", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Terabecquerel, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("TCi", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Teracurie, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("ТКи", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Teracurie, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("TRd", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(RadioactivityUnit.Terarutherford, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Radioactivity.ParseUnit("ТРд", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(RadioactivityUnit.Terarutherford, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(Radioactivity.TryParseUnit("Bq", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Becquerel, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("Бк", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Becquerel, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("Ci", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Curie, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("Ки", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Curie, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("EBq", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Exabecquerel, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("ЭБк", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Exabecquerel, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("GBq", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Gigabecquerel, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("ГБк", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Gigabecquerel, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("GCi", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Gigacurie, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("ГКи", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Gigacurie, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("GRd", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Gigarutherford, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("ГРд", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Gigarutherford, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("kBq", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Kilobecquerel, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("кБк", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Kilobecquerel, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("kCi", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Kilocurie, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("кКи", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Kilocurie, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("kRd", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Kilorutherford, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("кРд", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Kilorutherford, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("µBq", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Microbecquerel, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("мкБк", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Microbecquerel, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("µCi", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Microcurie, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("мкКи", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Microcurie, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("µRd", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Microrutherford, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("мкРд", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Microrutherford, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("nBq", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Nanobecquerel, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("нБк", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Nanobecquerel, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("nCi", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Nanocurie, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("нКи", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Nanocurie, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("nRd", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Nanorutherford, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("нРд", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Nanorutherford, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("pCi", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Picocurie, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("пКи", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Picocurie, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("pRd", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Picorutherford, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("пРд", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Picorutherford, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("Rd", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Rutherford, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("Рд", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Rutherford, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("TBq", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Terabecquerel, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("ТБк", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Terabecquerel, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("TCi", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Teracurie, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("ТКи", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Teracurie, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("TRd", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Terarutherford, parsedUnit);
            }

            {
                Assert.True(Radioactivity.TryParseUnit("ТРд", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(RadioactivityUnit.Terarutherford, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(RadioactivityUnit unit)
        {
            var inBaseUnits = Radioactivity.From(1.0, Radioactivity.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(RadioactivityUnit unit)
        {
            var quantity = Radioactivity.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(RadioactivityUnit unit)
        {
            // See if there is a unit available that is not the base unit, fallback to base unit if it has only a single unit.
            var fromUnit = Radioactivity.Units.First(u => u != Radioactivity.BaseUnit);

            var quantity = Radioactivity.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(RadioactivityUnit unit)
        {
            var quantity = default(Radioactivity);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Radioactivity becquerel = Radioactivity.FromBecquerels(1);
            Assert.Equal(1, Radioactivity.FromBecquerels(becquerel.Becquerels).Becquerels);
            Assert.Equal(1, Radioactivity.FromCuries(becquerel.Curies).Becquerels);
            Assert.Equal(1, Radioactivity.FromExabecquerels(becquerel.Exabecquerels).Becquerels);
            Assert.Equal(1, Radioactivity.FromGigabecquerels(becquerel.Gigabecquerels).Becquerels);
            Assert.Equal(1, Radioactivity.FromGigacuries(becquerel.Gigacuries).Becquerels);
            Assert.Equal(1, Radioactivity.FromGigarutherfords(becquerel.Gigarutherfords).Becquerels);
            Assert.Equal(1, Radioactivity.FromKilobecquerels(becquerel.Kilobecquerels).Becquerels);
            Assert.Equal(1, Radioactivity.FromKilocuries(becquerel.Kilocuries).Becquerels);
            Assert.Equal(1, Radioactivity.FromKilorutherfords(becquerel.Kilorutherfords).Becquerels);
            Assert.Equal(1, Radioactivity.FromMegabecquerels(becquerel.Megabecquerels).Becquerels);
            Assert.Equal(1, Radioactivity.FromMegacuries(becquerel.Megacuries).Becquerels);
            Assert.Equal(1, Radioactivity.FromMegarutherfords(becquerel.Megarutherfords).Becquerels);
            Assert.Equal(1, Radioactivity.FromMicrobecquerels(becquerel.Microbecquerels).Becquerels);
            Assert.Equal(1, Radioactivity.FromMicrocuries(becquerel.Microcuries).Becquerels);
            Assert.Equal(1, Radioactivity.FromMicrorutherfords(becquerel.Microrutherfords).Becquerels);
            Assert.Equal(1, Radioactivity.FromMillibecquerels(becquerel.Millibecquerels).Becquerels);
            Assert.Equal(1, Radioactivity.FromMillicuries(becquerel.Millicuries).Becquerels);
            Assert.Equal(1, Radioactivity.FromMillirutherfords(becquerel.Millirutherfords).Becquerels);
            Assert.Equal(1, Radioactivity.FromNanobecquerels(becquerel.Nanobecquerels).Becquerels);
            Assert.Equal(1, Radioactivity.FromNanocuries(becquerel.Nanocuries).Becquerels);
            Assert.Equal(1, Radioactivity.FromNanorutherfords(becquerel.Nanorutherfords).Becquerels);
            Assert.Equal(1, Radioactivity.FromPetabecquerels(becquerel.Petabecquerels).Becquerels);
            Assert.Equal(1, Radioactivity.FromPicobecquerels(becquerel.Picobecquerels).Becquerels);
            Assert.Equal(1, Radioactivity.FromPicocuries(becquerel.Picocuries).Becquerels);
            Assert.Equal(1, Radioactivity.FromPicorutherfords(becquerel.Picorutherfords).Becquerels);
            Assert.Equal(1, Radioactivity.FromRutherfords(becquerel.Rutherfords).Becquerels);
            Assert.Equal(1, Radioactivity.FromTerabecquerels(becquerel.Terabecquerels).Becquerels);
            Assert.Equal(1, Radioactivity.FromTeracuries(becquerel.Teracuries).Becquerels);
            Assert.Equal(1, Radioactivity.FromTerarutherfords(becquerel.Terarutherfords).Becquerels);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Radioactivity v = Radioactivity.FromBecquerels(1);
            Assert.Equal(-1, -v.Becquerels);
            Assert.Equal(2, (Radioactivity.FromBecquerels(3) - v).Becquerels);
            Assert.Equal(2, (v + v).Becquerels);
            Assert.Equal(10, (v * 10).Becquerels);
            Assert.Equal(10, (10 * v).Becquerels);
            Assert.Equal(2, (Radioactivity.FromBecquerels(10) / 5).Becquerels);
            Assert.Equal(2, Radioactivity.FromBecquerels(10) / Radioactivity.FromBecquerels(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            Radioactivity oneBecquerel = Radioactivity.FromBecquerels(1);
            Radioactivity twoBecquerels = Radioactivity.FromBecquerels(2);

            Assert.True(oneBecquerel < twoBecquerels);
            Assert.True(oneBecquerel <= twoBecquerels);
            Assert.True(twoBecquerels > oneBecquerel);
            Assert.True(twoBecquerels >= oneBecquerel);

            Assert.False(oneBecquerel > twoBecquerels);
            Assert.False(oneBecquerel >= twoBecquerels);
            Assert.False(twoBecquerels < oneBecquerel);
            Assert.False(twoBecquerels <= oneBecquerel);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Radioactivity becquerel = Radioactivity.FromBecquerels(1);
            Assert.Equal(0, becquerel.CompareTo(becquerel));
            Assert.True(becquerel.CompareTo(Radioactivity.Zero) > 0);
            Assert.True(Radioactivity.Zero.CompareTo(becquerel) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Radioactivity becquerel = Radioactivity.FromBecquerels(1);
            Assert.Throws<ArgumentException>(() => becquerel.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Radioactivity becquerel = Radioactivity.FromBecquerels(1);
            Assert.Throws<ArgumentNullException>(() => becquerel.CompareTo(null));
        }

        [Theory]
        [InlineData(1, RadioactivityUnit.Becquerel, 1, RadioactivityUnit.Becquerel, true)]  // Same value and unit.
        [InlineData(1, RadioactivityUnit.Becquerel, 2, RadioactivityUnit.Becquerel, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, RadioactivityUnit unitA, double valueB, RadioactivityUnit unitB, bool expectEqual)
        {
            var a = new Radioactivity(valueA, unitA);
            var b = new Radioactivity(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Radioactivity.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_WithTolerance_IsImplemented()
        {
            var v = Radioactivity.FromBecquerels(1);
            Assert.True(v.Equals(Radioactivity.FromBecquerels(1), Radioactivity.FromBecquerels(0)));
            Assert.True(v.Equals(Radioactivity.FromBecquerels(1), Radioactivity.FromBecquerels(0.001m)));
            Assert.True(v.Equals(Radioactivity.FromBecquerels(0.9999), Radioactivity.FromBecquerels(0.001m)));
            Assert.False(v.Equals(Radioactivity.FromBecquerels(0.99), Radioactivity.FromBecquerels(0.001m)));
            Assert.False(v.Equals(Radioactivity.Zero, Radioactivity.FromBecquerels(0.001m)));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Radioactivity.FromBecquerels(1);
            var negativeTolerance = Radioactivity.FromBecquerels(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Radioactivity.FromBecquerels(1), negativeTolerance));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Radioactivity becquerel = Radioactivity.FromBecquerels(1);
            Assert.False(becquerel.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Radioactivity becquerel = Radioactivity.FromBecquerels(1);
            Assert.False(becquerel.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(RadioactivityUnit)).Cast<RadioactivityUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Radioactivity.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentCulture;
            Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 Bq", new Radioactivity(1, RadioactivityUnit.Becquerel).ToString());
                Assert.Equal("1 Ci", new Radioactivity(1, RadioactivityUnit.Curie).ToString());
                Assert.Equal("1 EBq", new Radioactivity(1, RadioactivityUnit.Exabecquerel).ToString());
                Assert.Equal("1 GBq", new Radioactivity(1, RadioactivityUnit.Gigabecquerel).ToString());
                Assert.Equal("1 GCi", new Radioactivity(1, RadioactivityUnit.Gigacurie).ToString());
                Assert.Equal("1 GRd", new Radioactivity(1, RadioactivityUnit.Gigarutherford).ToString());
                Assert.Equal("1 kBq", new Radioactivity(1, RadioactivityUnit.Kilobecquerel).ToString());
                Assert.Equal("1 kCi", new Radioactivity(1, RadioactivityUnit.Kilocurie).ToString());
                Assert.Equal("1 kRd", new Radioactivity(1, RadioactivityUnit.Kilorutherford).ToString());
                Assert.Equal("1 MBq", new Radioactivity(1, RadioactivityUnit.Megabecquerel).ToString());
                Assert.Equal("1 MCi", new Radioactivity(1, RadioactivityUnit.Megacurie).ToString());
                Assert.Equal("1 MRd", new Radioactivity(1, RadioactivityUnit.Megarutherford).ToString());
                Assert.Equal("1 µBq", new Radioactivity(1, RadioactivityUnit.Microbecquerel).ToString());
                Assert.Equal("1 µCi", new Radioactivity(1, RadioactivityUnit.Microcurie).ToString());
                Assert.Equal("1 µRd", new Radioactivity(1, RadioactivityUnit.Microrutherford).ToString());
                Assert.Equal("1 mBq", new Radioactivity(1, RadioactivityUnit.Millibecquerel).ToString());
                Assert.Equal("1 mCi", new Radioactivity(1, RadioactivityUnit.Millicurie).ToString());
                Assert.Equal("1 mRd", new Radioactivity(1, RadioactivityUnit.Millirutherford).ToString());
                Assert.Equal("1 nBq", new Radioactivity(1, RadioactivityUnit.Nanobecquerel).ToString());
                Assert.Equal("1 nCi", new Radioactivity(1, RadioactivityUnit.Nanocurie).ToString());
                Assert.Equal("1 nRd", new Radioactivity(1, RadioactivityUnit.Nanorutherford).ToString());
                Assert.Equal("1 PBq", new Radioactivity(1, RadioactivityUnit.Petabecquerel).ToString());
                Assert.Equal("1 pBq", new Radioactivity(1, RadioactivityUnit.Picobecquerel).ToString());
                Assert.Equal("1 pCi", new Radioactivity(1, RadioactivityUnit.Picocurie).ToString());
                Assert.Equal("1 pRd", new Radioactivity(1, RadioactivityUnit.Picorutherford).ToString());
                Assert.Equal("1 Rd", new Radioactivity(1, RadioactivityUnit.Rutherford).ToString());
                Assert.Equal("1 TBq", new Radioactivity(1, RadioactivityUnit.Terabecquerel).ToString());
                Assert.Equal("1 TCi", new Radioactivity(1, RadioactivityUnit.Teracurie).ToString());
                Assert.Equal("1 TRd", new Radioactivity(1, RadioactivityUnit.Terarutherford).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 Bq", new Radioactivity(1, RadioactivityUnit.Becquerel).ToString(swedishCulture));
            Assert.Equal("1 Ci", new Radioactivity(1, RadioactivityUnit.Curie).ToString(swedishCulture));
            Assert.Equal("1 EBq", new Radioactivity(1, RadioactivityUnit.Exabecquerel).ToString(swedishCulture));
            Assert.Equal("1 GBq", new Radioactivity(1, RadioactivityUnit.Gigabecquerel).ToString(swedishCulture));
            Assert.Equal("1 GCi", new Radioactivity(1, RadioactivityUnit.Gigacurie).ToString(swedishCulture));
            Assert.Equal("1 GRd", new Radioactivity(1, RadioactivityUnit.Gigarutherford).ToString(swedishCulture));
            Assert.Equal("1 kBq", new Radioactivity(1, RadioactivityUnit.Kilobecquerel).ToString(swedishCulture));
            Assert.Equal("1 kCi", new Radioactivity(1, RadioactivityUnit.Kilocurie).ToString(swedishCulture));
            Assert.Equal("1 kRd", new Radioactivity(1, RadioactivityUnit.Kilorutherford).ToString(swedishCulture));
            Assert.Equal("1 MBq", new Radioactivity(1, RadioactivityUnit.Megabecquerel).ToString(swedishCulture));
            Assert.Equal("1 MCi", new Radioactivity(1, RadioactivityUnit.Megacurie).ToString(swedishCulture));
            Assert.Equal("1 MRd", new Radioactivity(1, RadioactivityUnit.Megarutherford).ToString(swedishCulture));
            Assert.Equal("1 µBq", new Radioactivity(1, RadioactivityUnit.Microbecquerel).ToString(swedishCulture));
            Assert.Equal("1 µCi", new Radioactivity(1, RadioactivityUnit.Microcurie).ToString(swedishCulture));
            Assert.Equal("1 µRd", new Radioactivity(1, RadioactivityUnit.Microrutherford).ToString(swedishCulture));
            Assert.Equal("1 mBq", new Radioactivity(1, RadioactivityUnit.Millibecquerel).ToString(swedishCulture));
            Assert.Equal("1 mCi", new Radioactivity(1, RadioactivityUnit.Millicurie).ToString(swedishCulture));
            Assert.Equal("1 mRd", new Radioactivity(1, RadioactivityUnit.Millirutherford).ToString(swedishCulture));
            Assert.Equal("1 nBq", new Radioactivity(1, RadioactivityUnit.Nanobecquerel).ToString(swedishCulture));
            Assert.Equal("1 nCi", new Radioactivity(1, RadioactivityUnit.Nanocurie).ToString(swedishCulture));
            Assert.Equal("1 nRd", new Radioactivity(1, RadioactivityUnit.Nanorutherford).ToString(swedishCulture));
            Assert.Equal("1 PBq", new Radioactivity(1, RadioactivityUnit.Petabecquerel).ToString(swedishCulture));
            Assert.Equal("1 pBq", new Radioactivity(1, RadioactivityUnit.Picobecquerel).ToString(swedishCulture));
            Assert.Equal("1 pCi", new Radioactivity(1, RadioactivityUnit.Picocurie).ToString(swedishCulture));
            Assert.Equal("1 pRd", new Radioactivity(1, RadioactivityUnit.Picorutherford).ToString(swedishCulture));
            Assert.Equal("1 Rd", new Radioactivity(1, RadioactivityUnit.Rutherford).ToString(swedishCulture));
            Assert.Equal("1 TBq", new Radioactivity(1, RadioactivityUnit.Terabecquerel).ToString(swedishCulture));
            Assert.Equal("1 TCi", new Radioactivity(1, RadioactivityUnit.Teracurie).ToString(swedishCulture));
            Assert.Equal("1 TRd", new Radioactivity(1, RadioactivityUnit.Terarutherford).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentCulture;
            try
            {
                CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 Bq", new Radioactivity(0.123456, RadioactivityUnit.Becquerel).ToString("s1"));
                Assert.Equal("0.12 Bq", new Radioactivity(0.123456, RadioactivityUnit.Becquerel).ToString("s2"));
                Assert.Equal("0.123 Bq", new Radioactivity(0.123456, RadioactivityUnit.Becquerel).ToString("s3"));
                Assert.Equal("0.1235 Bq", new Radioactivity(0.123456, RadioactivityUnit.Becquerel).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentCulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 Bq", new Radioactivity(0.123456, RadioactivityUnit.Becquerel).ToString("s1", culture));
            Assert.Equal("0.12 Bq", new Radioactivity(0.123456, RadioactivityUnit.Becquerel).ToString("s2", culture));
            Assert.Equal("0.123 Bq", new Radioactivity(0.123456, RadioactivityUnit.Becquerel).ToString("s3", culture));
            Assert.Equal("0.1235 Bq", new Radioactivity(0.123456, RadioactivityUnit.Becquerel).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("g", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(Radioactivity)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(RadioactivityUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
            Assert.Equal(Radioactivity.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
            Assert.Equal(Radioactivity.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
            #if NET7_0_OR_GREATER
            var expected = HashCode.Combine(Radioactivity.Info.Name, quantity.Becquerels);
            #else
            var expected = new {Radioactivity.Info.Name, valueInBaseUnit = quantity.Becquerels}.GetHashCode();
            #endif
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Radioactivity.FromBecquerels(value);
            Assert.Equal(Radioactivity.FromBecquerels(-value), -quantity);
        }
    }
}
