//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Frequency.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class FrequencyTestsBase : QuantityTestsBase
    {
        protected abstract double BeatsPerMinuteInOneHertz { get; }
        protected abstract double CyclesPerHourInOneHertz { get; }
        protected abstract double CyclesPerMinuteInOneHertz { get; }
        protected abstract double GigahertzInOneHertz { get; }
        protected abstract double HertzInOneHertz { get; }
        protected abstract double KilohertzInOneHertz { get; }
        protected abstract double MegahertzInOneHertz { get; }
        protected abstract double MicrohertzInOneHertz { get; }
        protected abstract double MillihertzInOneHertz { get; }
        protected abstract double PerSecondInOneHertz { get; }
        protected abstract double RadiansPerSecondInOneHertz { get; }
        protected abstract double TerahertzInOneHertz { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double BeatsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double CyclesPerHourTolerance { get { return 1e-5; } }
        protected virtual double CyclesPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double GigahertzTolerance { get { return 1e-5; } }
        protected virtual double HertzTolerance { get { return 1e-5; } }
        protected virtual double KilohertzTolerance { get { return 1e-5; } }
        protected virtual double MegahertzTolerance { get { return 1e-5; } }
        protected virtual double MicrohertzTolerance { get { return 1e-5; } }
        protected virtual double MillihertzTolerance { get { return 1e-5; } }
        protected virtual double PerSecondTolerance { get { return 1e-5; } }
        protected virtual double RadiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double TerahertzTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(FrequencyUnit unit)
        {
            return unit switch
            {
                FrequencyUnit.BeatPerMinute => (BeatsPerMinuteInOneHertz, BeatsPerMinuteTolerance),
                FrequencyUnit.CyclePerHour => (CyclesPerHourInOneHertz, CyclesPerHourTolerance),
                FrequencyUnit.CyclePerMinute => (CyclesPerMinuteInOneHertz, CyclesPerMinuteTolerance),
                FrequencyUnit.Gigahertz => (GigahertzInOneHertz, GigahertzTolerance),
                FrequencyUnit.Hertz => (HertzInOneHertz, HertzTolerance),
                FrequencyUnit.Kilohertz => (KilohertzInOneHertz, KilohertzTolerance),
                FrequencyUnit.Megahertz => (MegahertzInOneHertz, MegahertzTolerance),
                FrequencyUnit.Microhertz => (MicrohertzInOneHertz, MicrohertzTolerance),
                FrequencyUnit.Millihertz => (MillihertzInOneHertz, MillihertzTolerance),
                FrequencyUnit.PerSecond => (PerSecondInOneHertz, PerSecondTolerance),
                FrequencyUnit.RadianPerSecond => (RadiansPerSecondInOneHertz, RadiansPerSecondTolerance),
                FrequencyUnit.Terahertz => (TerahertzInOneHertz, TerahertzTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { FrequencyUnit.BeatPerMinute },
            new object[] { FrequencyUnit.CyclePerHour },
            new object[] { FrequencyUnit.CyclePerMinute },
            new object[] { FrequencyUnit.Gigahertz },
            new object[] { FrequencyUnit.Hertz },
            new object[] { FrequencyUnit.Kilohertz },
            new object[] { FrequencyUnit.Megahertz },
            new object[] { FrequencyUnit.Microhertz },
            new object[] { FrequencyUnit.Millihertz },
            new object[] { FrequencyUnit.PerSecond },
            new object[] { FrequencyUnit.RadianPerSecond },
            new object[] { FrequencyUnit.Terahertz },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Frequency();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(FrequencyUnit.Hertz, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Frequency(double.PositiveInfinity, FrequencyUnit.Hertz));
            var exception2 = Record.Exception(() => new Frequency(double.NegativeInfinity, FrequencyUnit.Hertz));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Frequency(double.NaN, FrequencyUnit.Hertz));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Frequency(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            if (SupportsSIUnitSystem)
            {
                var quantity = new Frequency(value: 1, unitSystem: UnitSystem.SI);
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(() => new Frequency(value: 1, unitSystem: UnitSystem.SI));
            }
        }

        [Fact]
        public void Frequency_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Frequency(1, FrequencyUnit.Hertz);

            QuantityInfo<FrequencyUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Frequency.Zero, quantityInfo.Zero);
            Assert.Equal("Frequency", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<FrequencyUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void HertzToFrequencyUnits()
        {
            Frequency hertz = Frequency.FromHertz(1);
            AssertEx.EqualTolerance(BeatsPerMinuteInOneHertz, hertz.BeatsPerMinute, BeatsPerMinuteTolerance);
            AssertEx.EqualTolerance(CyclesPerHourInOneHertz, hertz.CyclesPerHour, CyclesPerHourTolerance);
            AssertEx.EqualTolerance(CyclesPerMinuteInOneHertz, hertz.CyclesPerMinute, CyclesPerMinuteTolerance);
            AssertEx.EqualTolerance(GigahertzInOneHertz, hertz.Gigahertz, GigahertzTolerance);
            AssertEx.EqualTolerance(HertzInOneHertz, hertz.Hertz, HertzTolerance);
            AssertEx.EqualTolerance(KilohertzInOneHertz, hertz.Kilohertz, KilohertzTolerance);
            AssertEx.EqualTolerance(MegahertzInOneHertz, hertz.Megahertz, MegahertzTolerance);
            AssertEx.EqualTolerance(MicrohertzInOneHertz, hertz.Microhertz, MicrohertzTolerance);
            AssertEx.EqualTolerance(MillihertzInOneHertz, hertz.Millihertz, MillihertzTolerance);
            AssertEx.EqualTolerance(PerSecondInOneHertz, hertz.PerSecond, PerSecondTolerance);
            AssertEx.EqualTolerance(RadiansPerSecondInOneHertz, hertz.RadiansPerSecond, RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(TerahertzInOneHertz, hertz.Terahertz, TerahertzTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Frequency.From(1, FrequencyUnit.BeatPerMinute);
            Assert.Equal(1, quantity00.BeatsPerMinute);
            Assert.Equal(FrequencyUnit.BeatPerMinute, quantity00.Unit);

            var quantity01 = Frequency.From(1, FrequencyUnit.CyclePerHour);
            Assert.Equal(1, quantity01.CyclesPerHour);
            Assert.Equal(FrequencyUnit.CyclePerHour, quantity01.Unit);

            var quantity02 = Frequency.From(1, FrequencyUnit.CyclePerMinute);
            Assert.Equal(1, quantity02.CyclesPerMinute);
            Assert.Equal(FrequencyUnit.CyclePerMinute, quantity02.Unit);

            var quantity03 = Frequency.From(1, FrequencyUnit.Gigahertz);
            Assert.Equal(1, quantity03.Gigahertz);
            Assert.Equal(FrequencyUnit.Gigahertz, quantity03.Unit);

            var quantity04 = Frequency.From(1, FrequencyUnit.Hertz);
            Assert.Equal(1, quantity04.Hertz);
            Assert.Equal(FrequencyUnit.Hertz, quantity04.Unit);

            var quantity05 = Frequency.From(1, FrequencyUnit.Kilohertz);
            Assert.Equal(1, quantity05.Kilohertz);
            Assert.Equal(FrequencyUnit.Kilohertz, quantity05.Unit);

            var quantity06 = Frequency.From(1, FrequencyUnit.Megahertz);
            Assert.Equal(1, quantity06.Megahertz);
            Assert.Equal(FrequencyUnit.Megahertz, quantity06.Unit);

            var quantity07 = Frequency.From(1, FrequencyUnit.Microhertz);
            Assert.Equal(1, quantity07.Microhertz);
            Assert.Equal(FrequencyUnit.Microhertz, quantity07.Unit);

            var quantity08 = Frequency.From(1, FrequencyUnit.Millihertz);
            Assert.Equal(1, quantity08.Millihertz);
            Assert.Equal(FrequencyUnit.Millihertz, quantity08.Unit);

            var quantity09 = Frequency.From(1, FrequencyUnit.PerSecond);
            Assert.Equal(1, quantity09.PerSecond);
            Assert.Equal(FrequencyUnit.PerSecond, quantity09.Unit);

            var quantity10 = Frequency.From(1, FrequencyUnit.RadianPerSecond);
            Assert.Equal(1, quantity10.RadiansPerSecond);
            Assert.Equal(FrequencyUnit.RadianPerSecond, quantity10.Unit);

            var quantity11 = Frequency.From(1, FrequencyUnit.Terahertz);
            Assert.Equal(1, quantity11.Terahertz);
            Assert.Equal(FrequencyUnit.Terahertz, quantity11.Unit);

        }

        [Fact]
        public void FromHertz_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Frequency.FromHertz(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Frequency.FromHertz(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromHertz_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Frequency.FromHertz(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var hertz = Frequency.FromHertz(1);
            AssertEx.EqualTolerance(BeatsPerMinuteInOneHertz, hertz.As(FrequencyUnit.BeatPerMinute), BeatsPerMinuteTolerance);
            AssertEx.EqualTolerance(CyclesPerHourInOneHertz, hertz.As(FrequencyUnit.CyclePerHour), CyclesPerHourTolerance);
            AssertEx.EqualTolerance(CyclesPerMinuteInOneHertz, hertz.As(FrequencyUnit.CyclePerMinute), CyclesPerMinuteTolerance);
            AssertEx.EqualTolerance(GigahertzInOneHertz, hertz.As(FrequencyUnit.Gigahertz), GigahertzTolerance);
            AssertEx.EqualTolerance(HertzInOneHertz, hertz.As(FrequencyUnit.Hertz), HertzTolerance);
            AssertEx.EqualTolerance(KilohertzInOneHertz, hertz.As(FrequencyUnit.Kilohertz), KilohertzTolerance);
            AssertEx.EqualTolerance(MegahertzInOneHertz, hertz.As(FrequencyUnit.Megahertz), MegahertzTolerance);
            AssertEx.EqualTolerance(MicrohertzInOneHertz, hertz.As(FrequencyUnit.Microhertz), MicrohertzTolerance);
            AssertEx.EqualTolerance(MillihertzInOneHertz, hertz.As(FrequencyUnit.Millihertz), MillihertzTolerance);
            AssertEx.EqualTolerance(PerSecondInOneHertz, hertz.As(FrequencyUnit.PerSecond), PerSecondTolerance);
            AssertEx.EqualTolerance(RadiansPerSecondInOneHertz, hertz.As(FrequencyUnit.RadianPerSecond), RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(TerahertzInOneHertz, hertz.As(FrequencyUnit.Terahertz), TerahertzTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Frequency(value: 1, unit: Frequency.BaseUnit);
            if (SupportsSIUnitSystem)
            {
                Assert.Equal(1, quantity.As(UnitSystem.SI));
            }
            else
            {
                Assert.Throws<ArgumentException>(() => quantity.As(UnitSystem.SI));
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = Frequency.Parse("1 bpm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.BeatsPerMinute);
                Assert.Equal(FrequencyUnit.BeatPerMinute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Frequency.Parse("1 cph", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.CyclesPerHour);
                Assert.Equal(FrequencyUnit.CyclePerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Frequency.Parse("1 cpm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.CyclesPerMinute);
                Assert.Equal(FrequencyUnit.CyclePerMinute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Frequency.Parse("1 GHz", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Gigahertz);
                Assert.Equal(FrequencyUnit.Gigahertz, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Frequency.Parse("1 ГГц", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Gigahertz);
                Assert.Equal(FrequencyUnit.Gigahertz, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Frequency.Parse("1 Hz", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Hertz);
                Assert.Equal(FrequencyUnit.Hertz, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Frequency.Parse("1 Гц", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Hertz);
                Assert.Equal(FrequencyUnit.Hertz, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Frequency.Parse("1 kHz", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Kilohertz);
                Assert.Equal(FrequencyUnit.Kilohertz, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Frequency.Parse("1 кГц", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Kilohertz);
                Assert.Equal(FrequencyUnit.Kilohertz, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Frequency.Parse("1 MHz", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Megahertz);
                Assert.Equal(FrequencyUnit.Megahertz, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Frequency.Parse("1 МГц", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Megahertz);
                Assert.Equal(FrequencyUnit.Megahertz, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Frequency.Parse("1 µHz", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Microhertz);
                Assert.Equal(FrequencyUnit.Microhertz, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Frequency.Parse("1 мкГц", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Microhertz);
                Assert.Equal(FrequencyUnit.Microhertz, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Frequency.Parse("1 mHz", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Millihertz);
                Assert.Equal(FrequencyUnit.Millihertz, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Frequency.Parse("1 мГц", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Millihertz);
                Assert.Equal(FrequencyUnit.Millihertz, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Frequency.Parse("1 s⁻¹", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.PerSecond);
                Assert.Equal(FrequencyUnit.PerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Frequency.Parse("1 с⁻¹", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.PerSecond);
                Assert.Equal(FrequencyUnit.PerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Frequency.Parse("1 rad/s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.RadiansPerSecond);
                Assert.Equal(FrequencyUnit.RadianPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Frequency.Parse("1 рад/с", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.RadiansPerSecond);
                Assert.Equal(FrequencyUnit.RadianPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Frequency.Parse("1 THz", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Terahertz);
                Assert.Equal(FrequencyUnit.Terahertz, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Frequency.Parse("1 ТГц", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Terahertz);
                Assert.Equal(FrequencyUnit.Terahertz, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(Frequency.TryParse("1 bpm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.BeatsPerMinute);
                Assert.Equal(FrequencyUnit.BeatPerMinute, parsed.Unit);
            }

            {
                Assert.True(Frequency.TryParse("1 cph", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.CyclesPerHour);
                Assert.Equal(FrequencyUnit.CyclePerHour, parsed.Unit);
            }

            {
                Assert.True(Frequency.TryParse("1 cpm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.CyclesPerMinute);
                Assert.Equal(FrequencyUnit.CyclePerMinute, parsed.Unit);
            }

            {
                Assert.True(Frequency.TryParse("1 GHz", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Gigahertz);
                Assert.Equal(FrequencyUnit.Gigahertz, parsed.Unit);
            }

            {
                Assert.True(Frequency.TryParse("1 ГГц", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Gigahertz);
                Assert.Equal(FrequencyUnit.Gigahertz, parsed.Unit);
            }

            {
                Assert.True(Frequency.TryParse("1 Hz", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Hertz);
                Assert.Equal(FrequencyUnit.Hertz, parsed.Unit);
            }

            {
                Assert.True(Frequency.TryParse("1 Гц", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Hertz);
                Assert.Equal(FrequencyUnit.Hertz, parsed.Unit);
            }

            {
                Assert.True(Frequency.TryParse("1 kHz", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Kilohertz);
                Assert.Equal(FrequencyUnit.Kilohertz, parsed.Unit);
            }

            {
                Assert.True(Frequency.TryParse("1 кГц", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Kilohertz);
                Assert.Equal(FrequencyUnit.Kilohertz, parsed.Unit);
            }

            {
                Assert.True(Frequency.TryParse("1 µHz", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Microhertz);
                Assert.Equal(FrequencyUnit.Microhertz, parsed.Unit);
            }

            {
                Assert.True(Frequency.TryParse("1 мкГц", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Microhertz);
                Assert.Equal(FrequencyUnit.Microhertz, parsed.Unit);
            }

            {
                Assert.True(Frequency.TryParse("1 s⁻¹", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.PerSecond);
                Assert.Equal(FrequencyUnit.PerSecond, parsed.Unit);
            }

            {
                Assert.True(Frequency.TryParse("1 с⁻¹", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.PerSecond);
                Assert.Equal(FrequencyUnit.PerSecond, parsed.Unit);
            }

            {
                Assert.True(Frequency.TryParse("1 rad/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.RadiansPerSecond);
                Assert.Equal(FrequencyUnit.RadianPerSecond, parsed.Unit);
            }

            {
                Assert.True(Frequency.TryParse("1 рад/с", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.RadiansPerSecond);
                Assert.Equal(FrequencyUnit.RadianPerSecond, parsed.Unit);
            }

            {
                Assert.True(Frequency.TryParse("1 THz", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Terahertz);
                Assert.Equal(FrequencyUnit.Terahertz, parsed.Unit);
            }

            {
                Assert.True(Frequency.TryParse("1 ТГц", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Terahertz);
                Assert.Equal(FrequencyUnit.Terahertz, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = Frequency.ParseUnit("bpm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FrequencyUnit.BeatPerMinute, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Frequency.ParseUnit("cph", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FrequencyUnit.CyclePerHour, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Frequency.ParseUnit("cpm", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FrequencyUnit.CyclePerMinute, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Frequency.ParseUnit("GHz", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FrequencyUnit.Gigahertz, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Frequency.ParseUnit("ГГц", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FrequencyUnit.Gigahertz, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Frequency.ParseUnit("Hz", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FrequencyUnit.Hertz, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Frequency.ParseUnit("Гц", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FrequencyUnit.Hertz, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Frequency.ParseUnit("kHz", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FrequencyUnit.Kilohertz, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Frequency.ParseUnit("кГц", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FrequencyUnit.Kilohertz, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Frequency.ParseUnit("MHz", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FrequencyUnit.Megahertz, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Frequency.ParseUnit("МГц", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FrequencyUnit.Megahertz, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Frequency.ParseUnit("µHz", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FrequencyUnit.Microhertz, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Frequency.ParseUnit("мкГц", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FrequencyUnit.Microhertz, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Frequency.ParseUnit("mHz", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FrequencyUnit.Millihertz, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Frequency.ParseUnit("мГц", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FrequencyUnit.Millihertz, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Frequency.ParseUnit("s⁻¹", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FrequencyUnit.PerSecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Frequency.ParseUnit("с⁻¹", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FrequencyUnit.PerSecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Frequency.ParseUnit("rad/s", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FrequencyUnit.RadianPerSecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Frequency.ParseUnit("рад/с", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FrequencyUnit.RadianPerSecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Frequency.ParseUnit("THz", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FrequencyUnit.Terahertz, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Frequency.ParseUnit("ТГц", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FrequencyUnit.Terahertz, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(Frequency.TryParseUnit("bpm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FrequencyUnit.BeatPerMinute, parsedUnit);
            }

            {
                Assert.True(Frequency.TryParseUnit("cph", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FrequencyUnit.CyclePerHour, parsedUnit);
            }

            {
                Assert.True(Frequency.TryParseUnit("cpm", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FrequencyUnit.CyclePerMinute, parsedUnit);
            }

            {
                Assert.True(Frequency.TryParseUnit("GHz", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FrequencyUnit.Gigahertz, parsedUnit);
            }

            {
                Assert.True(Frequency.TryParseUnit("ГГц", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FrequencyUnit.Gigahertz, parsedUnit);
            }

            {
                Assert.True(Frequency.TryParseUnit("Hz", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FrequencyUnit.Hertz, parsedUnit);
            }

            {
                Assert.True(Frequency.TryParseUnit("Гц", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FrequencyUnit.Hertz, parsedUnit);
            }

            {
                Assert.True(Frequency.TryParseUnit("kHz", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FrequencyUnit.Kilohertz, parsedUnit);
            }

            {
                Assert.True(Frequency.TryParseUnit("кГц", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FrequencyUnit.Kilohertz, parsedUnit);
            }

            {
                Assert.True(Frequency.TryParseUnit("µHz", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FrequencyUnit.Microhertz, parsedUnit);
            }

            {
                Assert.True(Frequency.TryParseUnit("мкГц", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FrequencyUnit.Microhertz, parsedUnit);
            }

            {
                Assert.True(Frequency.TryParseUnit("s⁻¹", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FrequencyUnit.PerSecond, parsedUnit);
            }

            {
                Assert.True(Frequency.TryParseUnit("с⁻¹", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FrequencyUnit.PerSecond, parsedUnit);
            }

            {
                Assert.True(Frequency.TryParseUnit("rad/s", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FrequencyUnit.RadianPerSecond, parsedUnit);
            }

            {
                Assert.True(Frequency.TryParseUnit("рад/с", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FrequencyUnit.RadianPerSecond, parsedUnit);
            }

            {
                Assert.True(Frequency.TryParseUnit("THz", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FrequencyUnit.Terahertz, parsedUnit);
            }

            {
                Assert.True(Frequency.TryParseUnit("ТГц", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FrequencyUnit.Terahertz, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(FrequencyUnit unit)
        {
            var inBaseUnits = Frequency.From(1.0, Frequency.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(FrequencyUnit unit)
        {
            var quantity = Frequency.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(FrequencyUnit unit)
        {
            // See if there is a unit available that is not the base unit, fallback to base unit if it has only a single unit.
            var fromUnit = Frequency.Units.First(u => u != Frequency.BaseUnit);

            var quantity = Frequency.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(FrequencyUnit unit)
        {
            var quantity = default(Frequency);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Frequency hertz = Frequency.FromHertz(1);
            Assert.Equal(1, Frequency.FromBeatsPerMinute(hertz.BeatsPerMinute).Hertz);
            Assert.Equal(1, Frequency.FromCyclesPerHour(hertz.CyclesPerHour).Hertz);
            Assert.Equal(1, Frequency.FromCyclesPerMinute(hertz.CyclesPerMinute).Hertz);
            Assert.Equal(1, Frequency.FromGigahertz(hertz.Gigahertz).Hertz);
            Assert.Equal(1, Frequency.FromHertz(hertz.Hertz).Hertz);
            Assert.Equal(1, Frequency.FromKilohertz(hertz.Kilohertz).Hertz);
            Assert.Equal(1, Frequency.FromMegahertz(hertz.Megahertz).Hertz);
            Assert.Equal(1, Frequency.FromMicrohertz(hertz.Microhertz).Hertz);
            Assert.Equal(1, Frequency.FromMillihertz(hertz.Millihertz).Hertz);
            Assert.Equal(1, Frequency.FromPerSecond(hertz.PerSecond).Hertz);
            Assert.Equal(1, Frequency.FromRadiansPerSecond(hertz.RadiansPerSecond).Hertz);
            Assert.Equal(1, Frequency.FromTerahertz(hertz.Terahertz).Hertz);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Frequency v = Frequency.FromHertz(1);
            Assert.Equal(-1, -v.Hertz);
            Assert.Equal(2, (Frequency.FromHertz(3) - v).Hertz);
            Assert.Equal(2, (v + v).Hertz);
            Assert.Equal(10, (v * 10).Hertz);
            Assert.Equal(10, (10 * v).Hertz);
            Assert.Equal(2, (Frequency.FromHertz(10) / 5).Hertz);
            Assert.Equal(2, Frequency.FromHertz(10) / Frequency.FromHertz(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            Frequency oneHertz = Frequency.FromHertz(1);
            Frequency twoHertz = Frequency.FromHertz(2);

            Assert.True(oneHertz < twoHertz);
            Assert.True(oneHertz <= twoHertz);
            Assert.True(twoHertz > oneHertz);
            Assert.True(twoHertz >= oneHertz);

            Assert.False(oneHertz > twoHertz);
            Assert.False(oneHertz >= twoHertz);
            Assert.False(twoHertz < oneHertz);
            Assert.False(twoHertz <= oneHertz);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Frequency hertz = Frequency.FromHertz(1);
            Assert.Equal(0, hertz.CompareTo(hertz));
            Assert.True(hertz.CompareTo(Frequency.Zero) > 0);
            Assert.True(Frequency.Zero.CompareTo(hertz) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Frequency hertz = Frequency.FromHertz(1);
            Assert.Throws<ArgumentException>(() => hertz.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Frequency hertz = Frequency.FromHertz(1);
            Assert.Throws<ArgumentNullException>(() => hertz.CompareTo(null));
        }

        [Theory]
        [InlineData(1, FrequencyUnit.Hertz, 1, FrequencyUnit.Hertz, true)]  // Same value and unit.
        [InlineData(1, FrequencyUnit.Hertz, 2, FrequencyUnit.Hertz, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, FrequencyUnit unitA, double valueB, FrequencyUnit unitB, bool expectEqual)
        {
            var a = new Frequency(valueA, unitA);
            var b = new Frequency(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Frequency.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_WithTolerance_IsImplemented()
        {
            var v = Frequency.FromHertz(1);
            Assert.True(v.Equals(Frequency.FromHertz(1), Frequency.FromHertz(0)));
            Assert.True(v.Equals(Frequency.FromHertz(1), Frequency.FromHertz(0.001m)));
            Assert.True(v.Equals(Frequency.FromHertz(0.9999), Frequency.FromHertz(0.001m)));
            Assert.False(v.Equals(Frequency.FromHertz(0.99), Frequency.FromHertz(0.001m)));
            Assert.False(v.Equals(Frequency.Zero, Frequency.FromHertz(0.001m)));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Frequency.FromHertz(1);
            var negativeTolerance = Frequency.FromHertz(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Frequency.FromHertz(1), negativeTolerance));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Frequency hertz = Frequency.FromHertz(1);
            Assert.False(hertz.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Frequency hertz = Frequency.FromHertz(1);
            Assert.False(hertz.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(FrequencyUnit)).Cast<FrequencyUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Frequency.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentCulture;
            Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 bpm", new Frequency(1, FrequencyUnit.BeatPerMinute).ToString());
                Assert.Equal("1 cph", new Frequency(1, FrequencyUnit.CyclePerHour).ToString());
                Assert.Equal("1 cpm", new Frequency(1, FrequencyUnit.CyclePerMinute).ToString());
                Assert.Equal("1 GHz", new Frequency(1, FrequencyUnit.Gigahertz).ToString());
                Assert.Equal("1 Hz", new Frequency(1, FrequencyUnit.Hertz).ToString());
                Assert.Equal("1 kHz", new Frequency(1, FrequencyUnit.Kilohertz).ToString());
                Assert.Equal("1 MHz", new Frequency(1, FrequencyUnit.Megahertz).ToString());
                Assert.Equal("1 µHz", new Frequency(1, FrequencyUnit.Microhertz).ToString());
                Assert.Equal("1 mHz", new Frequency(1, FrequencyUnit.Millihertz).ToString());
                Assert.Equal("1 s⁻¹", new Frequency(1, FrequencyUnit.PerSecond).ToString());
                Assert.Equal("1 rad/s", new Frequency(1, FrequencyUnit.RadianPerSecond).ToString());
                Assert.Equal("1 THz", new Frequency(1, FrequencyUnit.Terahertz).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 bpm", new Frequency(1, FrequencyUnit.BeatPerMinute).ToString(swedishCulture));
            Assert.Equal("1 cph", new Frequency(1, FrequencyUnit.CyclePerHour).ToString(swedishCulture));
            Assert.Equal("1 cpm", new Frequency(1, FrequencyUnit.CyclePerMinute).ToString(swedishCulture));
            Assert.Equal("1 GHz", new Frequency(1, FrequencyUnit.Gigahertz).ToString(swedishCulture));
            Assert.Equal("1 Hz", new Frequency(1, FrequencyUnit.Hertz).ToString(swedishCulture));
            Assert.Equal("1 kHz", new Frequency(1, FrequencyUnit.Kilohertz).ToString(swedishCulture));
            Assert.Equal("1 MHz", new Frequency(1, FrequencyUnit.Megahertz).ToString(swedishCulture));
            Assert.Equal("1 µHz", new Frequency(1, FrequencyUnit.Microhertz).ToString(swedishCulture));
            Assert.Equal("1 mHz", new Frequency(1, FrequencyUnit.Millihertz).ToString(swedishCulture));
            Assert.Equal("1 s⁻¹", new Frequency(1, FrequencyUnit.PerSecond).ToString(swedishCulture));
            Assert.Equal("1 rad/s", new Frequency(1, FrequencyUnit.RadianPerSecond).ToString(swedishCulture));
            Assert.Equal("1 THz", new Frequency(1, FrequencyUnit.Terahertz).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentCulture;
            try
            {
                CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 Hz", new Frequency(0.123456, FrequencyUnit.Hertz).ToString("s1"));
                Assert.Equal("0.12 Hz", new Frequency(0.123456, FrequencyUnit.Hertz).ToString("s2"));
                Assert.Equal("0.123 Hz", new Frequency(0.123456, FrequencyUnit.Hertz).ToString("s3"));
                Assert.Equal("0.1235 Hz", new Frequency(0.123456, FrequencyUnit.Hertz).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentCulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 Hz", new Frequency(0.123456, FrequencyUnit.Hertz).ToString("s1", culture));
            Assert.Equal("0.12 Hz", new Frequency(0.123456, FrequencyUnit.Hertz).ToString("s2", culture));
            Assert.Equal("0.123 Hz", new Frequency(0.123456, FrequencyUnit.Hertz).ToString("s3", culture));
            Assert.Equal("0.1235 Hz", new Frequency(0.123456, FrequencyUnit.Hertz).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Frequency.FromHertz(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("g", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Frequency.FromHertz(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = Frequency.FromHertz(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = Frequency.FromHertz(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = Frequency.FromHertz(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = Frequency.FromHertz(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = Frequency.FromHertz(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = Frequency.FromHertz(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = Frequency.FromHertz(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = Frequency.FromHertz(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = Frequency.FromHertz(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = Frequency.FromHertz(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = Frequency.FromHertz(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = Frequency.FromHertz(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = Frequency.FromHertz(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = Frequency.FromHertz(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = Frequency.FromHertz(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = Frequency.FromHertz(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(Frequency)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = Frequency.FromHertz(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(FrequencyUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = Frequency.FromHertz(1.0);
            Assert.Equal(Frequency.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = Frequency.FromHertz(1.0);
            Assert.Equal(Frequency.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = Frequency.FromHertz(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Frequency.FromHertz(1.0);
            #if NET7_0_OR_GREATER
            var expected = HashCode.Combine(Frequency.Info.Name, quantity.Hertz);
            #else
            var expected = new {Frequency.Info.Name, valueInBaseUnit = quantity.Hertz}.GetHashCode();
            #endif
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Frequency.FromHertz(value);
            Assert.Equal(Frequency.FromHertz(-value), -quantity);
        }
    }
}
