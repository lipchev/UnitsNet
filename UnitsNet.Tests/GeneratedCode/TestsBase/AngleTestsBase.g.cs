//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Angle.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class AngleTestsBase : QuantityTestsBase
    {
        protected abstract double ArcminutesInOneDegree { get; }
        protected abstract double ArcsecondsInOneDegree { get; }
        protected abstract double CentiradiansInOneDegree { get; }
        protected abstract double DeciradiansInOneDegree { get; }
        protected abstract double DegreesInOneDegree { get; }
        protected abstract double GradiansInOneDegree { get; }
        protected abstract double MicrodegreesInOneDegree { get; }
        protected abstract double MicroradiansInOneDegree { get; }
        protected abstract double MillidegreesInOneDegree { get; }
        protected abstract double MilliradiansInOneDegree { get; }
        protected abstract double NanodegreesInOneDegree { get; }
        protected abstract double NanoradiansInOneDegree { get; }
        protected abstract double NatoMilsInOneDegree { get; }
        protected abstract double RadiansInOneDegree { get; }
        protected abstract double RevolutionsInOneDegree { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double ArcminutesTolerance { get { return 1e-5; } }
        protected virtual double ArcsecondsTolerance { get { return 1e-5; } }
        protected virtual double CentiradiansTolerance { get { return 1e-5; } }
        protected virtual double DeciradiansTolerance { get { return 1e-5; } }
        protected virtual double DegreesTolerance { get { return 1e-5; } }
        protected virtual double GradiansTolerance { get { return 1e-5; } }
        protected virtual double MicrodegreesTolerance { get { return 1e-5; } }
        protected virtual double MicroradiansTolerance { get { return 1e-5; } }
        protected virtual double MillidegreesTolerance { get { return 1e-5; } }
        protected virtual double MilliradiansTolerance { get { return 1e-5; } }
        protected virtual double NanodegreesTolerance { get { return 1e-5; } }
        protected virtual double NanoradiansTolerance { get { return 1e-5; } }
        protected virtual double NatoMilsTolerance { get { return 1e-5; } }
        protected virtual double RadiansTolerance { get { return 1e-5; } }
        protected virtual double RevolutionsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(AngleUnit unit)
        {
            return unit switch
            {
                AngleUnit.Arcminute => (ArcminutesInOneDegree, ArcminutesTolerance),
                AngleUnit.Arcsecond => (ArcsecondsInOneDegree, ArcsecondsTolerance),
                AngleUnit.Centiradian => (CentiradiansInOneDegree, CentiradiansTolerance),
                AngleUnit.Deciradian => (DeciradiansInOneDegree, DeciradiansTolerance),
                AngleUnit.Degree => (DegreesInOneDegree, DegreesTolerance),
                AngleUnit.Gradian => (GradiansInOneDegree, GradiansTolerance),
                AngleUnit.Microdegree => (MicrodegreesInOneDegree, MicrodegreesTolerance),
                AngleUnit.Microradian => (MicroradiansInOneDegree, MicroradiansTolerance),
                AngleUnit.Millidegree => (MillidegreesInOneDegree, MillidegreesTolerance),
                AngleUnit.Milliradian => (MilliradiansInOneDegree, MilliradiansTolerance),
                AngleUnit.Nanodegree => (NanodegreesInOneDegree, NanodegreesTolerance),
                AngleUnit.Nanoradian => (NanoradiansInOneDegree, NanoradiansTolerance),
                AngleUnit.NatoMil => (NatoMilsInOneDegree, NatoMilsTolerance),
                AngleUnit.Radian => (RadiansInOneDegree, RadiansTolerance),
                AngleUnit.Revolution => (RevolutionsInOneDegree, RevolutionsTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { AngleUnit.Arcminute },
            new object[] { AngleUnit.Arcsecond },
            new object[] { AngleUnit.Centiradian },
            new object[] { AngleUnit.Deciradian },
            new object[] { AngleUnit.Degree },
            new object[] { AngleUnit.Gradian },
            new object[] { AngleUnit.Microdegree },
            new object[] { AngleUnit.Microradian },
            new object[] { AngleUnit.Millidegree },
            new object[] { AngleUnit.Milliradian },
            new object[] { AngleUnit.Nanodegree },
            new object[] { AngleUnit.Nanoradian },
            new object[] { AngleUnit.NatoMil },
            new object[] { AngleUnit.Radian },
            new object[] { AngleUnit.Revolution },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Angle();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(AngleUnit.Degree, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Angle(double.PositiveInfinity, AngleUnit.Degree));
            var exception2 = Record.Exception(() => new Angle(double.NegativeInfinity, AngleUnit.Degree));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Angle(double.NaN, AngleUnit.Degree));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Angle(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            if (SupportsSIUnitSystem)
            {
                var quantity = new Angle(value: 1, unitSystem: UnitSystem.SI);
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(() => new Angle(value: 1, unitSystem: UnitSystem.SI));
            }
        }

        [Fact]
        public void Angle_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Angle(1, AngleUnit.Degree);

            QuantityInfo<AngleUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Angle.Zero, quantityInfo.Zero);
            Assert.Equal("Angle", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<AngleUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void DegreeToAngleUnits()
        {
            Angle degree = Angle.FromDegrees(1);
            AssertEx.EqualTolerance(ArcminutesInOneDegree, degree.Arcminutes, ArcminutesTolerance);
            AssertEx.EqualTolerance(ArcsecondsInOneDegree, degree.Arcseconds, ArcsecondsTolerance);
            AssertEx.EqualTolerance(CentiradiansInOneDegree, degree.Centiradians, CentiradiansTolerance);
            AssertEx.EqualTolerance(DeciradiansInOneDegree, degree.Deciradians, DeciradiansTolerance);
            AssertEx.EqualTolerance(DegreesInOneDegree, degree.Degrees, DegreesTolerance);
            AssertEx.EqualTolerance(GradiansInOneDegree, degree.Gradians, GradiansTolerance);
            AssertEx.EqualTolerance(MicrodegreesInOneDegree, degree.Microdegrees, MicrodegreesTolerance);
            AssertEx.EqualTolerance(MicroradiansInOneDegree, degree.Microradians, MicroradiansTolerance);
            AssertEx.EqualTolerance(MillidegreesInOneDegree, degree.Millidegrees, MillidegreesTolerance);
            AssertEx.EqualTolerance(MilliradiansInOneDegree, degree.Milliradians, MilliradiansTolerance);
            AssertEx.EqualTolerance(NanodegreesInOneDegree, degree.Nanodegrees, NanodegreesTolerance);
            AssertEx.EqualTolerance(NanoradiansInOneDegree, degree.Nanoradians, NanoradiansTolerance);
            AssertEx.EqualTolerance(NatoMilsInOneDegree, degree.NatoMils, NatoMilsTolerance);
            AssertEx.EqualTolerance(RadiansInOneDegree, degree.Radians, RadiansTolerance);
            AssertEx.EqualTolerance(RevolutionsInOneDegree, degree.Revolutions, RevolutionsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Angle.From(1, AngleUnit.Arcminute);
            Assert.Equal(1, quantity00.Arcminutes);
            Assert.Equal(AngleUnit.Arcminute, quantity00.Unit);

            var quantity01 = Angle.From(1, AngleUnit.Arcsecond);
            Assert.Equal(1, quantity01.Arcseconds);
            Assert.Equal(AngleUnit.Arcsecond, quantity01.Unit);

            var quantity02 = Angle.From(1, AngleUnit.Centiradian);
            Assert.Equal(1, quantity02.Centiradians);
            Assert.Equal(AngleUnit.Centiradian, quantity02.Unit);

            var quantity03 = Angle.From(1, AngleUnit.Deciradian);
            Assert.Equal(1, quantity03.Deciradians);
            Assert.Equal(AngleUnit.Deciradian, quantity03.Unit);

            var quantity04 = Angle.From(1, AngleUnit.Degree);
            Assert.Equal(1, quantity04.Degrees);
            Assert.Equal(AngleUnit.Degree, quantity04.Unit);

            var quantity05 = Angle.From(1, AngleUnit.Gradian);
            Assert.Equal(1, quantity05.Gradians);
            Assert.Equal(AngleUnit.Gradian, quantity05.Unit);

            var quantity06 = Angle.From(1, AngleUnit.Microdegree);
            Assert.Equal(1, quantity06.Microdegrees);
            Assert.Equal(AngleUnit.Microdegree, quantity06.Unit);

            var quantity07 = Angle.From(1, AngleUnit.Microradian);
            Assert.Equal(1, quantity07.Microradians);
            Assert.Equal(AngleUnit.Microradian, quantity07.Unit);

            var quantity08 = Angle.From(1, AngleUnit.Millidegree);
            Assert.Equal(1, quantity08.Millidegrees);
            Assert.Equal(AngleUnit.Millidegree, quantity08.Unit);

            var quantity09 = Angle.From(1, AngleUnit.Milliradian);
            Assert.Equal(1, quantity09.Milliradians);
            Assert.Equal(AngleUnit.Milliradian, quantity09.Unit);

            var quantity10 = Angle.From(1, AngleUnit.Nanodegree);
            Assert.Equal(1, quantity10.Nanodegrees);
            Assert.Equal(AngleUnit.Nanodegree, quantity10.Unit);

            var quantity11 = Angle.From(1, AngleUnit.Nanoradian);
            Assert.Equal(1, quantity11.Nanoradians);
            Assert.Equal(AngleUnit.Nanoradian, quantity11.Unit);

            var quantity12 = Angle.From(1, AngleUnit.NatoMil);
            Assert.Equal(1, quantity12.NatoMils);
            Assert.Equal(AngleUnit.NatoMil, quantity12.Unit);

            var quantity13 = Angle.From(1, AngleUnit.Radian);
            Assert.Equal(1, quantity13.Radians);
            Assert.Equal(AngleUnit.Radian, quantity13.Unit);

            var quantity14 = Angle.From(1, AngleUnit.Revolution);
            Assert.Equal(1, quantity14.Revolutions);
            Assert.Equal(AngleUnit.Revolution, quantity14.Unit);

        }

        [Fact]
        public void FromDegrees_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Angle.FromDegrees(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Angle.FromDegrees(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromDegrees_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Angle.FromDegrees(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var degree = Angle.FromDegrees(1);
            AssertEx.EqualTolerance(ArcminutesInOneDegree, degree.As(AngleUnit.Arcminute), ArcminutesTolerance);
            AssertEx.EqualTolerance(ArcsecondsInOneDegree, degree.As(AngleUnit.Arcsecond), ArcsecondsTolerance);
            AssertEx.EqualTolerance(CentiradiansInOneDegree, degree.As(AngleUnit.Centiradian), CentiradiansTolerance);
            AssertEx.EqualTolerance(DeciradiansInOneDegree, degree.As(AngleUnit.Deciradian), DeciradiansTolerance);
            AssertEx.EqualTolerance(DegreesInOneDegree, degree.As(AngleUnit.Degree), DegreesTolerance);
            AssertEx.EqualTolerance(GradiansInOneDegree, degree.As(AngleUnit.Gradian), GradiansTolerance);
            AssertEx.EqualTolerance(MicrodegreesInOneDegree, degree.As(AngleUnit.Microdegree), MicrodegreesTolerance);
            AssertEx.EqualTolerance(MicroradiansInOneDegree, degree.As(AngleUnit.Microradian), MicroradiansTolerance);
            AssertEx.EqualTolerance(MillidegreesInOneDegree, degree.As(AngleUnit.Millidegree), MillidegreesTolerance);
            AssertEx.EqualTolerance(MilliradiansInOneDegree, degree.As(AngleUnit.Milliradian), MilliradiansTolerance);
            AssertEx.EqualTolerance(NanodegreesInOneDegree, degree.As(AngleUnit.Nanodegree), NanodegreesTolerance);
            AssertEx.EqualTolerance(NanoradiansInOneDegree, degree.As(AngleUnit.Nanoradian), NanoradiansTolerance);
            AssertEx.EqualTolerance(NatoMilsInOneDegree, degree.As(AngleUnit.NatoMil), NatoMilsTolerance);
            AssertEx.EqualTolerance(RadiansInOneDegree, degree.As(AngleUnit.Radian), RadiansTolerance);
            AssertEx.EqualTolerance(RevolutionsInOneDegree, degree.As(AngleUnit.Revolution), RevolutionsTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Angle(value: 1, unit: Angle.BaseUnit);
            if (SupportsSIUnitSystem)
            {
                Assert.Equal(1, quantity.As(UnitSystem.SI));
            }
            else
            {
                Assert.Throws<ArgumentException>(() => quantity.As(UnitSystem.SI));
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = Angle.Parse("1 '", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Arcminutes);
                Assert.Equal(AngleUnit.Arcminute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 arcmin", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Arcminutes);
                Assert.Equal(AngleUnit.Arcminute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 amin", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Arcminutes);
                Assert.Equal(AngleUnit.Arcminute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 min", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Arcminutes);
                Assert.Equal(AngleUnit.Arcminute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 ″", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Arcseconds);
                Assert.Equal(AngleUnit.Arcsecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 arcsec", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Arcseconds);
                Assert.Equal(AngleUnit.Arcsecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 asec", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Arcseconds);
                Assert.Equal(AngleUnit.Arcsecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 sec", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Arcseconds);
                Assert.Equal(AngleUnit.Arcsecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 crad", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Centiradians);
                Assert.Equal(AngleUnit.Centiradian, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 срад", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Centiradians);
                Assert.Equal(AngleUnit.Centiradian, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 drad", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Deciradians);
                Assert.Equal(AngleUnit.Deciradian, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 драд", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Deciradians);
                Assert.Equal(AngleUnit.Deciradian, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 °", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Degrees);
                Assert.Equal(AngleUnit.Degree, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 deg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Degrees);
                Assert.Equal(AngleUnit.Degree, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 °", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Degrees);
                Assert.Equal(AngleUnit.Degree, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 g", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Gradians);
                Assert.Equal(AngleUnit.Gradian, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 g", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Gradians);
                Assert.Equal(AngleUnit.Gradian, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 µ°", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Microdegrees);
                Assert.Equal(AngleUnit.Microdegree, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 µdeg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Microdegrees);
                Assert.Equal(AngleUnit.Microdegree, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 мк°", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Microdegrees);
                Assert.Equal(AngleUnit.Microdegree, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 µrad", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Microradians);
                Assert.Equal(AngleUnit.Microradian, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 мкрад", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Microradians);
                Assert.Equal(AngleUnit.Microradian, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 m°", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Millidegrees);
                Assert.Equal(AngleUnit.Millidegree, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 mdeg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Millidegrees);
                Assert.Equal(AngleUnit.Millidegree, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 м°", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Millidegrees);
                Assert.Equal(AngleUnit.Millidegree, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 mrad", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Milliradians);
                Assert.Equal(AngleUnit.Milliradian, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 мрад", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Milliradians);
                Assert.Equal(AngleUnit.Milliradian, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 n°", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Nanodegrees);
                Assert.Equal(AngleUnit.Nanodegree, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 ndeg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Nanodegrees);
                Assert.Equal(AngleUnit.Nanodegree, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 н°", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Nanodegrees);
                Assert.Equal(AngleUnit.Nanodegree, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 nrad", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Nanoradians);
                Assert.Equal(AngleUnit.Nanoradian, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 нрад", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Nanoradians);
                Assert.Equal(AngleUnit.Nanoradian, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 mil", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.NatoMils);
                Assert.Equal(AngleUnit.NatoMil, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 rad", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Radians);
                Assert.Equal(AngleUnit.Radian, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 рад", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Radians);
                Assert.Equal(AngleUnit.Radian, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 r", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(1, parsed.Revolutions);
                Assert.Equal(AngleUnit.Revolution, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Angle.Parse("1 r", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(1, parsed.Revolutions);
                Assert.Equal(AngleUnit.Revolution, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(Angle.TryParse("1 '", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Arcminutes);
                Assert.Equal(AngleUnit.Arcminute, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 arcmin", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Arcminutes);
                Assert.Equal(AngleUnit.Arcminute, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 amin", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Arcminutes);
                Assert.Equal(AngleUnit.Arcminute, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 min", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Arcminutes);
                Assert.Equal(AngleUnit.Arcminute, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 ″", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Arcseconds);
                Assert.Equal(AngleUnit.Arcsecond, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 arcsec", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Arcseconds);
                Assert.Equal(AngleUnit.Arcsecond, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 asec", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Arcseconds);
                Assert.Equal(AngleUnit.Arcsecond, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 sec", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Arcseconds);
                Assert.Equal(AngleUnit.Arcsecond, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 crad", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Centiradians);
                Assert.Equal(AngleUnit.Centiradian, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 срад", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Centiradians);
                Assert.Equal(AngleUnit.Centiradian, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 drad", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Deciradians);
                Assert.Equal(AngleUnit.Deciradian, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 драд", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Deciradians);
                Assert.Equal(AngleUnit.Deciradian, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 °", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Degrees);
                Assert.Equal(AngleUnit.Degree, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 deg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Degrees);
                Assert.Equal(AngleUnit.Degree, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 °", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Degrees);
                Assert.Equal(AngleUnit.Degree, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 g", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Gradians);
                Assert.Equal(AngleUnit.Gradian, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 g", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Gradians);
                Assert.Equal(AngleUnit.Gradian, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 µ°", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Microdegrees);
                Assert.Equal(AngleUnit.Microdegree, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 µdeg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Microdegrees);
                Assert.Equal(AngleUnit.Microdegree, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 мк°", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Microdegrees);
                Assert.Equal(AngleUnit.Microdegree, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 µrad", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Microradians);
                Assert.Equal(AngleUnit.Microradian, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 мкрад", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Microradians);
                Assert.Equal(AngleUnit.Microradian, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 m°", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Millidegrees);
                Assert.Equal(AngleUnit.Millidegree, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 mdeg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Millidegrees);
                Assert.Equal(AngleUnit.Millidegree, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 м°", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Millidegrees);
                Assert.Equal(AngleUnit.Millidegree, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 mrad", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Milliradians);
                Assert.Equal(AngleUnit.Milliradian, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 мрад", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Milliradians);
                Assert.Equal(AngleUnit.Milliradian, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 n°", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Nanodegrees);
                Assert.Equal(AngleUnit.Nanodegree, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 ndeg", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Nanodegrees);
                Assert.Equal(AngleUnit.Nanodegree, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 н°", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Nanodegrees);
                Assert.Equal(AngleUnit.Nanodegree, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 nrad", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Nanoradians);
                Assert.Equal(AngleUnit.Nanoradian, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 нрад", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Nanoradians);
                Assert.Equal(AngleUnit.Nanoradian, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 mil", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.NatoMils);
                Assert.Equal(AngleUnit.NatoMil, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 rad", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Radians);
                Assert.Equal(AngleUnit.Radian, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 рад", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Radians);
                Assert.Equal(AngleUnit.Radian, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 r", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                Assert.Equal(1, parsed.Revolutions);
                Assert.Equal(AngleUnit.Revolution, parsed.Unit);
            }

            {
                Assert.True(Angle.TryParse("1 r", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                Assert.Equal(1, parsed.Revolutions);
                Assert.Equal(AngleUnit.Revolution, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = Angle.ParseUnit("'", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AngleUnit.Arcminute, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("arcmin", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AngleUnit.Arcminute, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("amin", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AngleUnit.Arcminute, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("min", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AngleUnit.Arcminute, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("″", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AngleUnit.Arcsecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("arcsec", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AngleUnit.Arcsecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("asec", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AngleUnit.Arcsecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("sec", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AngleUnit.Arcsecond, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("crad", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AngleUnit.Centiradian, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("срад", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AngleUnit.Centiradian, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("drad", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AngleUnit.Deciradian, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("драд", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AngleUnit.Deciradian, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("°", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AngleUnit.Degree, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("deg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AngleUnit.Degree, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("°", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AngleUnit.Degree, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("g", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AngleUnit.Gradian, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("g", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AngleUnit.Gradian, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("µ°", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AngleUnit.Microdegree, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("µdeg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AngleUnit.Microdegree, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("мк°", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AngleUnit.Microdegree, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("µrad", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AngleUnit.Microradian, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("мкрад", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AngleUnit.Microradian, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("m°", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AngleUnit.Millidegree, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("mdeg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AngleUnit.Millidegree, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("м°", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AngleUnit.Millidegree, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("mrad", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AngleUnit.Milliradian, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("мрад", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AngleUnit.Milliradian, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("n°", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AngleUnit.Nanodegree, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("ndeg", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AngleUnit.Nanodegree, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("н°", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AngleUnit.Nanodegree, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("nrad", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AngleUnit.Nanoradian, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("нрад", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AngleUnit.Nanoradian, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("mil", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AngleUnit.NatoMil, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("rad", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AngleUnit.Radian, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("рад", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AngleUnit.Radian, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("r", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(AngleUnit.Revolution, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = Angle.ParseUnit("r", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(AngleUnit.Revolution, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(Angle.TryParseUnit("'", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AngleUnit.Arcminute, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("arcmin", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AngleUnit.Arcminute, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("amin", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AngleUnit.Arcminute, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("min", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AngleUnit.Arcminute, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("″", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AngleUnit.Arcsecond, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("arcsec", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AngleUnit.Arcsecond, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("asec", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AngleUnit.Arcsecond, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("sec", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AngleUnit.Arcsecond, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("crad", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AngleUnit.Centiradian, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("срад", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AngleUnit.Centiradian, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("drad", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AngleUnit.Deciradian, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("драд", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AngleUnit.Deciradian, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("°", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AngleUnit.Degree, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("deg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AngleUnit.Degree, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("°", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AngleUnit.Degree, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("g", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AngleUnit.Gradian, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("g", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AngleUnit.Gradian, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("µ°", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AngleUnit.Microdegree, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("µdeg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AngleUnit.Microdegree, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("мк°", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AngleUnit.Microdegree, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("µrad", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AngleUnit.Microradian, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("мкрад", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AngleUnit.Microradian, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("m°", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AngleUnit.Millidegree, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("mdeg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AngleUnit.Millidegree, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("м°", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AngleUnit.Millidegree, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("mrad", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AngleUnit.Milliradian, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("мрад", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AngleUnit.Milliradian, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("n°", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AngleUnit.Nanodegree, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("ndeg", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AngleUnit.Nanodegree, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("н°", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AngleUnit.Nanodegree, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("nrad", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AngleUnit.Nanoradian, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("нрад", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AngleUnit.Nanoradian, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("mil", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AngleUnit.NatoMil, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("rad", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AngleUnit.Radian, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("рад", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AngleUnit.Radian, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("r", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(AngleUnit.Revolution, parsedUnit);
            }

            {
                Assert.True(Angle.TryParseUnit("r", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(AngleUnit.Revolution, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(AngleUnit unit)
        {
            var inBaseUnits = Angle.From(1.0, Angle.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(AngleUnit unit)
        {
            var quantity = Angle.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(AngleUnit unit)
        {
            // See if there is a unit available that is not the base unit, fallback to base unit if it has only a single unit.
            var fromUnit = Angle.Units.First(u => u != Angle.BaseUnit);

            var quantity = Angle.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(AngleUnit unit)
        {
            var quantity = default(Angle);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Angle degree = Angle.FromDegrees(1);
            Assert.Equal(1, Angle.FromArcminutes(degree.Arcminutes).Degrees);
            Assert.Equal(1, Angle.FromArcseconds(degree.Arcseconds).Degrees);
            Assert.Equal(1, Angle.FromCentiradians(degree.Centiradians).Degrees);
            Assert.Equal(1, Angle.FromDeciradians(degree.Deciradians).Degrees);
            Assert.Equal(1, Angle.FromDegrees(degree.Degrees).Degrees);
            Assert.Equal(1, Angle.FromGradians(degree.Gradians).Degrees);
            Assert.Equal(1, Angle.FromMicrodegrees(degree.Microdegrees).Degrees);
            Assert.Equal(1, Angle.FromMicroradians(degree.Microradians).Degrees);
            Assert.Equal(1, Angle.FromMillidegrees(degree.Millidegrees).Degrees);
            Assert.Equal(1, Angle.FromMilliradians(degree.Milliradians).Degrees);
            Assert.Equal(1, Angle.FromNanodegrees(degree.Nanodegrees).Degrees);
            Assert.Equal(1, Angle.FromNanoradians(degree.Nanoradians).Degrees);
            Assert.Equal(1, Angle.FromNatoMils(degree.NatoMils).Degrees);
            Assert.Equal(1, Angle.FromRadians(degree.Radians).Degrees);
            Assert.Equal(1, Angle.FromRevolutions(degree.Revolutions).Degrees);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Angle v = Angle.FromDegrees(1);
            Assert.Equal(-1, -v.Degrees);
            Assert.Equal(2, (Angle.FromDegrees(3) - v).Degrees);
            Assert.Equal(2, (v + v).Degrees);
            Assert.Equal(10, (v * 10).Degrees);
            Assert.Equal(10, (10 * v).Degrees);
            Assert.Equal(2, (Angle.FromDegrees(10) / 5).Degrees);
            Assert.Equal(2, Angle.FromDegrees(10) / Angle.FromDegrees(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            Angle oneDegree = Angle.FromDegrees(1);
            Angle twoDegrees = Angle.FromDegrees(2);

            Assert.True(oneDegree < twoDegrees);
            Assert.True(oneDegree <= twoDegrees);
            Assert.True(twoDegrees > oneDegree);
            Assert.True(twoDegrees >= oneDegree);

            Assert.False(oneDegree > twoDegrees);
            Assert.False(oneDegree >= twoDegrees);
            Assert.False(twoDegrees < oneDegree);
            Assert.False(twoDegrees <= oneDegree);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Angle degree = Angle.FromDegrees(1);
            Assert.Equal(0, degree.CompareTo(degree));
            Assert.True(degree.CompareTo(Angle.Zero) > 0);
            Assert.True(Angle.Zero.CompareTo(degree) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Angle degree = Angle.FromDegrees(1);
            Assert.Throws<ArgumentException>(() => degree.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Angle degree = Angle.FromDegrees(1);
            Assert.Throws<ArgumentNullException>(() => degree.CompareTo(null));
        }

        [Theory]
        [InlineData(1, AngleUnit.Degree, 1, AngleUnit.Degree, true)]  // Same value and unit.
        [InlineData(1, AngleUnit.Degree, 2, AngleUnit.Degree, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, AngleUnit unitA, double valueB, AngleUnit unitB, bool expectEqual)
        {
            var a = new Angle(valueA, unitA);
            var b = new Angle(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Angle.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_WithTolerance_IsImplemented()
        {
            var v = Angle.FromDegrees(1);
            Assert.True(v.Equals(Angle.FromDegrees(1), Angle.FromDegrees(0)));
            Assert.True(v.Equals(Angle.FromDegrees(1), Angle.FromDegrees(0.001m)));
            Assert.True(v.Equals(Angle.FromDegrees(0.9999), Angle.FromDegrees(0.001m)));
            Assert.False(v.Equals(Angle.FromDegrees(0.99), Angle.FromDegrees(0.001m)));
            Assert.False(v.Equals(Angle.Zero, Angle.FromDegrees(0.001m)));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Angle.FromDegrees(1);
            var negativeTolerance = Angle.FromDegrees(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Angle.FromDegrees(1), negativeTolerance));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Angle degree = Angle.FromDegrees(1);
            Assert.False(degree.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Angle degree = Angle.FromDegrees(1);
            Assert.False(degree.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(AngleUnit)).Cast<AngleUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Angle.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentCulture;
            Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 '", new Angle(1, AngleUnit.Arcminute).ToString());
                Assert.Equal("1 ″", new Angle(1, AngleUnit.Arcsecond).ToString());
                Assert.Equal("1 crad", new Angle(1, AngleUnit.Centiradian).ToString());
                Assert.Equal("1 drad", new Angle(1, AngleUnit.Deciradian).ToString());
                Assert.Equal("1 °", new Angle(1, AngleUnit.Degree).ToString());
                Assert.Equal("1 g", new Angle(1, AngleUnit.Gradian).ToString());
                Assert.Equal("1 µ°", new Angle(1, AngleUnit.Microdegree).ToString());
                Assert.Equal("1 µrad", new Angle(1, AngleUnit.Microradian).ToString());
                Assert.Equal("1 m°", new Angle(1, AngleUnit.Millidegree).ToString());
                Assert.Equal("1 mrad", new Angle(1, AngleUnit.Milliradian).ToString());
                Assert.Equal("1 n°", new Angle(1, AngleUnit.Nanodegree).ToString());
                Assert.Equal("1 nrad", new Angle(1, AngleUnit.Nanoradian).ToString());
                Assert.Equal("1 mil", new Angle(1, AngleUnit.NatoMil).ToString());
                Assert.Equal("1 rad", new Angle(1, AngleUnit.Radian).ToString());
                Assert.Equal("1 r", new Angle(1, AngleUnit.Revolution).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 '", new Angle(1, AngleUnit.Arcminute).ToString(swedishCulture));
            Assert.Equal("1 ″", new Angle(1, AngleUnit.Arcsecond).ToString(swedishCulture));
            Assert.Equal("1 crad", new Angle(1, AngleUnit.Centiradian).ToString(swedishCulture));
            Assert.Equal("1 drad", new Angle(1, AngleUnit.Deciradian).ToString(swedishCulture));
            Assert.Equal("1 °", new Angle(1, AngleUnit.Degree).ToString(swedishCulture));
            Assert.Equal("1 g", new Angle(1, AngleUnit.Gradian).ToString(swedishCulture));
            Assert.Equal("1 µ°", new Angle(1, AngleUnit.Microdegree).ToString(swedishCulture));
            Assert.Equal("1 µrad", new Angle(1, AngleUnit.Microradian).ToString(swedishCulture));
            Assert.Equal("1 m°", new Angle(1, AngleUnit.Millidegree).ToString(swedishCulture));
            Assert.Equal("1 mrad", new Angle(1, AngleUnit.Milliradian).ToString(swedishCulture));
            Assert.Equal("1 n°", new Angle(1, AngleUnit.Nanodegree).ToString(swedishCulture));
            Assert.Equal("1 nrad", new Angle(1, AngleUnit.Nanoradian).ToString(swedishCulture));
            Assert.Equal("1 mil", new Angle(1, AngleUnit.NatoMil).ToString(swedishCulture));
            Assert.Equal("1 rad", new Angle(1, AngleUnit.Radian).ToString(swedishCulture));
            Assert.Equal("1 r", new Angle(1, AngleUnit.Revolution).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentCulture;
            try
            {
                CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 °", new Angle(0.123456, AngleUnit.Degree).ToString("s1"));
                Assert.Equal("0.12 °", new Angle(0.123456, AngleUnit.Degree).ToString("s2"));
                Assert.Equal("0.123 °", new Angle(0.123456, AngleUnit.Degree).ToString("s3"));
                Assert.Equal("0.1235 °", new Angle(0.123456, AngleUnit.Degree).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentCulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 °", new Angle(0.123456, AngleUnit.Degree).ToString("s1", culture));
            Assert.Equal("0.12 °", new Angle(0.123456, AngleUnit.Degree).ToString("s2", culture));
            Assert.Equal("0.123 °", new Angle(0.123456, AngleUnit.Degree).ToString("s3", culture));
            Assert.Equal("0.1235 °", new Angle(0.123456, AngleUnit.Degree).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Angle.FromDegrees(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("g", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Angle.FromDegrees(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = Angle.FromDegrees(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = Angle.FromDegrees(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = Angle.FromDegrees(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = Angle.FromDegrees(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = Angle.FromDegrees(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = Angle.FromDegrees(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = Angle.FromDegrees(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = Angle.FromDegrees(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = Angle.FromDegrees(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = Angle.FromDegrees(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = Angle.FromDegrees(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = Angle.FromDegrees(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = Angle.FromDegrees(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = Angle.FromDegrees(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = Angle.FromDegrees(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = Angle.FromDegrees(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(Angle)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = Angle.FromDegrees(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(AngleUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = Angle.FromDegrees(1.0);
            Assert.Equal(Angle.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = Angle.FromDegrees(1.0);
            Assert.Equal(Angle.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = Angle.FromDegrees(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Angle.FromDegrees(1.0);
            #if NET7_0_OR_GREATER
            var expected = HashCode.Combine(Angle.Info.Name, quantity.Degrees);
            #else
            var expected = new {Angle.Info.Name, valueInBaseUnit = quantity.Degrees}.GetHashCode();
            #endif
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Angle.FromDegrees(value);
            Assert.Equal(Angle.FromDegrees(-value), -quantity);
        }
    }
}
